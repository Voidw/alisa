/*
* generated by Xtext
*/
package org.osate.assure.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.osate.assure.services.AssureGrammarAccess;

public class AssureParser extends AbstractContentAssistParser {
	
	@Inject
	private AssureGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.osate.assure.ui.contentassist.antlr.internal.InternalAssureParser createParser() {
		org.osate.assure.ui.contentassist.antlr.internal.InternalAssureParser result = new org.osate.assure.ui.contentassist.antlr.internal.InternalAssureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAssuranceResultAccess().getAlternatives(), "rule__AssuranceResult__Alternatives");
					put(grammarAccess.getDescriptionElementAccess().getAlternatives(), "rule__DescriptionElement__Alternatives");
					put(grammarAccess.getVerificationResultStateAccess().getAlternatives(), "rule__VerificationResultState__Alternatives");
					put(grammarAccess.getVerificationResultStatusAccess().getAlternatives(), "rule__VerificationResultStatus__Alternatives");
					put(grammarAccess.getAssuranceCaseAccess().getGroup(), "rule__AssuranceCase__Group__0");
					put(grammarAccess.getVerificationResultAccess().getGroup(), "rule__VerificationResult__Group__0");
					put(grammarAccess.getVerificationResultAccess().getGroup_6_0(), "rule__VerificationResult__Group_6_0__0");
					put(grammarAccess.getVerificationResultAccess().getGroup_6_1(), "rule__VerificationResult__Group_6_1__0");
					put(grammarAccess.getVerificationResultAccess().getGroup_6_2(), "rule__VerificationResult__Group_6_2__0");
					put(grammarAccess.getVerificationResultAccess().getGroup_6_3(), "rule__VerificationResult__Group_6_3__0");
					put(grammarAccess.getVerificationResultAccess().getGroup_6_4(), "rule__VerificationResult__Group_6_4__0");
					put(grammarAccess.getClaimResultAccess().getGroup(), "rule__ClaimResult__Group__0");
					put(grammarAccess.getClaimResultAccess().getGroup_6(), "rule__ClaimResult__Group_6__0");
					put(grammarAccess.getClaimResultAccess().getGroup_7(), "rule__ClaimResult__Group_7__0");
					put(grammarAccess.getClaimResultAccess().getGroup_8(), "rule__ClaimResult__Group_8__0");
					put(grammarAccess.getClaimResultAccess().getGroup_9(), "rule__ClaimResult__Group_9__0");
					put(grammarAccess.getReferencePathAccess().getGroup(), "rule__ReferencePath__Group__0");
					put(grammarAccess.getReferencePathAccess().getGroup_1(), "rule__ReferencePath__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getAadlClassifierReferenceAccess().getGroup(), "rule__AadlClassifierReference__Group__0");
					put(grammarAccess.getAadlClassifierReferenceAccess().getGroup_0(), "rule__AadlClassifierReference__Group_0__0");
					put(grammarAccess.getAadlClassifierReferenceAccess().getGroup_2(), "rule__AadlClassifierReference__Group_2__0");
					put(grammarAccess.getAssuranceCaseAccess().getNameAssignment_2(), "rule__AssuranceCase__NameAssignment_2");
					put(grammarAccess.getAssuranceCaseAccess().getTargetAssignment_4(), "rule__AssuranceCase__TargetAssignment_4");
					put(grammarAccess.getAssuranceCaseAccess().getResultsAssignment_6(), "rule__AssuranceCase__ResultsAssignment_6");
					put(grammarAccess.getVerificationResultAccess().getNameAssignment_2(), "rule__VerificationResult__NameAssignment_2");
					put(grammarAccess.getVerificationResultAccess().getVerificationActivityAssignment_4(), "rule__VerificationResult__VerificationActivityAssignment_4");
					put(grammarAccess.getVerificationResultAccess().getTitleAssignment_6_0_1(), "rule__VerificationResult__TitleAssignment_6_0_1");
					put(grammarAccess.getVerificationResultAccess().getDescriptionAssignment_6_1_1(), "rule__VerificationResult__DescriptionAssignment_6_1_1");
					put(grammarAccess.getVerificationResultAccess().getMethodAssignment_6_2_1(), "rule__VerificationResult__MethodAssignment_6_2_1");
					put(grammarAccess.getVerificationResultAccess().getStateAssignment_6_3_1(), "rule__VerificationResult__StateAssignment_6_3_1");
					put(grammarAccess.getVerificationResultAccess().getStatusAssignment_6_4_1(), "rule__VerificationResult__StatusAssignment_6_4_1");
					put(grammarAccess.getVerificationResultAccess().getAssumptionVerificationResultAssignment_7(), "rule__VerificationResult__AssumptionVerificationResultAssignment_7");
					put(grammarAccess.getClaimResultAccess().getNameAssignment_2(), "rule__ClaimResult__NameAssignment_2");
					put(grammarAccess.getClaimResultAccess().getRequirementAssignment_4(), "rule__ClaimResult__RequirementAssignment_4");
					put(grammarAccess.getClaimResultAccess().getPassCountAssignment_6_1(), "rule__ClaimResult__PassCountAssignment_6_1");
					put(grammarAccess.getClaimResultAccess().getFailCountAssignment_7_1(), "rule__ClaimResult__FailCountAssignment_7_1");
					put(grammarAccess.getClaimResultAccess().getNeutralCountAssignment_8_1(), "rule__ClaimResult__NeutralCountAssignment_8_1");
					put(grammarAccess.getClaimResultAccess().getUnknownCountAssignment_9_1(), "rule__ClaimResult__UnknownCountAssignment_9_1");
					put(grammarAccess.getClaimResultAccess().getSubClaimResultAssignment_10(), "rule__ClaimResult__SubClaimResultAssignment_10");
					put(grammarAccess.getClaimResultAccess().getSubVAResultAssignment_11(), "rule__ClaimResult__SubVAResultAssignment_11");
					put(grammarAccess.getModelAccess().getContentAssignment(), "rule__Model__ContentAssignment");
					put(grammarAccess.getDescriptionAccess().getDescriptionAssignment(), "rule__Description__DescriptionAssignment");
					put(grammarAccess.getDescriptionElementAccess().getTextAssignment_0(), "rule__DescriptionElement__TextAssignment_0");
					put(grammarAccess.getDescriptionElementAccess().getRefAssignment_1(), "rule__DescriptionElement__RefAssignment_1");
					put(grammarAccess.getReferencePathAccess().getRefAssignment_0(), "rule__ReferencePath__RefAssignment_0");
					put(grammarAccess.getReferencePathAccess().getSubpathAssignment_1_1(), "rule__ReferencePath__SubpathAssignment_1_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getVerificationResultAccess().getUnorderedGroup_6(), "rule__VerificationResult__UnorderedGroup_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.osate.assure.ui.contentassist.antlr.internal.InternalAssureParser typedParser = (org.osate.assure.ui.contentassist.antlr.internal.InternalAssureParser) parser;
			typedParser.entryRuleAssuranceCase();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AssureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AssureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
