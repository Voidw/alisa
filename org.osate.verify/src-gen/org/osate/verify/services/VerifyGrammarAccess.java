/*
* generated by Xtext
*/
package org.osate.verify.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.alisa.common.services.CommonGrammarAccess;

@Singleton
public class VerifyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RSALContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RSALContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTargetRequirementCrossReference_2_1_0 = (CrossReference)cTargetAssignment_2_1.eContents().get(0);
		private final RuleCall cTargetRequirementDOTTEDREFParserRuleCall_2_1_0_1 = (RuleCall)cTargetRequirementCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cContentAlternatives_4_0 = (Alternatives)cContentAssignment_4.eContents().get(0);
		private final RuleCall cContentVerificationActivityParserRuleCall_4_0_0 = (RuleCall)cContentAlternatives_4_0.eContents().get(0);
		private final RuleCall cContentVerificationMethodParserRuleCall_4_0_1 = (RuleCall)cContentAlternatives_4_0.eContents().get(1);
		private final RuleCall cContentRSALContainerParserRuleCall_4_0_2 = (RuleCall)cContentAlternatives_4_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RSALContainer:
		//	"container" name=ID ("for" target=[ReqSpec::Requirement|DOTTEDREF])? "[" content+=(VerificationActivity |
		//	VerificationMethod | RSALContainer)* "]";
		public ParserRule getRule() { return rule; }

		//"container" name=ID ("for" target=[ReqSpec::Requirement|DOTTEDREF])? "[" content+=(VerificationActivity |
		//VerificationMethod | RSALContainer)* "]"
		public Group getGroup() { return cGroup; }

		//"container"
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("for" target=[ReqSpec::Requirement|DOTTEDREF])?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//target=[ReqSpec::Requirement|DOTTEDREF]
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }

		//[ReqSpec::Requirement|DOTTEDREF]
		public CrossReference getTargetRequirementCrossReference_2_1_0() { return cTargetRequirementCrossReference_2_1_0; }

		//DOTTEDREF
		public RuleCall getTargetRequirementDOTTEDREFParserRuleCall_2_1_0_1() { return cTargetRequirementDOTTEDREFParserRuleCall_2_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//content+=(VerificationActivity | VerificationMethod | RSALContainer)*
		public Assignment getContentAssignment_4() { return cContentAssignment_4; }

		//VerificationActivity | VerificationMethod | RSALContainer
		public Alternatives getContentAlternatives_4_0() { return cContentAlternatives_4_0; }

		//VerificationActivity
		public RuleCall getContentVerificationActivityParserRuleCall_4_0_0() { return cContentVerificationActivityParserRuleCall_4_0_0; }

		//VerificationMethod
		public RuleCall getContentVerificationMethodParserRuleCall_4_0_1() { return cContentVerificationMethodParserRuleCall_4_0_1; }

		//RSALContainer
		public RuleCall getContentRSALContainerParserRuleCall_4_0_2() { return cContentRSALContainerParserRuleCall_4_0_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class VerificationActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cTitleKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTitleAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_4_0_1_0 = (RuleCall)cTitleAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cDescriptionKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDescriptionValueStringParserRuleCall_4_1_1_0 = (RuleCall)cDescriptionAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cCategoryKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cCategoryAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cCategoryVerificationCategoryCrossReference_4_2_1_0 = (CrossReference)cCategoryAssignment_4_2_1.eContents().get(0);
		private final RuleCall cCategoryVerificationCategoryDOTTEDREFParserRuleCall_4_2_1_0_1 = (RuleCall)cCategoryVerificationCategoryCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cUnorderedGroup_4.eContents().get(3);
		private final Keyword cMethodKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cMethodAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cMethodVerificationMethodParserRuleCall_4_3_1_0 = (RuleCall)cMethodAssignment_4_3_1.eContents().get(0);
		private final Assignment cAssumptionAssignment_4_4 = (Assignment)cUnorderedGroup_4.eContents().get(4);
		private final RuleCall cAssumptionVerificationAssumptionParserRuleCall_4_4_0 = (RuleCall)cAssumptionAssignment_4_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	Requirement: 'req' name=ID;
		/// *
		// * Verification Activity
		// * / VerificationActivity:
		//	"verification" "activity" name=ID "[" (("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)?
		//	& ("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|DOTTEDREF])? &
		//	("method" method=VerificationMethod)? & assumption+=VerificationAssumption*) "]";
		public ParserRule getRule() { return rule; }

		//"verification" "activity" name=ID "[" (("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)?
		//& ("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|DOTTEDREF])? &
		//("method" method=VerificationMethod)? & assumption+=VerificationAssumption*) "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"activity"
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)?
		//& ("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|DOTTEDREF])? &
		//("method" method=VerificationMethod)? & assumption+=VerificationAssumption*
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("title" title=ValueString)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"title"
		public Keyword getTitleKeyword_4_0_0() { return cTitleKeyword_4_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_4_0_1() { return cTitleAssignment_4_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_4_0_1_0() { return cTitleValueStringParserRuleCall_4_0_1_0; }

		//("description" description=ValueString)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"description"
		public Keyword getDescriptionKeyword_4_1_0() { return cDescriptionKeyword_4_1_0; }

		//description=ValueString
		public Assignment getDescriptionAssignment_4_1_1() { return cDescriptionAssignment_4_1_1; }

		//ValueString
		public RuleCall getDescriptionValueStringParserRuleCall_4_1_1_0() { return cDescriptionValueStringParserRuleCall_4_1_1_0; }

		//("category" category=[categories::VerificationCategory|DOTTEDREF])?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"category"
		public Keyword getCategoryKeyword_4_2_0() { return cCategoryKeyword_4_2_0; }

		//category=[categories::VerificationCategory|DOTTEDREF]
		public Assignment getCategoryAssignment_4_2_1() { return cCategoryAssignment_4_2_1; }

		//[categories::VerificationCategory|DOTTEDREF]
		public CrossReference getCategoryVerificationCategoryCrossReference_4_2_1_0() { return cCategoryVerificationCategoryCrossReference_4_2_1_0; }

		//DOTTEDREF
		public RuleCall getCategoryVerificationCategoryDOTTEDREFParserRuleCall_4_2_1_0_1() { return cCategoryVerificationCategoryDOTTEDREFParserRuleCall_4_2_1_0_1; }

		//("method" method=VerificationMethod)?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"method"
		public Keyword getMethodKeyword_4_3_0() { return cMethodKeyword_4_3_0; }

		//method=VerificationMethod
		public Assignment getMethodAssignment_4_3_1() { return cMethodAssignment_4_3_1; }

		//VerificationMethod
		public RuleCall getMethodVerificationMethodParserRuleCall_4_3_1_0() { return cMethodVerificationMethodParserRuleCall_4_3_1_0; }

		//assumption+=VerificationAssumption*
		public Assignment getAssumptionAssignment_4_4() { return cAssumptionAssignment_4_4; }

		//VerificationAssumption
		public RuleCall getAssumptionVerificationAssumptionParserRuleCall_4_4_0() { return cAssumptionVerificationAssumptionParserRuleCall_4_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class VerificationAssumptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationAssumption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAssumptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cTitleKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTitleAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_4_0_1_0 = (RuleCall)cTitleAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cDescriptionKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_4_1_1_0 = (RuleCall)cDescriptionAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cAssertedKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cByKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cAssertAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final CrossReference cAssertRequirementCrossReference_4_2_2_0 = (CrossReference)cAssertAssignment_4_2_2.eContents().get(0);
		private final RuleCall cAssertRequirementDOTTEDREFParserRuleCall_4_2_2_0_1 = (RuleCall)cAssertRequirementCrossReference_4_2_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cUnorderedGroup_4.eContents().get(3);
		private final Keyword cVerifiedByKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cVerifiedByAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cVerifiedByAssurancePlanCrossReference_4_3_1_0 = (CrossReference)cVerifiedByAssignment_4_3_1.eContents().get(0);
		private final RuleCall cVerifiedByAssurancePlanDOTTEDREFParserRuleCall_4_3_1_0_1 = (RuleCall)cVerifiedByAssurancePlanCrossReference_4_3_1_0.eContents().get(1);
		private final Group cGroup_4_4 = (Group)cUnorderedGroup_4.eContents().get(4);
		private final Keyword cRationaleKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cRationaleAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cRationaleValueStringParserRuleCall_4_4_1_0 = (RuleCall)cRationaleAssignment_4_4_1.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cUnorderedGroup_4.eContents().get(5);
		private final Keyword cIssuesKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cIssueAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cIssueValueStringParserRuleCall_4_5_1_0 = (RuleCall)cIssueAssignment_4_5_1.eContents().get(0);
		private final Group cGroup_4_5_2 = (Group)cGroup_4_5.eContents().get(2);
		private final Keyword cCommaKeyword_4_5_2_0 = (Keyword)cGroup_4_5_2.eContents().get(0);
		private final Assignment cIssueAssignment_4_5_2_1 = (Assignment)cGroup_4_5_2.eContents().get(1);
		private final RuleCall cIssueValueStringParserRuleCall_4_5_2_1_0 = (RuleCall)cIssueAssignment_4_5_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VerificationAssumption:
		//	"verification" "assumption" name=ID "[" (("title" title=ValueString)? & ("description" description=Description)? &
		//	("asserted" "by" assert=[ReqSpec::Requirement|DOTTEDREF])? & ("verified by" verifiedBy=[AssurancePlan|DOTTEDREF])? &
		//	("rationale" rationale=ValueString)? & ("issues" issue+=ValueString ("," issue+=ValueString)*)?) "]";
		public ParserRule getRule() { return rule; }

		//"verification" "assumption" name=ID "[" (("title" title=ValueString)? & ("description" description=Description)? &
		//("asserted" "by" assert=[ReqSpec::Requirement|DOTTEDREF])? & ("verified by" verifiedBy=[AssurancePlan|DOTTEDREF])? &
		//("rationale" rationale=ValueString)? & ("issues" issue+=ValueString ("," issue+=ValueString)*)?) "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"assumption"
		public Keyword getAssumptionKeyword_1() { return cAssumptionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//("title" title=ValueString)? & ("description" description=Description)? & ("asserted" "by"
		//assert=[ReqSpec::Requirement|DOTTEDREF])? & ("verified by" verifiedBy=[AssurancePlan|DOTTEDREF])? & ("rationale"
		//rationale=ValueString)? & ("issues" issue+=ValueString ("," issue+=ValueString)*)?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("title" title=ValueString)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"title"
		public Keyword getTitleKeyword_4_0_0() { return cTitleKeyword_4_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_4_0_1() { return cTitleAssignment_4_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_4_0_1_0() { return cTitleValueStringParserRuleCall_4_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"description"
		public Keyword getDescriptionKeyword_4_1_0() { return cDescriptionKeyword_4_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_4_1_1() { return cDescriptionAssignment_4_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_4_1_1_0() { return cDescriptionDescriptionParserRuleCall_4_1_1_0; }

		//("asserted" "by" assert=[ReqSpec::Requirement|DOTTEDREF])?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"asserted"
		public Keyword getAssertedKeyword_4_2_0() { return cAssertedKeyword_4_2_0; }

		//"by"
		public Keyword getByKeyword_4_2_1() { return cByKeyword_4_2_1; }

		//assert=[ReqSpec::Requirement|DOTTEDREF]
		public Assignment getAssertAssignment_4_2_2() { return cAssertAssignment_4_2_2; }

		//[ReqSpec::Requirement|DOTTEDREF]
		public CrossReference getAssertRequirementCrossReference_4_2_2_0() { return cAssertRequirementCrossReference_4_2_2_0; }

		//DOTTEDREF
		public RuleCall getAssertRequirementDOTTEDREFParserRuleCall_4_2_2_0_1() { return cAssertRequirementDOTTEDREFParserRuleCall_4_2_2_0_1; }

		//("verified by" verifiedBy=[AssurancePlan|DOTTEDREF])?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"verified by"
		public Keyword getVerifiedByKeyword_4_3_0() { return cVerifiedByKeyword_4_3_0; }

		//verifiedBy=[AssurancePlan|DOTTEDREF]
		public Assignment getVerifiedByAssignment_4_3_1() { return cVerifiedByAssignment_4_3_1; }

		//[AssurancePlan|DOTTEDREF]
		public CrossReference getVerifiedByAssurancePlanCrossReference_4_3_1_0() { return cVerifiedByAssurancePlanCrossReference_4_3_1_0; }

		//DOTTEDREF
		public RuleCall getVerifiedByAssurancePlanDOTTEDREFParserRuleCall_4_3_1_0_1() { return cVerifiedByAssurancePlanDOTTEDREFParserRuleCall_4_3_1_0_1; }

		//("rationale" rationale=ValueString)?
		public Group getGroup_4_4() { return cGroup_4_4; }

		//"rationale"
		public Keyword getRationaleKeyword_4_4_0() { return cRationaleKeyword_4_4_0; }

		//rationale=ValueString
		public Assignment getRationaleAssignment_4_4_1() { return cRationaleAssignment_4_4_1; }

		//ValueString
		public RuleCall getRationaleValueStringParserRuleCall_4_4_1_0() { return cRationaleValueStringParserRuleCall_4_4_1_0; }

		//("issues" issue+=ValueString ("," issue+=ValueString)*)?
		public Group getGroup_4_5() { return cGroup_4_5; }

		//"issues"
		public Keyword getIssuesKeyword_4_5_0() { return cIssuesKeyword_4_5_0; }

		//issue+=ValueString
		public Assignment getIssueAssignment_4_5_1() { return cIssueAssignment_4_5_1; }

		//ValueString
		public RuleCall getIssueValueStringParserRuleCall_4_5_1_0() { return cIssueValueStringParserRuleCall_4_5_1_0; }

		//("," issue+=ValueString)*
		public Group getGroup_4_5_2() { return cGroup_4_5_2; }

		//","
		public Keyword getCommaKeyword_4_5_2_0() { return cCommaKeyword_4_5_2_0; }

		//issue+=ValueString
		public Assignment getIssueAssignment_4_5_2_1() { return cIssueAssignment_4_5_2_1; }

		//ValueString
		public RuleCall getIssueValueStringParserRuleCall_4_5_2_1_0() { return cIssueValueStringParserRuleCall_4_5_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class AssurancePlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssurancePlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cArgumentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionArgumentExprParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRationaleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRationaleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRationaleValueStringParserRuleCall_5_1_0 = (RuleCall)cRationaleAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AssurancePlan:
		//	"plan" name=ID "argument" expression=ArgumentExpr ";" ("rationale" rationale=ValueString)? "end";
		public ParserRule getRule() { return rule; }

		//"plan" name=ID "argument" expression=ArgumentExpr ";" ("rationale" rationale=ValueString)? "end"
		public Group getGroup() { return cGroup; }

		//"plan"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"argument"
		public Keyword getArgumentKeyword_2() { return cArgumentKeyword_2; }

		//expression=ArgumentExpr
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ArgumentExpr
		public RuleCall getExpressionArgumentExprParserRuleCall_3_0() { return cExpressionArgumentExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//("rationale" rationale=ValueString)?
		public Group getGroup_5() { return cGroup_5; }

		//"rationale"
		public Keyword getRationaleKeyword_5_0() { return cRationaleKeyword_5_0; }

		//rationale=ValueString
		public Assignment getRationaleAssignment_5_1() { return cRationaleAssignment_5_1; }

		//ValueString
		public RuleCall getRationaleValueStringParserRuleCall_5_1_0() { return cRationaleValueStringParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class ArgumentExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentExpr");
		private final RuleCall cImpliesExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArgumentExpr:
		//	ImpliesExpr;
		public ParserRule getRule() { return rule; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall() { return cImpliesExprParserRuleCall; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr returns ArgumentExpr:
		//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
		public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="=>")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="=>"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="=>"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns ArgumentExpr:
		//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="or")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="or"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="or"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"or"
		public Keyword getOpOrKeyword_1_0_0_1_0() { return cOpOrKeyword_1_0_0_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAtomicExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns ArgumentExpr:
		//	AtomicExpr (=> ({BinaryExpr.left=current} op="and") right=AtomicExpr)*;
		public ParserRule getRule() { return rule; }

		//AtomicExpr (=> ({BinaryExpr.left=current} op="and") right=AtomicExpr)*
		public Group getGroup() { return cGroup; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_0() { return cAtomicExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="and") right=AtomicExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="and")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="and"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="and"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"and"
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=AtomicExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AtomicExpr
		public RuleCall getRightAtomicExprParserRuleCall_1_1_0() { return cRightAtomicExprParserRuleCall_1_1_0; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRefExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdArgumentReferenceParserRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AtomicExpr returns ArgumentExpr:
		//	{RefExpr} id=ArgumentReference | "(" ArgumentExpr ")";
		public ParserRule getRule() { return rule; }

		//{RefExpr} id=ArgumentReference | "(" ArgumentExpr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{RefExpr} id=ArgumentReference
		public Group getGroup_0() { return cGroup_0; }

		//{RefExpr}
		public Action getRefExprAction_0_0() { return cRefExprAction_0_0; }

		//id=ArgumentReference
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//ArgumentReference
		public RuleCall getIdArgumentReferenceParserRuleCall_0_1_0() { return cIdArgumentReferenceParserRuleCall_0_1_0; }

		//"(" ArgumentExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ArgumentExpr
		public RuleCall getArgumentExprParserRuleCall_1_1() { return cArgumentExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ArgumentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceVerificationActivityCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceVerificationActivityDOTTEDREFParserRuleCall_0_0_1 = (RuleCall)cReferenceVerificationActivityCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWeightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_1_1_0 = (RuleCall)cWeightAssignment_1_1.eContents().get(0);
		
		//ArgumentReference:
		//	reference=[VerificationActivity|DOTTEDREF] ("*" weight=INT)?;
		public ParserRule getRule() { return rule; }

		//reference=[VerificationActivity|DOTTEDREF] ("*" weight=INT)?
		public Group getGroup() { return cGroup; }

		//reference=[VerificationActivity|DOTTEDREF]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//[VerificationActivity|DOTTEDREF]
		public CrossReference getReferenceVerificationActivityCrossReference_0_0() { return cReferenceVerificationActivityCrossReference_0_0; }

		//DOTTEDREF
		public RuleCall getReferenceVerificationActivityDOTTEDREFParserRuleCall_0_0_1() { return cReferenceVerificationActivityDOTTEDREFParserRuleCall_0_0_1; }

		//("*" weight=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }

		//weight=INT
		public Assignment getWeightAssignment_1_1() { return cWeightAssignment_1_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_1_1_0() { return cWeightINTTerminalRuleCall_1_1_0; }
	}

	public class VerificationMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLanguageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLanguageSupportedLanguageParserRuleCall_4_0 = (RuleCall)cLanguageAssignment_4.eContents().get(0);
		private final Assignment cMethodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodValueStringParserRuleCall_5_0 = (RuleCall)cMethodAssignment_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cUnorderedGroup_6.eContents().get(0);
		private final Keyword cTitleKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cTitleAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_6_0_1_0 = (RuleCall)cTitleAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cUnorderedGroup_6.eContents().get(1);
		private final Keyword cDescriptionKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cDescriptionValueStringParserRuleCall_6_1_1_0 = (RuleCall)cDescriptionAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cUnorderedGroup_6.eContents().get(2);
		private final Keyword cCategoryKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cCategoryAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cCategoryVerificationCategoryCrossReference_6_2_1_0 = (CrossReference)cCategoryAssignment_6_2_1.eContents().get(0);
		private final RuleCall cCategoryVerificationCategoryCATREFParserRuleCall_6_2_1_0_1 = (RuleCall)cCategoryVerificationCategoryCrossReference_6_2_1_0.eContents().get(1);
		
		//VerificationMethod:
		//	"verification" "method" name=ID "=" language=SupportedLanguage method=ValueString (("title" title=ValueString)? &
		//	("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|CATREF])?);
		public ParserRule getRule() { return rule; }

		//"verification" "method" name=ID "=" language=SupportedLanguage method=ValueString (("title" title=ValueString)? &
		//("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|CATREF])?)
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"method"
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//language=SupportedLanguage
		public Assignment getLanguageAssignment_4() { return cLanguageAssignment_4; }

		//SupportedLanguage
		public RuleCall getLanguageSupportedLanguageParserRuleCall_4_0() { return cLanguageSupportedLanguageParserRuleCall_4_0; }

		//method=ValueString
		public Assignment getMethodAssignment_5() { return cMethodAssignment_5; }

		//ValueString
		public RuleCall getMethodValueStringParserRuleCall_5_0() { return cMethodValueStringParserRuleCall_5_0; }

		//("title" title=ValueString)? & ("description" description=ValueString)? & ("category"
		//category=[categories::VerificationCategory|CATREF])?
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }

		//("title" title=ValueString)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"title"
		public Keyword getTitleKeyword_6_0_0() { return cTitleKeyword_6_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_6_0_1() { return cTitleAssignment_6_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_6_0_1_0() { return cTitleValueStringParserRuleCall_6_0_1_0; }

		//("description" description=ValueString)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"description"
		public Keyword getDescriptionKeyword_6_1_0() { return cDescriptionKeyword_6_1_0; }

		//description=ValueString
		public Assignment getDescriptionAssignment_6_1_1() { return cDescriptionAssignment_6_1_1; }

		//ValueString
		public RuleCall getDescriptionValueStringParserRuleCall_6_1_1_0() { return cDescriptionValueStringParserRuleCall_6_1_1_0; }

		//("category" category=[categories::VerificationCategory|CATREF])?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//"category"
		public Keyword getCategoryKeyword_6_2_0() { return cCategoryKeyword_6_2_0; }

		//category=[categories::VerificationCategory|CATREF]
		public Assignment getCategoryAssignment_6_2_1() { return cCategoryAssignment_6_2_1; }

		//[categories::VerificationCategory|CATREF]
		public CrossReference getCategoryVerificationCategoryCrossReference_6_2_1_0() { return cCategoryVerificationCategoryCrossReference_6_2_1_0; }

		//CATREF
		public RuleCall getCategoryVerificationCategoryCATREFParserRuleCall_6_2_1_0_1() { return cCategoryVerificationCategoryCATREFParserRuleCall_6_2_1_0_1; }
	}

	public class SupportedLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedLanguage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLuteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAgreeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SupportedLanguage:
		//	"lute" | "agree";
		public ParserRule getRule() { return rule; }

		//"lute" | "agree"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"lute"
		public Keyword getLuteKeyword_0() { return cLuteKeyword_0; }

		//"agree"
		public Keyword getAgreeKeyword_1() { return cAgreeKeyword_1; }
	}

	public class ValueStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValueString: // remove quotes from string in ValueConverter 
		//	STRING;
		public ParserRule getRule() { return rule; }

		//// remove quotes from string in ValueConverter 
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final RSALContainerElements pRSALContainer;
	private final VerificationActivityElements pVerificationActivity;
	private final VerificationAssumptionElements pVerificationAssumption;
	private final AssurancePlanElements pAssurancePlan;
	private final ArgumentExprElements pArgumentExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final AtomicExprElements pAtomicExpr;
	private final ArgumentReferenceElements pArgumentReference;
	private final VerificationMethodElements pVerificationMethod;
	private final SupportedLanguageElements pSupportedLanguage;
	private final ValueStringElements pValueString;
	
	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	@Inject
	public VerifyGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pRSALContainer = new RSALContainerElements();
		this.pVerificationActivity = new VerificationActivityElements();
		this.pVerificationAssumption = new VerificationAssumptionElements();
		this.pAssurancePlan = new AssurancePlanElements();
		this.pArgumentExpr = new ArgumentExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pAtomicExpr = new AtomicExprElements();
		this.pArgumentReference = new ArgumentReferenceElements();
		this.pVerificationMethod = new VerificationMethodElements();
		this.pSupportedLanguage = new SupportedLanguageElements();
		this.pValueString = new ValueStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.verify.Verify".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	//RSALContainer:
	//	"container" name=ID ("for" target=[ReqSpec::Requirement|DOTTEDREF])? "[" content+=(VerificationActivity |
	//	VerificationMethod | RSALContainer)* "]";
	public RSALContainerElements getRSALContainerAccess() {
		return pRSALContainer;
	}
	
	public ParserRule getRSALContainerRule() {
		return getRSALContainerAccess().getRule();
	}

	////	Requirement: 'req' name=ID;
	/// *
	// * Verification Activity
	// * / VerificationActivity:
	//	"verification" "activity" name=ID "[" (("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)?
	//	& ("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|DOTTEDREF])? &
	//	("method" method=VerificationMethod)? & assumption+=VerificationAssumption*) "]";
	public VerificationActivityElements getVerificationActivityAccess() {
		return pVerificationActivity;
	}
	
	public ParserRule getVerificationActivityRule() {
		return getVerificationActivityAccess().getRule();
	}

	//VerificationAssumption:
	//	"verification" "assumption" name=ID "[" (("title" title=ValueString)? & ("description" description=Description)? &
	//	("asserted" "by" assert=[ReqSpec::Requirement|DOTTEDREF])? & ("verified by" verifiedBy=[AssurancePlan|DOTTEDREF])? &
	//	("rationale" rationale=ValueString)? & ("issues" issue+=ValueString ("," issue+=ValueString)*)?) "]";
	public VerificationAssumptionElements getVerificationAssumptionAccess() {
		return pVerificationAssumption;
	}
	
	public ParserRule getVerificationAssumptionRule() {
		return getVerificationAssumptionAccess().getRule();
	}

	//AssurancePlan:
	//	"plan" name=ID "argument" expression=ArgumentExpr ";" ("rationale" rationale=ValueString)? "end";
	public AssurancePlanElements getAssurancePlanAccess() {
		return pAssurancePlan;
	}
	
	public ParserRule getAssurancePlanRule() {
		return getAssurancePlanAccess().getRule();
	}

	//ArgumentExpr:
	//	ImpliesExpr;
	public ArgumentExprElements getArgumentExprAccess() {
		return pArgumentExpr;
	}
	
	public ParserRule getArgumentExprRule() {
		return getArgumentExprAccess().getRule();
	}

	//ImpliesExpr returns ArgumentExpr:
	//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr returns ArgumentExpr:
	//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns ArgumentExpr:
	//	AtomicExpr (=> ({BinaryExpr.left=current} op="and") right=AtomicExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//AtomicExpr returns ArgumentExpr:
	//	{RefExpr} id=ArgumentReference | "(" ArgumentExpr ")";
	public AtomicExprElements getAtomicExprAccess() {
		return pAtomicExpr;
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	//ArgumentReference:
	//	reference=[VerificationActivity|DOTTEDREF] ("*" weight=INT)?;
	public ArgumentReferenceElements getArgumentReferenceAccess() {
		return pArgumentReference;
	}
	
	public ParserRule getArgumentReferenceRule() {
		return getArgumentReferenceAccess().getRule();
	}

	//VerificationMethod:
	//	"verification" "method" name=ID "=" language=SupportedLanguage method=ValueString (("title" title=ValueString)? &
	//	("description" description=ValueString)? & ("category" category=[categories::VerificationCategory|CATREF])?);
	public VerificationMethodElements getVerificationMethodAccess() {
		return pVerificationMethod;
	}
	
	public ParserRule getVerificationMethodRule() {
		return getVerificationMethodAccess().getRule();
	}

	//SupportedLanguage:
	//	"lute" | "agree";
	public SupportedLanguageElements getSupportedLanguageAccess() {
		return pSupportedLanguage;
	}
	
	public ParserRule getSupportedLanguageRule() {
		return getSupportedLanguageAccess().getRule();
	}

	//ValueString: // remove quotes from string in ValueConverter 
	//	STRING;
	public ValueStringElements getValueStringAccess() {
		return pValueString;
	}
	
	public ParserRule getValueStringRule() {
		return getValueStringAccess().getRule();
	}

	//Model:
	//	content=Description;
	public CommonGrammarAccess.ModelElements getModelAccess() {
		return gaCommon.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Description:
	//	description+=DescriptionElement+;
	public CommonGrammarAccess.DescriptionElements getDescriptionAccess() {
		return gaCommon.getDescriptionAccess();
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//DescriptionElement:
	//	text=STRING | ref=[ecore::EObject];
	public CommonGrammarAccess.DescriptionElementElements getDescriptionElementAccess() {
		return gaCommon.getDescriptionElementAccess();
	}
	
	public ParserRule getDescriptionElementRule() {
		return getDescriptionElementAccess().getRule();
	}

	//ReferencePath:
	//	ref=[ecore::EObject] ("." subpath=ReferencePath);
	public CommonGrammarAccess.ReferencePathElements getReferencePathAccess() {
		return gaCommon.getReferencePathAccess();
	}
	
	public ParserRule getReferencePathRule() {
		return getReferencePathAccess().getRule();
	}

	//// dotted path as relative reference
	//DOTTEDREF:
	//	ID ("." ID)*;
	public CommonGrammarAccess.DOTTEDREFElements getDOTTEDREFAccess() {
		return gaCommon.getDOTTEDREFAccess();
	}
	
	public ParserRule getDOTTEDREFRule() {
		return getDOTTEDREFAccess().getRule();
	}

	//// :: qualified classifier reference
	//QNEREF:
	//	(ID "::")* ID ("." ID)?;
	public CommonGrammarAccess.QNEREFElements getQNEREFAccess() {
		return gaCommon.getQNEREFAccess();
	}
	
	public ParserRule getQNEREFRule() {
		return getQNEREFAccess().getRule();
	}

	//// dotted path as relative reference
	//CATREF:
	//	ID "." ID;
	public CommonGrammarAccess.CATREFElements getCATREFAccess() {
		return gaCommon.getCATREFAccess();
	}
	
	public ParserRule getCATREFRule() {
		return getCATREFAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommon.getANY_OTHERRule();
	} 
}
