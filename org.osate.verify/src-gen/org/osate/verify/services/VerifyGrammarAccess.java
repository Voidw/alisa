/*
* generated by Xtext
*/
package org.osate.verify.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.alisa.common.services.CommonGrammarAccess;

@Singleton
public class VerifyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VerificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verification");
		private final Assignment cContentsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cContentsAlternatives_0 = (Alternatives)cContentsAssignment.eContents().get(0);
		private final RuleCall cContentsVerificationLibraryParserRuleCall_0_0 = (RuleCall)cContentsAlternatives_0.eContents().get(0);
		private final RuleCall cContentsVerificationPlanParserRuleCall_0_1 = (RuleCall)cContentsAlternatives_0.eContents().get(1);
		private final RuleCall cContentsVerificationMethodRegistryParserRuleCall_0_2 = (RuleCall)cContentsAlternatives_0.eContents().get(2);
		
		//Verification:
		//	contents+=(VerificationLibrary | VerificationPlan | VerificationMethodRegistry);
		public ParserRule getRule() { return rule; }

		//contents+=(VerificationLibrary | VerificationPlan | VerificationMethodRegistry)
		public Assignment getContentsAssignment() { return cContentsAssignment; }

		//VerificationLibrary | VerificationPlan | VerificationMethodRegistry
		public Alternatives getContentsAlternatives_0() { return cContentsAlternatives_0; }

		//VerificationLibrary
		public RuleCall getContentsVerificationLibraryParserRuleCall_0_0() { return cContentsVerificationLibraryParserRuleCall_0_0; }

		//VerificationPlan
		public RuleCall getContentsVerificationPlanParserRuleCall_0_1() { return cContentsVerificationPlanParserRuleCall_0_1; }

		//VerificationMethodRegistry
		public RuleCall getContentsVerificationMethodRegistryParserRuleCall_0_2() { return cContentsVerificationMethodRegistryParserRuleCall_0_2; }
	}

	public class VerificationPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetComponentClassifierCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetComponentClassifierAadlClassifierReferenceParserRuleCall_3_0_1 = (RuleCall)cTargetComponentClassifierCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cTitleKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTitleAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_5_0_1_0 = (RuleCall)cTitleAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cDescriptionKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_5_1_1_0 = (RuleCall)cDescriptionAssignment_5_1_1.eContents().get(0);
		private final Assignment cClaimAssignment_5_2 = (Assignment)cUnorderedGroup_5.eContents().get(2);
		private final RuleCall cClaimClaimParserRuleCall_5_2_0 = (RuleCall)cClaimAssignment_5_2.eContents().get(0);
		private final Assignment cWeightedClaimAssignment_5_3 = (Assignment)cUnorderedGroup_5.eContents().get(3);
		private final RuleCall cWeightedClaimWeightedClaimParserRuleCall_5_3_0 = (RuleCall)cWeightedClaimAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cUnorderedGroup_5.eContents().get(4);
		private final Keyword cRationaleKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cRationaleAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cRationaleSTRINGTerminalRuleCall_5_4_1_0 = (RuleCall)cRationaleAssignment_5_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// plan for a classifier. Will add import to allow for non-qualified requirement references
		//// Also allows for cross checking that we have covered requirements with claims
		//VerificationPlan:
		//	"plan" name=ID "for" target= //      [ReqSpec::SystemSpec|QualifiedName]
		//	[aadl2::ComponentClassifier|AadlClassifierReference] "[" (("title" title=ValueString)? & ("description"
		//	description=Description)? & claim+=Claim* & weightedClaim+=WeightedClaim? & ("rationale" rationale=STRING)?) "]";
		public ParserRule getRule() { return rule; }

		//"plan" name=ID "for" target= //      [ReqSpec::SystemSpec|QualifiedName]
		//[aadl2::ComponentClassifier|AadlClassifierReference] "[" (("title" title=ValueString)? & ("description"
		//description=Description)? & claim+=Claim* & weightedClaim+=WeightedClaim? & ("rationale" rationale=STRING)?) "]"
		public Group getGroup() { return cGroup; }

		//"plan"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//target= //      [ReqSpec::SystemSpec|QualifiedName]
		//[aadl2::ComponentClassifier|AadlClassifierReference]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		////      [ReqSpec::SystemSpec|QualifiedName]
		//[aadl2::ComponentClassifier|AadlClassifierReference]
		public CrossReference getTargetComponentClassifierCrossReference_3_0() { return cTargetComponentClassifierCrossReference_3_0; }

		//AadlClassifierReference
		public RuleCall getTargetComponentClassifierAadlClassifierReferenceParserRuleCall_3_0_1() { return cTargetComponentClassifierAadlClassifierReferenceParserRuleCall_3_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//("title" title=ValueString)? & ("description" description=Description)? & claim+=Claim* & weightedClaim+=WeightedClaim?
		//& ("rationale" rationale=STRING)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("title" title=ValueString)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"title"
		public Keyword getTitleKeyword_5_0_0() { return cTitleKeyword_5_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_5_0_1() { return cTitleAssignment_5_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_5_0_1_0() { return cTitleValueStringParserRuleCall_5_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"description"
		public Keyword getDescriptionKeyword_5_1_0() { return cDescriptionKeyword_5_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_5_1_1() { return cDescriptionAssignment_5_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_5_1_1_0() { return cDescriptionDescriptionParserRuleCall_5_1_1_0; }

		//claim+=Claim*
		public Assignment getClaimAssignment_5_2() { return cClaimAssignment_5_2; }

		//Claim
		public RuleCall getClaimClaimParserRuleCall_5_2_0() { return cClaimClaimParserRuleCall_5_2_0; }

		//weightedClaim+=WeightedClaim?
		public Assignment getWeightedClaimAssignment_5_3() { return cWeightedClaimAssignment_5_3; }

		//WeightedClaim
		public RuleCall getWeightedClaimWeightedClaimParserRuleCall_5_3_0() { return cWeightedClaimWeightedClaimParserRuleCall_5_3_0; }

		//("rationale" rationale=STRING)?
		public Group getGroup_5_4() { return cGroup_5_4; }

		//"rationale"
		public Keyword getRationaleKeyword_5_4_0() { return cRationaleKeyword_5_4_0; }

		//rationale=STRING
		public Assignment getRationaleAssignment_5_4_1() { return cRationaleAssignment_5_4_1; }

		//STRING
		public RuleCall getRationaleSTRINGTerminalRuleCall_5_4_1_0() { return cRationaleSTRINGTerminalRuleCall_5_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class ClaimElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Claim");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequirementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRequirementRequirementCrossReference_3_0 = (CrossReference)cRequirementAssignment_3.eContents().get(0);
		private final RuleCall cRequirementRequirementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cRequirementRequirementCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cAssertKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cAssertAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cAssertArgumentExprParserRuleCall_5_0_1_0 = (RuleCall)cAssertAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cRationaleKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cRationaleAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cRationaleSTRINGTerminalRuleCall_5_1_1_0 = (RuleCall)cRationaleAssignment_5_1_1.eContents().get(0);
		private final Assignment cSubclaimAssignment_5_2 = (Assignment)cUnorderedGroup_5.eContents().get(2);
		private final RuleCall cSubclaimClaimParserRuleCall_5_2_0 = (RuleCall)cSubclaimAssignment_5_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Claim:
		//	"claim" name=ID "for" requirement=[ReqSpec::Requirement|QualifiedName] "[" ("assert" assert=ArgumentExpr &
		//	("rationale" rationale=STRING)? & subclaim+=Claim*) "]";
		public ParserRule getRule() { return rule; }

		//"claim" name=ID "for" requirement=[ReqSpec::Requirement|QualifiedName] "[" ("assert" assert=ArgumentExpr & ("rationale"
		//rationale=STRING)? & subclaim+=Claim*) "]"
		public Group getGroup() { return cGroup; }

		//"claim"
		public Keyword getClaimKeyword_0() { return cClaimKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//requirement=[ReqSpec::Requirement|QualifiedName]
		public Assignment getRequirementAssignment_3() { return cRequirementAssignment_3; }

		//[ReqSpec::Requirement|QualifiedName]
		public CrossReference getRequirementRequirementCrossReference_3_0() { return cRequirementRequirementCrossReference_3_0; }

		//QualifiedName
		public RuleCall getRequirementRequirementQualifiedNameParserRuleCall_3_0_1() { return cRequirementRequirementQualifiedNameParserRuleCall_3_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//"assert" assert=ArgumentExpr & ("rationale" rationale=STRING)? & subclaim+=Claim*
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//"assert" assert=ArgumentExpr
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"assert"
		public Keyword getAssertKeyword_5_0_0() { return cAssertKeyword_5_0_0; }

		//assert=ArgumentExpr
		public Assignment getAssertAssignment_5_0_1() { return cAssertAssignment_5_0_1; }

		//ArgumentExpr
		public RuleCall getAssertArgumentExprParserRuleCall_5_0_1_0() { return cAssertArgumentExprParserRuleCall_5_0_1_0; }

		//("rationale" rationale=STRING)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"rationale"
		public Keyword getRationaleKeyword_5_1_0() { return cRationaleKeyword_5_1_0; }

		//rationale=STRING
		public Assignment getRationaleAssignment_5_1_1() { return cRationaleAssignment_5_1_1; }

		//STRING
		public RuleCall getRationaleSTRINGTerminalRuleCall_5_1_1_0() { return cRationaleSTRINGTerminalRuleCall_5_1_1_0; }

		//subclaim+=Claim*
		public Assignment getSubclaimAssignment_5_2() { return cSubclaimAssignment_5_2; }

		//Claim
		public RuleCall getSubclaimClaimParserRuleCall_5_2_0() { return cSubclaimClaimParserRuleCall_5_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class WeightedClaimElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeightedClaim");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClaimAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClaimClaimCrossReference_1_0 = (CrossReference)cClaimAssignment_1.eContents().get(0);
		private final RuleCall cClaimClaimQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cClaimClaimCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWeightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_2_1_0 = (RuleCall)cWeightAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//WeightedClaim:
		//	"weights" claim=[Claim|QualifiedName] ("(" weight=INT ")")?;
		public ParserRule getRule() { return rule; }

		//"weights" claim=[Claim|QualifiedName] ("(" weight=INT ")")?
		public Group getGroup() { return cGroup; }

		//"weights"
		public Keyword getWeightsKeyword_0() { return cWeightsKeyword_0; }

		//claim=[Claim|QualifiedName]
		public Assignment getClaimAssignment_1() { return cClaimAssignment_1; }

		//[Claim|QualifiedName]
		public CrossReference getClaimClaimCrossReference_1_0() { return cClaimClaimCrossReference_1_0; }

		//QualifiedName
		public RuleCall getClaimClaimQualifiedNameParserRuleCall_1_0_1() { return cClaimClaimQualifiedNameParserRuleCall_1_0_1; }

		//("(" weight=INT ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//weight=INT
		public Assignment getWeightAssignment_2_1() { return cWeightAssignment_2_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_1_0() { return cWeightINTTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class VerificationLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTargetComponentClassifierCrossReference_2_1_0 = (CrossReference)cTargetAssignment_2_1.eContents().get(0);
		private final RuleCall cTargetComponentClassifierAadlClassifierReferenceParserRuleCall_2_1_0_1 = (RuleCall)cTargetComponentClassifierCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cTitleKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTitleAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_4_0_1_0 = (RuleCall)cTitleAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cDescriptionKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_4_1_1_0 = (RuleCall)cDescriptionAssignment_4_1_1.eContents().get(0);
		private final Assignment cContentAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final Alternatives cContentAlternatives_4_2_0 = (Alternatives)cContentAssignment_4_2.eContents().get(0);
		private final RuleCall cContentVerificationActivityParserRuleCall_4_2_0_0 = (RuleCall)cContentAlternatives_4_2_0.eContents().get(0);
		private final RuleCall cContentVerificationFolderParserRuleCall_4_2_0_1 = (RuleCall)cContentAlternatives_4_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VerificationLibrary:
		//	"library" name=ID ("for" target=[aadl2::ComponentClassifier|AadlClassifierReference])? "[" (("title"
		//	title=ValueString)? & ("description" description=Description)? & content+=(VerificationActivity |
		//	VerificationFolder)*) "]";
		public ParserRule getRule() { return rule; }

		//"library" name=ID ("for" target=[aadl2::ComponentClassifier|AadlClassifierReference])? "[" (("title" title=ValueString)?
		//& ("description" description=Description)? & content+=(VerificationActivity | VerificationFolder)*) "]"
		public Group getGroup() { return cGroup; }

		//"library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("for" target=[aadl2::ComponentClassifier|AadlClassifierReference])?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//target=[aadl2::ComponentClassifier|AadlClassifierReference]
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }

		//[aadl2::ComponentClassifier|AadlClassifierReference]
		public CrossReference getTargetComponentClassifierCrossReference_2_1_0() { return cTargetComponentClassifierCrossReference_2_1_0; }

		//AadlClassifierReference
		public RuleCall getTargetComponentClassifierAadlClassifierReferenceParserRuleCall_2_1_0_1() { return cTargetComponentClassifierAadlClassifierReferenceParserRuleCall_2_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//("title" title=ValueString)? & ("description" description=Description)? & content+=(VerificationActivity |
		//VerificationFolder)*
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("title" title=ValueString)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"title"
		public Keyword getTitleKeyword_4_0_0() { return cTitleKeyword_4_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_4_0_1() { return cTitleAssignment_4_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_4_0_1_0() { return cTitleValueStringParserRuleCall_4_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"description"
		public Keyword getDescriptionKeyword_4_1_0() { return cDescriptionKeyword_4_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_4_1_1() { return cDescriptionAssignment_4_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_4_1_1_0() { return cDescriptionDescriptionParserRuleCall_4_1_1_0; }

		//content+=(VerificationActivity | VerificationFolder)*
		public Assignment getContentAssignment_4_2() { return cContentAssignment_4_2; }

		//VerificationActivity | VerificationFolder
		public Alternatives getContentAlternatives_4_2_0() { return cContentAlternatives_4_2_0; }

		//VerificationActivity
		public RuleCall getContentVerificationActivityParserRuleCall_4_2_0_0() { return cContentVerificationActivityParserRuleCall_4_2_0_0; }

		//VerificationFolder
		public RuleCall getContentVerificationFolderParserRuleCall_4_2_0_1() { return cContentVerificationFolderParserRuleCall_4_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class VerificationFolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationFolder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFolderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cContentAlternatives_3_0 = (Alternatives)cContentAssignment_3.eContents().get(0);
		private final RuleCall cContentVerificationActivityParserRuleCall_3_0_0 = (RuleCall)cContentAlternatives_3_0.eContents().get(0);
		private final RuleCall cContentVerificationFolderParserRuleCall_3_0_1 = (RuleCall)cContentAlternatives_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VerificationFolder:
		//	"folder" label=ID "[" content+=(VerificationActivity | VerificationFolder)* "]";
		public ParserRule getRule() { return rule; }

		//"folder" label=ID "[" content+=(VerificationActivity | VerificationFolder)* "]"
		public Group getGroup() { return cGroup; }

		//"folder"
		public Keyword getFolderKeyword_0() { return cFolderKeyword_0; }

		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//content+=(VerificationActivity | VerificationFolder)*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//VerificationActivity | VerificationFolder
		public Alternatives getContentAlternatives_3_0() { return cContentAlternatives_3_0; }

		//VerificationActivity
		public RuleCall getContentVerificationActivityParserRuleCall_3_0_0() { return cContentVerificationActivityParserRuleCall_3_0_0; }

		//VerificationFolder
		public RuleCall getContentVerificationFolderParserRuleCall_3_0_1() { return cContentVerificationFolderParserRuleCall_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class VerificationContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerificationLibraryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerificationFolderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VerificationContainer:
		//	VerificationLibrary | VerificationFolder;
		public ParserRule getRule() { return rule; }

		//VerificationLibrary | VerificationFolder
		public Alternatives getAlternatives() { return cAlternatives; }

		//VerificationLibrary
		public RuleCall getVerificationLibraryParserRuleCall_0() { return cVerificationLibraryParserRuleCall_0; }

		//VerificationFolder
		public RuleCall getVerificationFolderParserRuleCall_1() { return cVerificationFolderParserRuleCall_1; }
	}

	public class VerificationActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequirementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRequirementRequirementCrossReference_3_0 = (CrossReference)cRequirementAssignment_3.eContents().get(0);
		private final RuleCall cRequirementRequirementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cRequirementRequirementCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cTitleKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTitleAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_5_0_1_0 = (RuleCall)cTitleAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cDescriptionKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_5_1_1_0 = (RuleCall)cDescriptionAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cCategoryKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cCategoryAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cCategorySelectionCategoryCrossReference_5_2_1_0 = (CrossReference)cCategoryAssignment_5_2_1.eContents().get(0);
		private final RuleCall cCategorySelectionCategoryCatRefParserRuleCall_5_2_1_0_1 = (RuleCall)cCategorySelectionCategoryCrossReference_5_2_1_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cMethodKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cMethodAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cMethodVerificationMethodCrossReference_5_3_1_0 = (CrossReference)cMethodAssignment_5_3_1.eContents().get(0);
		private final RuleCall cMethodVerificationMethodQualifiedNameParserRuleCall_5_3_1_0_1 = (RuleCall)cMethodVerificationMethodCrossReference_5_3_1_0.eContents().get(1);
		private final Group cGroup_5_4 = (Group)cUnorderedGroup_5.eContents().get(4);
		private final Keyword cTimeoutKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cTimeoutAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cTimeoutINTTerminalRuleCall_5_4_1_0 = (RuleCall)cTimeoutAssignment_5_4_1.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cUnorderedGroup_5.eContents().get(5);
		private final Keyword cRationaleKeyword_5_5_0 = (Keyword)cGroup_5_5.eContents().get(0);
		private final Assignment cRationaleAssignment_5_5_1 = (Assignment)cGroup_5_5.eContents().get(1);
		private final RuleCall cRationaleSTRINGTerminalRuleCall_5_5_1_0 = (RuleCall)cRationaleAssignment_5_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VerificationActivity:
		//	"activity" name=ID "for" requirement=[ReqSpec::Requirement|QualifiedName]? // or should it be the requirement, which provides the predicate
		//	"[" (("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)? 
		//	// these are data parameters to the method in addition to what comes with the model
		//	// and via the requirement (predicate/limit values
		//	& ("description" description=Description)? & ("category" category+=[categories::SelectionCategory|CatRef]+)? &
		//	("method" method=[VerificationMethod|QualifiedName])? & ("timeout" timeout=INT)? & ("rationale" rationale=STRING)?)
		//	"]";
		public ParserRule getRule() { return rule; }

		//"activity" name=ID "for" requirement=[ReqSpec::Requirement|QualifiedName]? // or should it be the requirement, which provides the predicate
		//"[" (("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)? 
		//// these are data parameters to the method in addition to what comes with the model
		//// and via the requirement (predicate/limit values
		//& ("description" description=Description)? & ("category" category+=[categories::SelectionCategory|CatRef]+)? & ("method"
		//method=[VerificationMethod|QualifiedName])? & ("timeout" timeout=INT)? & ("rationale" rationale=STRING)?) "]"
		public Group getGroup() { return cGroup; }

		//"activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//requirement=[ReqSpec::Requirement|QualifiedName]?
		public Assignment getRequirementAssignment_3() { return cRequirementAssignment_3; }

		//[ReqSpec::Requirement|QualifiedName]
		public CrossReference getRequirementRequirementCrossReference_3_0() { return cRequirementRequirementCrossReference_3_0; }

		//QualifiedName
		public RuleCall getRequirementRequirementQualifiedNameParserRuleCall_3_0_1() { return cRequirementRequirementQualifiedNameParserRuleCall_3_0_1; }

		//// or should it be the requirement, which provides the predicate
		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)? 
		//// these are data parameters to the method in addition to what comes with the model
		//// and via the requirement (predicate/limit values
		//& ("description" description=Description)? & ("category" category+=[categories::SelectionCategory|CatRef]+)? & ("method"
		//method=[VerificationMethod|QualifiedName])? & ("timeout" timeout=INT)? & ("rationale" rationale=STRING)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("title" title=ValueString)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"title"
		public Keyword getTitleKeyword_5_0_0() { return cTitleKeyword_5_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_5_0_1() { return cTitleAssignment_5_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_5_0_1_0() { return cTitleValueStringParserRuleCall_5_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"description"
		public Keyword getDescriptionKeyword_5_1_0() { return cDescriptionKeyword_5_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_5_1_1() { return cDescriptionAssignment_5_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_5_1_1_0() { return cDescriptionDescriptionParserRuleCall_5_1_1_0; }

		//("category" category+=[categories::SelectionCategory|CatRef]+)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"category"
		public Keyword getCategoryKeyword_5_2_0() { return cCategoryKeyword_5_2_0; }

		//category+=[categories::SelectionCategory|CatRef]+
		public Assignment getCategoryAssignment_5_2_1() { return cCategoryAssignment_5_2_1; }

		//[categories::SelectionCategory|CatRef]
		public CrossReference getCategorySelectionCategoryCrossReference_5_2_1_0() { return cCategorySelectionCategoryCrossReference_5_2_1_0; }

		//CatRef
		public RuleCall getCategorySelectionCategoryCatRefParserRuleCall_5_2_1_0_1() { return cCategorySelectionCategoryCatRefParserRuleCall_5_2_1_0_1; }

		//("method" method=[VerificationMethod|QualifiedName])?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"method"
		public Keyword getMethodKeyword_5_3_0() { return cMethodKeyword_5_3_0; }

		//method=[VerificationMethod|QualifiedName]
		public Assignment getMethodAssignment_5_3_1() { return cMethodAssignment_5_3_1; }

		//[VerificationMethod|QualifiedName]
		public CrossReference getMethodVerificationMethodCrossReference_5_3_1_0() { return cMethodVerificationMethodCrossReference_5_3_1_0; }

		//QualifiedName
		public RuleCall getMethodVerificationMethodQualifiedNameParserRuleCall_5_3_1_0_1() { return cMethodVerificationMethodQualifiedNameParserRuleCall_5_3_1_0_1; }

		//("timeout" timeout=INT)?
		public Group getGroup_5_4() { return cGroup_5_4; }

		//"timeout"
		public Keyword getTimeoutKeyword_5_4_0() { return cTimeoutKeyword_5_4_0; }

		//timeout=INT
		public Assignment getTimeoutAssignment_5_4_1() { return cTimeoutAssignment_5_4_1; }

		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_5_4_1_0() { return cTimeoutINTTerminalRuleCall_5_4_1_0; }

		//("rationale" rationale=STRING)?
		public Group getGroup_5_5() { return cGroup_5_5; }

		//"rationale"
		public Keyword getRationaleKeyword_5_5_0() { return cRationaleKeyword_5_5_0; }

		//rationale=STRING
		public Assignment getRationaleAssignment_5_5_1() { return cRationaleAssignment_5_5_1; }

		//STRING
		public RuleCall getRationaleSTRINGTerminalRuleCall_5_5_1_0() { return cRationaleSTRINGTerminalRuleCall_5_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class VerificationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cAssumptionKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Action cVerificationAssumptionAction_0_0_1 = (Action)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cPreconditionKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cVerificationPreconditionAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTitleKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTitleAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_3_0_1_0 = (RuleCall)cTitleAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDescriptionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_3_1_1_0 = (RuleCall)cDescriptionAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cAssertKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAssertAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAssertArgumentExprParserRuleCall_3_2_1_0 = (RuleCall)cAssertAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cRationaleKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cRationaleAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cRationaleSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cRationaleAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VerificationCondition:
		//	("assumption" {VerificationAssumption} | "precondition" {VerificationPrecondition}) name=ID "[" (("title"
		//	title=ValueString)? & ("description" description=Description)? & ("assert" assert=ArgumentExpr)? & ("rationale"
		//	rationale=STRING)?) "]";
		public ParserRule getRule() { return rule; }

		//("assumption" {VerificationAssumption} | "precondition" {VerificationPrecondition}) name=ID "[" (("title"
		//title=ValueString)? & ("description" description=Description)? & ("assert" assert=ArgumentExpr)? & ("rationale"
		//rationale=STRING)?) "]"
		public Group getGroup() { return cGroup; }

		//"assumption" {VerificationAssumption} | "precondition" {VerificationPrecondition}
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"assumption" {VerificationAssumption}
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"assumption"
		public Keyword getAssumptionKeyword_0_0_0() { return cAssumptionKeyword_0_0_0; }

		//{VerificationAssumption}
		public Action getVerificationAssumptionAction_0_0_1() { return cVerificationAssumptionAction_0_0_1; }

		//"precondition" {VerificationPrecondition}
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"precondition"
		public Keyword getPreconditionKeyword_0_1_0() { return cPreconditionKeyword_0_1_0; }

		//{VerificationPrecondition}
		public Action getVerificationPreconditionAction_0_1_1() { return cVerificationPreconditionAction_0_1_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//("title" title=ValueString)? & ("description" description=Description)? & ("assert" assert=ArgumentExpr)? & ("rationale"
		//rationale=STRING)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("title" title=ValueString)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"title"
		public Keyword getTitleKeyword_3_0_0() { return cTitleKeyword_3_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_3_0_1() { return cTitleAssignment_3_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_3_0_1_0() { return cTitleValueStringParserRuleCall_3_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"description"
		public Keyword getDescriptionKeyword_3_1_0() { return cDescriptionKeyword_3_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_3_1_1() { return cDescriptionAssignment_3_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_3_1_1_0() { return cDescriptionDescriptionParserRuleCall_3_1_1_0; }

		//("assert" assert=ArgumentExpr)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"assert"
		public Keyword getAssertKeyword_3_2_0() { return cAssertKeyword_3_2_0; }

		//assert=ArgumentExpr
		public Assignment getAssertAssignment_3_2_1() { return cAssertAssignment_3_2_1; }

		//ArgumentExpr
		public RuleCall getAssertArgumentExprParserRuleCall_3_2_1_0() { return cAssertArgumentExprParserRuleCall_3_2_1_0; }

		//("rationale" rationale=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"rationale"
		public Keyword getRationaleKeyword_3_3_0() { return cRationaleKeyword_3_3_0; }

		//rationale=STRING
		public Assignment getRationaleAssignment_3_3_1() { return cRationaleAssignment_3_3_1; }

		//STRING
		public RuleCall getRationaleSTRINGTerminalRuleCall_3_3_1_0() { return cRationaleSTRINGTerminalRuleCall_3_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ArgumentExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentExpr");
		private final RuleCall cAllEvidenceExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArgumentExpr:
		//	AllEvidenceExpr;
		public ParserRule getRule() { return rule; }

		//AllEvidenceExpr
		public RuleCall getAllEvidenceExprParserRuleCall() { return cAllEvidenceExprParserRuleCall; }
	}

	public class AllEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllEvidenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAllExprAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllAndThenEvidenceExprParserRuleCall_3_0 = (RuleCall)cAllAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAllAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAllAndThenEvidenceExprParserRuleCall_4_1_0 = (RuleCall)cAllAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AllEvidenceExpr returns ArgumentExpr:
		//	"all" {AllExpr} "[" all+=AndThenEvidenceExpr ("," all+=AndThenEvidenceExpr)* "]";
		public ParserRule getRule() { return rule; }

		//"all" {AllExpr} "[" all+=AndThenEvidenceExpr ("," all+=AndThenEvidenceExpr)* "]"
		public Group getGroup() { return cGroup; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//{AllExpr}
		public Action getAllExprAction_1() { return cAllExprAction_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//all+=AndThenEvidenceExpr
		public Assignment getAllAssignment_3() { return cAllAssignment_3; }

		//AndThenEvidenceExpr
		public RuleCall getAllAndThenEvidenceExprParserRuleCall_3_0() { return cAllAndThenEvidenceExprParserRuleCall_3_0; }

		//("," all+=AndThenEvidenceExpr)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//all+=AndThenEvidenceExpr
		public Assignment getAllAssignment_4_1() { return cAllAssignment_4_1; }

		//AndThenEvidenceExpr
		public RuleCall getAllAndThenEvidenceExprParserRuleCall_4_1_0() { return cAllAndThenEvidenceExprParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class AndThenEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndThenEvidenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFailThenEvidenceExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAndThenExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndthenKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndThenEvidenceExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndThenEvidenceExpr returns ArgumentExpr:
		//	FailThenEvidenceExpr (=> ({AndThenExpr.left=current} op="andthen") right=AndThenEvidenceExpr)*;
		public ParserRule getRule() { return rule; }

		//FailThenEvidenceExpr (=> ({AndThenExpr.left=current} op="andthen") right=AndThenEvidenceExpr)*
		public Group getGroup() { return cGroup; }

		//FailThenEvidenceExpr
		public RuleCall getFailThenEvidenceExprParserRuleCall_0() { return cFailThenEvidenceExprParserRuleCall_0; }

		//(=> ({AndThenExpr.left=current} op="andthen") right=AndThenEvidenceExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({AndThenExpr.left=current} op="andthen")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AndThenExpr.left=current} op="andthen"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AndThenExpr.left=current}
		public Action getAndThenExprLeftAction_1_0_0_0() { return cAndThenExprLeftAction_1_0_0_0; }

		//op="andthen"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"andthen"
		public Keyword getOpAndthenKeyword_1_0_0_1_0() { return cOpAndthenKeyword_1_0_0_1_0; }

		//right=AndThenEvidenceExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndThenEvidenceExpr
		public RuleCall getRightAndThenEvidenceExprParserRuleCall_1_1_0() { return cRightAndThenEvidenceExprParserRuleCall_1_1_0; }
	}

	public class FailThenEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FailThenEvidenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicEvidenceExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cFailThenExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpFailthenKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFailThenEvidenceExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Execute as alternative if the first one fails.
		//// The results of both are reported
		//FailThenEvidenceExpr returns ArgumentExpr:
		//	AtomicEvidenceExpr (=> ({FailThenExpr.left=current} op="failthen") right=FailThenEvidenceExpr)*;
		public ParserRule getRule() { return rule; }

		//AtomicEvidenceExpr (=> ({FailThenExpr.left=current} op="failthen") right=FailThenEvidenceExpr)*
		public Group getGroup() { return cGroup; }

		//AtomicEvidenceExpr
		public RuleCall getAtomicEvidenceExprParserRuleCall_0() { return cAtomicEvidenceExprParserRuleCall_0; }

		//(=> ({FailThenExpr.left=current} op="failthen") right=FailThenEvidenceExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({FailThenExpr.left=current} op="failthen")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{FailThenExpr.left=current} op="failthen"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{FailThenExpr.left=current}
		public Action getFailThenExprLeftAction_1_0_0_0() { return cFailThenExprLeftAction_1_0_0_0; }

		//op="failthen"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"failthen"
		public Keyword getOpFailthenKeyword_1_0_0_1_0() { return cOpFailthenKeyword_1_0_0_1_0; }

		//right=FailThenEvidenceExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//FailThenEvidenceExpr
		public RuleCall getRightFailThenEvidenceExprParserRuleCall_1_1_0() { return cRightFailThenEvidenceExprParserRuleCall_1_1_0; }
	}

	public class AtomicEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicEvidenceExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalEvidenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAndThenEvidenceExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cAllEvidenceExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AtomicEvidenceExpr returns ArgumentExpr:
		//	ConditionalEvidence | "(" AndThenEvidenceExpr ")" | AllEvidenceExpr;
		public ParserRule getRule() { return rule; }

		//ConditionalEvidence | "(" AndThenEvidenceExpr ")" | AllEvidenceExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConditionalEvidence
		public RuleCall getConditionalEvidenceParserRuleCall_0() { return cConditionalEvidenceParserRuleCall_0; }

		//"(" AndThenEvidenceExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//AndThenEvidenceExpr
		public RuleCall getAndThenEvidenceExprParserRuleCall_1_1() { return cAndThenEvidenceExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//AllEvidenceExpr
		public RuleCall getAllEvidenceExprParserRuleCall_2() { return cAllEvidenceExprParserRuleCall_2; }
	}

	public class ConditionalEvidenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalEvidence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVAReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cConditionalExprVerificationAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpWhenKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionOrConditionExprParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		
		//ConditionalEvidence returns ArgumentExpr:
		//	VAReference (=> ({ConditionalExpr.verification=current} op="when") condition=OrConditionExpr)?;
		public ParserRule getRule() { return rule; }

		//VAReference (=> ({ConditionalExpr.verification=current} op="when") condition=OrConditionExpr)?
		public Group getGroup() { return cGroup; }

		//VAReference
		public RuleCall getVAReferenceParserRuleCall_0() { return cVAReferenceParserRuleCall_0; }

		//(=> ({ConditionalExpr.verification=current} op="when") condition=OrConditionExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ConditionalExpr.verification=current} op="when")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ConditionalExpr.verification=current} op="when"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ConditionalExpr.verification=current}
		public Action getConditionalExprVerificationAction_1_0_0_0() { return cConditionalExprVerificationAction_1_0_0_0; }

		//op="when"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"when"
		public Keyword getOpWhenKeyword_1_0_0_1_0() { return cOpWhenKeyword_1_0_0_1_0; }

		//condition=OrConditionExpr
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//OrConditionExpr
		public RuleCall getConditionOrConditionExprParserRuleCall_1_1_0() { return cConditionOrConditionExprParserRuleCall_1_1_0; }
	}

	public class VAReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVerificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVerificationVerificationActivityCrossReference_1_0 = (CrossReference)cVerificationAssignment_1.eContents().get(0);
		private final RuleCall cVerificationVerificationActivityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cVerificationVerificationActivityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWeightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_2_1_0 = (RuleCall)cWeightAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//VAReference returns ArgumentExpr:
		//	{RefExpr} verification=[VerificationActivity|QualifiedName] ("(" weight=INT ")")?;
		public ParserRule getRule() { return rule; }

		//{RefExpr} verification=[VerificationActivity|QualifiedName] ("(" weight=INT ")")?
		public Group getGroup() { return cGroup; }

		//{RefExpr}
		public Action getRefExprAction_0() { return cRefExprAction_0; }

		//verification=[VerificationActivity|QualifiedName]
		public Assignment getVerificationAssignment_1() { return cVerificationAssignment_1; }

		//[VerificationActivity|QualifiedName]
		public CrossReference getVerificationVerificationActivityCrossReference_1_0() { return cVerificationVerificationActivityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getVerificationVerificationActivityQualifiedNameParserRuleCall_1_0_1() { return cVerificationVerificationActivityQualifiedNameParserRuleCall_1_0_1; }

		//("(" weight=INT ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//weight=INT
		public Assignment getWeightAssignment_2_1() { return cWeightAssignment_2_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_1_0() { return cWeightINTTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class OrConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrConditionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConditionExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cConditionExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndConditionExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrConditionExpr returns ConditionExpr:
		//	AndConditionExpr (=> ({ConditionExpr.left=current} op="or") right=AndConditionExpr)*;
		public ParserRule getRule() { return rule; }

		//AndConditionExpr (=> ({ConditionExpr.left=current} op="or") right=AndConditionExpr)*
		public Group getGroup() { return cGroup; }

		//AndConditionExpr
		public RuleCall getAndConditionExprParserRuleCall_0() { return cAndConditionExprParserRuleCall_0; }

		//(=> ({ConditionExpr.left=current} op="or") right=AndConditionExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ConditionExpr.left=current} op="or")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ConditionExpr.left=current} op="or"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ConditionExpr.left=current}
		public Action getConditionExprLeftAction_1_0_0_0() { return cConditionExprLeftAction_1_0_0_0; }

		//op="or"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"or"
		public Keyword getOpOrKeyword_1_0_0_1_0() { return cOpOrKeyword_1_0_0_1_0; }

		//right=AndConditionExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndConditionExpr
		public RuleCall getRightAndConditionExprParserRuleCall_1_1_0() { return cRightAndConditionExprParserRuleCall_1_1_0; }
	}

	public class AndConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndConditionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicConditionExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cConditionExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAtomicConditionExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndConditionExpr returns ConditionExpr:
		//	AtomicConditionExpr (=> ({ConditionExpr.left=current} op="and") right=AtomicConditionExpr)*;
		public ParserRule getRule() { return rule; }

		//AtomicConditionExpr (=> ({ConditionExpr.left=current} op="and") right=AtomicConditionExpr)*
		public Group getGroup() { return cGroup; }

		//AtomicConditionExpr
		public RuleCall getAtomicConditionExprParserRuleCall_0() { return cAtomicConditionExprParserRuleCall_0; }

		//(=> ({ConditionExpr.left=current} op="and") right=AtomicConditionExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ConditionExpr.left=current} op="and")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ConditionExpr.left=current} op="and"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ConditionExpr.left=current}
		public Action getConditionExprLeftAction_1_0_0_0() { return cConditionExprLeftAction_1_0_0_0; }

		//op="and"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"and"
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=AtomicConditionExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AtomicConditionExpr
		public RuleCall getRightAtomicConditionExprParserRuleCall_1_1_0() { return cRightAtomicConditionExprParserRuleCall_1_1_0; }
	}

	public class AtomicConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicConditionExpr");
		private final Assignment cCatAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cCatVerificationCategoryCrossReference_0 = (CrossReference)cCatAssignment.eContents().get(0);
		private final RuleCall cCatVerificationCategoryCatRefParserRuleCall_0_1 = (RuleCall)cCatVerificationCategoryCrossReference_0.eContents().get(1);
		
		//AtomicConditionExpr:
		//	cat=[categories::VerificationCategory|CatRef];
		public ParserRule getRule() { return rule; }

		//cat=[categories::VerificationCategory|CatRef]
		public Assignment getCatAssignment() { return cCatAssignment; }

		//[categories::VerificationCategory|CatRef]
		public CrossReference getCatVerificationCategoryCrossReference_0() { return cCatVerificationCategoryCrossReference_0; }

		//CatRef
		public RuleCall getCatVerificationCategoryCatRefParserRuleCall_0_1() { return cCatVerificationCategoryCatRefParserRuleCall_0_1; }
	}

	public class VerificationMethodRegistryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationMethodRegistry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegistryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTitleKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTitleAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_3_0_1_0 = (RuleCall)cTitleAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDescriptionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_3_1_1_0 = (RuleCall)cDescriptionAssignment_3_1_1.eContents().get(0);
		private final Assignment cMethodsAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cMethodsVerificationMethodParserRuleCall_3_2_0 = (RuleCall)cMethodsAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// need to distinguish between method with/out predicate
		//// method producing multiple results
		//// Java based methods: all
		//// interface methods to external or built-in
		//VerificationMethodRegistry:
		//	"registry" name=ID "[" (("title" title=ValueString)? & ("description" description=Description)? &
		//	methods+=VerificationMethod*) "]";
		public ParserRule getRule() { return rule; }

		//"registry" name=ID "[" (("title" title=ValueString)? & ("description" description=Description)? &
		//methods+=VerificationMethod*) "]"
		public Group getGroup() { return cGroup; }

		//"registry"
		public Keyword getRegistryKeyword_0() { return cRegistryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//("title" title=ValueString)? & ("description" description=Description)? & methods+=VerificationMethod*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("title" title=ValueString)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"title"
		public Keyword getTitleKeyword_3_0_0() { return cTitleKeyword_3_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_3_0_1() { return cTitleAssignment_3_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_3_0_1_0() { return cTitleValueStringParserRuleCall_3_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"description"
		public Keyword getDescriptionKeyword_3_1_0() { return cDescriptionKeyword_3_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_3_1_1() { return cDescriptionAssignment_3_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_3_1_1_0() { return cDescriptionDescriptionParserRuleCall_3_1_1_0; }

		//methods+=VerificationMethod*
		public Assignment getMethodsAssignment_3_2() { return cMethodsAssignment_3_2; }

		//VerificationMethod
		public RuleCall getMethodsVerificationMethodParserRuleCall_3_2_0() { return cMethodsVerificationMethodParserRuleCall_3_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class VerificationMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodTypeSupportedTypesEnumRuleCall_3_0 = (RuleCall)cMethodTypeAssignment_3.eContents().get(0);
		private final Assignment cMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodQualifiedNameParserRuleCall_4_0 = (RuleCall)cMethodAssignment_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cTitleKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTitleAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTitleValueStringParserRuleCall_5_0_1_0 = (RuleCall)cTitleAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cDescriptionKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_5_1_1_0 = (RuleCall)cDescriptionAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cCategoryKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cCategoryAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cCategoryVerificationCategoryCrossReference_5_2_1_0 = (CrossReference)cCategoryAssignment_5_2_1.eContents().get(0);
		private final RuleCall cCategoryVerificationCategoryCatRefParserRuleCall_5_2_1_0_1 = (RuleCall)cCategoryVerificationCategoryCrossReference_5_2_1_0.eContents().get(1);
		private final Assignment cConditionsAssignment_5_3 = (Assignment)cUnorderedGroup_5.eContents().get(3);
		private final RuleCall cConditionsVerificationConditionParserRuleCall_5_3_0 = (RuleCall)cConditionsAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VerificationMethod:
		//	"method" name=ID "[" methodType=SupportedTypes method=QualifiedName // parameters (in addition to the model element
		//	(("title" title=ValueString)? & ("description" description=Description)? & ("category"
		//	category=[categories::VerificationCategory|CatRef])? & conditions+=VerificationCondition*) "]";
		public ParserRule getRule() { return rule; }

		//"method" name=ID "[" methodType=SupportedTypes method=QualifiedName // parameters (in addition to the model element
		//(("title" title=ValueString)? & ("description" description=Description)? & ("category"
		//category=[categories::VerificationCategory|CatRef])? & conditions+=VerificationCondition*) "]"
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//methodType=SupportedTypes
		public Assignment getMethodTypeAssignment_3() { return cMethodTypeAssignment_3; }

		//SupportedTypes
		public RuleCall getMethodTypeSupportedTypesEnumRuleCall_3_0() { return cMethodTypeSupportedTypesEnumRuleCall_3_0; }

		//method=QualifiedName
		public Assignment getMethodAssignment_4() { return cMethodAssignment_4; }

		//QualifiedName
		public RuleCall getMethodQualifiedNameParserRuleCall_4_0() { return cMethodQualifiedNameParserRuleCall_4_0; }

		//("title" title=ValueString)? & ("description" description=Description)? & ("category"
		//category=[categories::VerificationCategory|CatRef])? & conditions+=VerificationCondition*
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("title" title=ValueString)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"title"
		public Keyword getTitleKeyword_5_0_0() { return cTitleKeyword_5_0_0; }

		//title=ValueString
		public Assignment getTitleAssignment_5_0_1() { return cTitleAssignment_5_0_1; }

		//ValueString
		public RuleCall getTitleValueStringParserRuleCall_5_0_1_0() { return cTitleValueStringParserRuleCall_5_0_1_0; }

		//("description" description=Description)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"description"
		public Keyword getDescriptionKeyword_5_1_0() { return cDescriptionKeyword_5_1_0; }

		//description=Description
		public Assignment getDescriptionAssignment_5_1_1() { return cDescriptionAssignment_5_1_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_5_1_1_0() { return cDescriptionDescriptionParserRuleCall_5_1_1_0; }

		//("category" category=[categories::VerificationCategory|CatRef])?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"category"
		public Keyword getCategoryKeyword_5_2_0() { return cCategoryKeyword_5_2_0; }

		//category=[categories::VerificationCategory|CatRef]
		public Assignment getCategoryAssignment_5_2_1() { return cCategoryAssignment_5_2_1; }

		//[categories::VerificationCategory|CatRef]
		public CrossReference getCategoryVerificationCategoryCrossReference_5_2_1_0() { return cCategoryVerificationCategoryCrossReference_5_2_1_0; }

		//CatRef
		public RuleCall getCategoryVerificationCategoryCatRefParserRuleCall_5_2_1_0_1() { return cCategoryVerificationCategoryCatRefParserRuleCall_5_2_1_0_1; }

		//conditions+=VerificationCondition*
		public Assignment getConditionsAssignment_5_3() { return cConditionsAssignment_5_3; }

		//VerificationCondition
		public RuleCall getConditionsVerificationConditionParserRuleCall_5_3_0() { return cConditionsVerificationConditionParserRuleCall_5_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	
	
	public class SupportedTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSINGLEPREDICATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSINGLEPREDICATESinglepredicateKeyword_0_0 = (Keyword)cSINGLEPREDICATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSINGLEANALYSISEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSINGLEANALYSISSingleanalysisKeyword_1_0 = (Keyword)cSINGLEANALYSISEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPREDICATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPREDICATEMultipredicateKeyword_2_0 = (Keyword)cMULTIPREDICATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIANALYSISEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMULTIANALYSISMultianalysisKeyword_3_0 = (Keyword)cMULTIANALYSISEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SupportedTypes:
		//	SINGLEPREDICATE="singlepredicate" | SINGLEANALYSIS="singleanalysis" | MULTIPREDICATE="multipredicate" |
		//	MULTIANALYSIS="multianalysis";
		public EnumRule getRule() { return rule; }

		//SINGLEPREDICATE="singlepredicate" | SINGLEANALYSIS="singleanalysis" | MULTIPREDICATE="multipredicate" |
		//MULTIANALYSIS="multianalysis"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SINGLEPREDICATE="singlepredicate"
		public EnumLiteralDeclaration getSINGLEPREDICATEEnumLiteralDeclaration_0() { return cSINGLEPREDICATEEnumLiteralDeclaration_0; }

		//"singlepredicate"
		public Keyword getSINGLEPREDICATESinglepredicateKeyword_0_0() { return cSINGLEPREDICATESinglepredicateKeyword_0_0; }

		//SINGLEANALYSIS="singleanalysis"
		public EnumLiteralDeclaration getSINGLEANALYSISEnumLiteralDeclaration_1() { return cSINGLEANALYSISEnumLiteralDeclaration_1; }

		//"singleanalysis"
		public Keyword getSINGLEANALYSISSingleanalysisKeyword_1_0() { return cSINGLEANALYSISSingleanalysisKeyword_1_0; }

		//MULTIPREDICATE="multipredicate"
		public EnumLiteralDeclaration getMULTIPREDICATEEnumLiteralDeclaration_2() { return cMULTIPREDICATEEnumLiteralDeclaration_2; }

		//"multipredicate"
		public Keyword getMULTIPREDICATEMultipredicateKeyword_2_0() { return cMULTIPREDICATEMultipredicateKeyword_2_0; }

		//MULTIANALYSIS="multianalysis"
		public EnumLiteralDeclaration getMULTIANALYSISEnumLiteralDeclaration_3() { return cMULTIANALYSISEnumLiteralDeclaration_3; }

		//"multianalysis"
		public Keyword getMULTIANALYSISMultianalysisKeyword_3_0() { return cMULTIANALYSISMultianalysisKeyword_3_0; }
	}
	
	private final VerificationElements pVerification;
	private final VerificationPlanElements pVerificationPlan;
	private final ClaimElements pClaim;
	private final WeightedClaimElements pWeightedClaim;
	private final VerificationLibraryElements pVerificationLibrary;
	private final VerificationFolderElements pVerificationFolder;
	private final VerificationContainerElements pVerificationContainer;
	private final VerificationActivityElements pVerificationActivity;
	private final VerificationConditionElements pVerificationCondition;
	private final ArgumentExprElements pArgumentExpr;
	private final AllEvidenceExprElements pAllEvidenceExpr;
	private final AndThenEvidenceExprElements pAndThenEvidenceExpr;
	private final FailThenEvidenceExprElements pFailThenEvidenceExpr;
	private final AtomicEvidenceExprElements pAtomicEvidenceExpr;
	private final ConditionalEvidenceElements pConditionalEvidence;
	private final VAReferenceElements pVAReference;
	private final OrConditionExprElements pOrConditionExpr;
	private final AndConditionExprElements pAndConditionExpr;
	private final AtomicConditionExprElements pAtomicConditionExpr;
	private final VerificationMethodRegistryElements pVerificationMethodRegistry;
	private final VerificationMethodElements pVerificationMethod;
	private final SupportedTypesElements unknownRuleSupportedTypes;
	
	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	@Inject
	public VerifyGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pVerification = new VerificationElements();
		this.pVerificationPlan = new VerificationPlanElements();
		this.pClaim = new ClaimElements();
		this.pWeightedClaim = new WeightedClaimElements();
		this.pVerificationLibrary = new VerificationLibraryElements();
		this.pVerificationFolder = new VerificationFolderElements();
		this.pVerificationContainer = new VerificationContainerElements();
		this.pVerificationActivity = new VerificationActivityElements();
		this.pVerificationCondition = new VerificationConditionElements();
		this.pArgumentExpr = new ArgumentExprElements();
		this.pAllEvidenceExpr = new AllEvidenceExprElements();
		this.pAndThenEvidenceExpr = new AndThenEvidenceExprElements();
		this.pFailThenEvidenceExpr = new FailThenEvidenceExprElements();
		this.pAtomicEvidenceExpr = new AtomicEvidenceExprElements();
		this.pConditionalEvidence = new ConditionalEvidenceElements();
		this.pVAReference = new VAReferenceElements();
		this.pOrConditionExpr = new OrConditionExprElements();
		this.pAndConditionExpr = new AndConditionExprElements();
		this.pAtomicConditionExpr = new AtomicConditionExprElements();
		this.pVerificationMethodRegistry = new VerificationMethodRegistryElements();
		this.pVerificationMethod = new VerificationMethodElements();
		this.unknownRuleSupportedTypes = new SupportedTypesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.verify.Verify".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	//Verification:
	//	contents+=(VerificationLibrary | VerificationPlan | VerificationMethodRegistry);
	public VerificationElements getVerificationAccess() {
		return pVerification;
	}
	
	public ParserRule getVerificationRule() {
		return getVerificationAccess().getRule();
	}

	//// plan for a classifier. Will add import to allow for non-qualified requirement references
	//// Also allows for cross checking that we have covered requirements with claims
	//VerificationPlan:
	//	"plan" name=ID "for" target= //      [ReqSpec::SystemSpec|QualifiedName]
	//	[aadl2::ComponentClassifier|AadlClassifierReference] "[" (("title" title=ValueString)? & ("description"
	//	description=Description)? & claim+=Claim* & weightedClaim+=WeightedClaim? & ("rationale" rationale=STRING)?) "]";
	public VerificationPlanElements getVerificationPlanAccess() {
		return pVerificationPlan;
	}
	
	public ParserRule getVerificationPlanRule() {
		return getVerificationPlanAccess().getRule();
	}

	//Claim:
	//	"claim" name=ID "for" requirement=[ReqSpec::Requirement|QualifiedName] "[" ("assert" assert=ArgumentExpr &
	//	("rationale" rationale=STRING)? & subclaim+=Claim*) "]";
	public ClaimElements getClaimAccess() {
		return pClaim;
	}
	
	public ParserRule getClaimRule() {
		return getClaimAccess().getRule();
	}

	//WeightedClaim:
	//	"weights" claim=[Claim|QualifiedName] ("(" weight=INT ")")?;
	public WeightedClaimElements getWeightedClaimAccess() {
		return pWeightedClaim;
	}
	
	public ParserRule getWeightedClaimRule() {
		return getWeightedClaimAccess().getRule();
	}

	//VerificationLibrary:
	//	"library" name=ID ("for" target=[aadl2::ComponentClassifier|AadlClassifierReference])? "[" (("title"
	//	title=ValueString)? & ("description" description=Description)? & content+=(VerificationActivity |
	//	VerificationFolder)*) "]";
	public VerificationLibraryElements getVerificationLibraryAccess() {
		return pVerificationLibrary;
	}
	
	public ParserRule getVerificationLibraryRule() {
		return getVerificationLibraryAccess().getRule();
	}

	//VerificationFolder:
	//	"folder" label=ID "[" content+=(VerificationActivity | VerificationFolder)* "]";
	public VerificationFolderElements getVerificationFolderAccess() {
		return pVerificationFolder;
	}
	
	public ParserRule getVerificationFolderRule() {
		return getVerificationFolderAccess().getRule();
	}

	//VerificationContainer:
	//	VerificationLibrary | VerificationFolder;
	public VerificationContainerElements getVerificationContainerAccess() {
		return pVerificationContainer;
	}
	
	public ParserRule getVerificationContainerRule() {
		return getVerificationContainerAccess().getRule();
	}

	//VerificationActivity:
	//	"activity" name=ID "for" requirement=[ReqSpec::Requirement|QualifiedName]? // or should it be the requirement, which provides the predicate
	//	"[" (("title" title=ValueString)? //	('parameters'  verificationParameters+=([ElementReference])*)? 
	//	// these are data parameters to the method in addition to what comes with the model
	//	// and via the requirement (predicate/limit values
	//	& ("description" description=Description)? & ("category" category+=[categories::SelectionCategory|CatRef]+)? &
	//	("method" method=[VerificationMethod|QualifiedName])? & ("timeout" timeout=INT)? & ("rationale" rationale=STRING)?)
	//	"]";
	public VerificationActivityElements getVerificationActivityAccess() {
		return pVerificationActivity;
	}
	
	public ParserRule getVerificationActivityRule() {
		return getVerificationActivityAccess().getRule();
	}

	//VerificationCondition:
	//	("assumption" {VerificationAssumption} | "precondition" {VerificationPrecondition}) name=ID "[" (("title"
	//	title=ValueString)? & ("description" description=Description)? & ("assert" assert=ArgumentExpr)? & ("rationale"
	//	rationale=STRING)?) "]";
	public VerificationConditionElements getVerificationConditionAccess() {
		return pVerificationCondition;
	}
	
	public ParserRule getVerificationConditionRule() {
		return getVerificationConditionAccess().getRule();
	}

	//ArgumentExpr:
	//	AllEvidenceExpr;
	public ArgumentExprElements getArgumentExprAccess() {
		return pArgumentExpr;
	}
	
	public ParserRule getArgumentExprRule() {
		return getArgumentExprAccess().getRule();
	}

	//AllEvidenceExpr returns ArgumentExpr:
	//	"all" {AllExpr} "[" all+=AndThenEvidenceExpr ("," all+=AndThenEvidenceExpr)* "]";
	public AllEvidenceExprElements getAllEvidenceExprAccess() {
		return pAllEvidenceExpr;
	}
	
	public ParserRule getAllEvidenceExprRule() {
		return getAllEvidenceExprAccess().getRule();
	}

	//AndThenEvidenceExpr returns ArgumentExpr:
	//	FailThenEvidenceExpr (=> ({AndThenExpr.left=current} op="andthen") right=AndThenEvidenceExpr)*;
	public AndThenEvidenceExprElements getAndThenEvidenceExprAccess() {
		return pAndThenEvidenceExpr;
	}
	
	public ParserRule getAndThenEvidenceExprRule() {
		return getAndThenEvidenceExprAccess().getRule();
	}

	//// Execute as alternative if the first one fails.
	//// The results of both are reported
	//FailThenEvidenceExpr returns ArgumentExpr:
	//	AtomicEvidenceExpr (=> ({FailThenExpr.left=current} op="failthen") right=FailThenEvidenceExpr)*;
	public FailThenEvidenceExprElements getFailThenEvidenceExprAccess() {
		return pFailThenEvidenceExpr;
	}
	
	public ParserRule getFailThenEvidenceExprRule() {
		return getFailThenEvidenceExprAccess().getRule();
	}

	//AtomicEvidenceExpr returns ArgumentExpr:
	//	ConditionalEvidence | "(" AndThenEvidenceExpr ")" | AllEvidenceExpr;
	public AtomicEvidenceExprElements getAtomicEvidenceExprAccess() {
		return pAtomicEvidenceExpr;
	}
	
	public ParserRule getAtomicEvidenceExprRule() {
		return getAtomicEvidenceExprAccess().getRule();
	}

	//ConditionalEvidence returns ArgumentExpr:
	//	VAReference (=> ({ConditionalExpr.verification=current} op="when") condition=OrConditionExpr)?;
	public ConditionalEvidenceElements getConditionalEvidenceAccess() {
		return pConditionalEvidence;
	}
	
	public ParserRule getConditionalEvidenceRule() {
		return getConditionalEvidenceAccess().getRule();
	}

	//VAReference returns ArgumentExpr:
	//	{RefExpr} verification=[VerificationActivity|QualifiedName] ("(" weight=INT ")")?;
	public VAReferenceElements getVAReferenceAccess() {
		return pVAReference;
	}
	
	public ParserRule getVAReferenceRule() {
		return getVAReferenceAccess().getRule();
	}

	//OrConditionExpr returns ConditionExpr:
	//	AndConditionExpr (=> ({ConditionExpr.left=current} op="or") right=AndConditionExpr)*;
	public OrConditionExprElements getOrConditionExprAccess() {
		return pOrConditionExpr;
	}
	
	public ParserRule getOrConditionExprRule() {
		return getOrConditionExprAccess().getRule();
	}

	//AndConditionExpr returns ConditionExpr:
	//	AtomicConditionExpr (=> ({ConditionExpr.left=current} op="and") right=AtomicConditionExpr)*;
	public AndConditionExprElements getAndConditionExprAccess() {
		return pAndConditionExpr;
	}
	
	public ParserRule getAndConditionExprRule() {
		return getAndConditionExprAccess().getRule();
	}

	//AtomicConditionExpr:
	//	cat=[categories::VerificationCategory|CatRef];
	public AtomicConditionExprElements getAtomicConditionExprAccess() {
		return pAtomicConditionExpr;
	}
	
	public ParserRule getAtomicConditionExprRule() {
		return getAtomicConditionExprAccess().getRule();
	}

	//// need to distinguish between method with/out predicate
	//// method producing multiple results
	//// Java based methods: all
	//// interface methods to external or built-in
	//VerificationMethodRegistry:
	//	"registry" name=ID "[" (("title" title=ValueString)? & ("description" description=Description)? &
	//	methods+=VerificationMethod*) "]";
	public VerificationMethodRegistryElements getVerificationMethodRegistryAccess() {
		return pVerificationMethodRegistry;
	}
	
	public ParserRule getVerificationMethodRegistryRule() {
		return getVerificationMethodRegistryAccess().getRule();
	}

	//VerificationMethod:
	//	"method" name=ID "[" methodType=SupportedTypes method=QualifiedName // parameters (in addition to the model element
	//	(("title" title=ValueString)? & ("description" description=Description)? & ("category"
	//	category=[categories::VerificationCategory|CatRef])? & conditions+=VerificationCondition*) "]";
	public VerificationMethodElements getVerificationMethodAccess() {
		return pVerificationMethod;
	}
	
	public ParserRule getVerificationMethodRule() {
		return getVerificationMethodAccess().getRule();
	}

	//enum SupportedTypes:
	//	SINGLEPREDICATE="singlepredicate" | SINGLEANALYSIS="singleanalysis" | MULTIPREDICATE="multipredicate" |
	//	MULTIANALYSIS="multianalysis";
	public SupportedTypesElements getSupportedTypesAccess() {
		return unknownRuleSupportedTypes;
	}
	
	public EnumRule getSupportedTypesRule() {
		return getSupportedTypesAccess().getRule();
	}

	//Model:
	//	content=Description;
	public CommonGrammarAccess.ModelElements getModelAccess() {
		return gaCommon.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Description:
	//	description+=DescriptionElement+;
	public CommonGrammarAccess.DescriptionElements getDescriptionAccess() {
		return gaCommon.getDescriptionAccess();
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//DescriptionElement:
	//	text=STRING | ref=[ecore::EObject];
	public CommonGrammarAccess.DescriptionElementElements getDescriptionElementAccess() {
		return gaCommon.getDescriptionElementAccess();
	}
	
	public ParserRule getDescriptionElementRule() {
		return getDescriptionElementAccess().getRule();
	}

	//ReferencePath:
	//	ref=[ecore::EObject] ("." subpath=ReferencePath);
	public CommonGrammarAccess.ReferencePathElements getReferencePathAccess() {
		return gaCommon.getReferencePathAccess();
	}
	
	public ParserRule getReferencePathRule() {
		return getReferencePathAccess().getRule();
	}

	//// Dummy placeholder for comparison conditions
	//PredicateExpression:
	//	ID op=("=" | "!=" | "<" | "=<" | ">" | ">=") ID;
	public CommonGrammarAccess.PredicateExpressionElements getPredicateExpressionAccess() {
		return gaCommon.getPredicateExpressionAccess();
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//FinalValue:
	//	name=ID "=" value=ValueString;
	public CommonGrammarAccess.FinalValueElements getFinalValueAccess() {
		return gaCommon.getFinalValueAccess();
	}
	
	public ParserRule getFinalValueRule() {
		return getFinalValueAccess().getRule();
	}

	//ValueString: // remove quotes from string in ValueConverter 
	//	STRING;
	public CommonGrammarAccess.ValueStringElements getValueStringAccess() {
		return gaCommon.getValueStringAccess();
	}
	
	public ParserRule getValueStringRule() {
		return getValueStringAccess().getRule();
	}

	//// Qualified classifier reference
	//AadlClassifierReference:
	//	(ID "::")* ID ("." ID)?;
	public CommonGrammarAccess.AadlClassifierReferenceElements getAadlClassifierReferenceAccess() {
		return gaCommon.getAadlClassifierReferenceAccess();
	}
	
	public ParserRule getAadlClassifierReferenceRule() {
		return getAadlClassifierReferenceAccess().getRule();
	}

	//// Category reference. Currently it is only a single ID
	//CatRef: //('.' ID)?
	//	ID;
	public CommonGrammarAccess.CatRefElements getCatRefAccess() {
		return gaCommon.getCatRefAccess();
	}
	
	public ParserRule getCatRefRule() {
		return getCatRefAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public CommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//URIID:
	//	STRING;
	public CommonGrammarAccess.URIIDElements getURIIDAccess() {
		return gaCommon.getURIIDAccess();
	}
	
	public ParserRule getURIIDRule() {
		return getURIIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommon.getANY_OTHERRule();
	} 
}
