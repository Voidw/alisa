/*
 * generated by Xtext
 */
package org.osate.verify.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.alisa.common.services.CommonGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class VerifyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VerificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verification");
		private final Assignment cContentsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cContentsAlternatives_0 = (Alternatives)cContentsAssignment.eContents().get(0);
		private final RuleCall cContentsVerificationPlanParserRuleCall_0_0 = (RuleCall)cContentsAlternatives_0.eContents().get(0);
		private final RuleCall cContentsVerificationMethodRegistryParserRuleCall_0_1 = (RuleCall)cContentsAlternatives_0.eContents().get(1);
		
		//Verification:
		//	contents+=(VerificationPlan | VerificationMethodRegistry);
		@Override public ParserRule getRule() { return rule; }

		//contents+=(VerificationPlan | VerificationMethodRegistry)
		public Assignment getContentsAssignment() { return cContentsAssignment; }

		//VerificationPlan | VerificationMethodRegistry
		public Alternatives getContentsAlternatives_0() { return cContentsAlternatives_0; }

		//VerificationPlan
		public RuleCall getContentsVerificationPlanParserRuleCall_0_0() { return cContentsVerificationPlanParserRuleCall_0_0; }

		//VerificationMethodRegistry
		public RuleCall getContentsVerificationMethodRegistryParserRuleCall_0_1() { return cContentsVerificationMethodRegistryParserRuleCall_0_1; }
	}

	public class VerificationPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPlanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetComponentClassifierCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetComponentClassifierAADLCLASSIFIERREFERENCEParserRuleCall_5_0_1 = (RuleCall)cTargetComponentClassifierCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_7_0 = (Assignment)cUnorderedGroup_7.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_7_0_0 = (RuleCall)cDescriptionAssignment_7_0.eContents().get(0);
		private final Assignment cClaimAssignment_7_1 = (Assignment)cUnorderedGroup_7.eContents().get(1);
		private final RuleCall cClaimClaimParserRuleCall_7_1_0 = (RuleCall)cClaimAssignment_7_1.eContents().get(0);
		private final Assignment cRationaleAssignment_7_2 = (Assignment)cUnorderedGroup_7.eContents().get(2);
		private final RuleCall cRationaleRationaleParserRuleCall_7_2_0 = (RuleCall)cRationaleAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cUnorderedGroup_7.eContents().get(3);
		private final Keyword cAssumeKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cVerifiedAssumptionAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final CrossReference cVerifiedAssumptionVerificationPlanCrossReference_7_3_1_0 = (CrossReference)cVerifiedAssumptionAssignment_7_3_1.eContents().get(0);
		private final RuleCall cVerifiedAssumptionVerificationPlanQualifiedNameParserRuleCall_7_3_1_0_1 = (RuleCall)cVerifiedAssumptionVerificationPlanCrossReference_7_3_1_0.eContents().get(1);
		private final Group cGroup_7_4 = (Group)cUnorderedGroup_7.eContents().get(4);
		private final Keyword cIssuesKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cIssuesAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cIssuesSTRINGTerminalRuleCall_7_4_1_0 = (RuleCall)cIssuesAssignment_7_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// plan for a classifier. Will add import to allow for non-qualified requirement references 
		//// Also allows for cross checking that we have covered requirements with claims
		//VerificationPlan:
		//	"verification" "plan" name=ID (":" title=STRING)? "for" target= //      [ReqSpec::SystemSpec|QualifiedName]
		//	[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] "[" (description=Description? & claim+=Claim* &
		//	rationale=Rationale? & ("assume" verifiedAssumption+=[VerificationPlan|QualifiedName]+)? & ("issues"
		//	issues+=STRING+)?) "]";
		@Override public ParserRule getRule() { return rule; }

		//"verification" "plan" name=ID (":" title=STRING)? "for" target= //      [ReqSpec::SystemSpec|QualifiedName]
		//[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] "[" (description=Description? & claim+=Claim* &
		//rationale=Rationale? & ("assume" verifiedAssumption+=[VerificationPlan|QualifiedName]+)? & ("issues" issues+=STRING+)?)
		//"]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"plan"
		public Keyword getPlanKeyword_1() { return cPlanKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" title=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }

		//"for"
		public Keyword getForKeyword_4() { return cForKeyword_4; }

		//target= //      [ReqSpec::SystemSpec|QualifiedName]
		//[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		////      [ReqSpec::SystemSpec|QualifiedName]
		//[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE]
		public CrossReference getTargetComponentClassifierCrossReference_5_0() { return cTargetComponentClassifierCrossReference_5_0; }

		//AADLCLASSIFIERREFERENCE
		public RuleCall getTargetComponentClassifierAADLCLASSIFIERREFERENCEParserRuleCall_5_0_1() { return cTargetComponentClassifierAADLCLASSIFIERREFERENCEParserRuleCall_5_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//description=Description? & claim+=Claim* & rationale=Rationale? & ("assume"
		//verifiedAssumption+=[VerificationPlan|QualifiedName]+)? & ("issues" issues+=STRING+)?
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }

		//description=Description?
		public Assignment getDescriptionAssignment_7_0() { return cDescriptionAssignment_7_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_7_0_0() { return cDescriptionDescriptionParserRuleCall_7_0_0; }

		//claim+=Claim*
		public Assignment getClaimAssignment_7_1() { return cClaimAssignment_7_1; }

		//Claim
		public RuleCall getClaimClaimParserRuleCall_7_1_0() { return cClaimClaimParserRuleCall_7_1_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_7_2() { return cRationaleAssignment_7_2; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_7_2_0() { return cRationaleRationaleParserRuleCall_7_2_0; }

		//("assume" verifiedAssumption+=[VerificationPlan|QualifiedName]+)?
		public Group getGroup_7_3() { return cGroup_7_3; }

		//"assume"
		public Keyword getAssumeKeyword_7_3_0() { return cAssumeKeyword_7_3_0; }

		//verifiedAssumption+=[VerificationPlan|QualifiedName]+
		public Assignment getVerifiedAssumptionAssignment_7_3_1() { return cVerifiedAssumptionAssignment_7_3_1; }

		//[VerificationPlan|QualifiedName]
		public CrossReference getVerifiedAssumptionVerificationPlanCrossReference_7_3_1_0() { return cVerifiedAssumptionVerificationPlanCrossReference_7_3_1_0; }

		//QualifiedName
		public RuleCall getVerifiedAssumptionVerificationPlanQualifiedNameParserRuleCall_7_3_1_0_1() { return cVerifiedAssumptionVerificationPlanQualifiedNameParserRuleCall_7_3_1_0_1; }

		//("issues" issues+=STRING+)?
		public Group getGroup_7_4() { return cGroup_7_4; }

		//"issues"
		public Keyword getIssuesKeyword_7_4_0() { return cIssuesKeyword_7_4_0; }

		//issues+=STRING+
		public Assignment getIssuesAssignment_7_4_1() { return cIssuesAssignment_7_4_1; }

		//STRING
		public RuleCall getIssuesSTRINGTerminalRuleCall_7_4_1_0() { return cIssuesSTRINGTerminalRuleCall_7_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class ClaimElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Claim");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequirementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequirementRequirementCrossReference_1_0 = (CrossReference)cRequirementAssignment_1.eContents().get(0);
		private final RuleCall cRequirementRequirementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRequirementRequirementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWeightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWeightNumberParserRuleCall_3_1_0 = (RuleCall)cWeightAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cActivitiesKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cActivitiesAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cActivitiesVerificationActivityParserRuleCall_5_0_1_0 = (RuleCall)cActivitiesAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cAssertKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cAssertAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cAssertArgumentExprParserRuleCall_5_1_1_0 = (RuleCall)cAssertAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cArgumentKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cArgumentAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cArgumentSTRINGTerminalRuleCall_5_2_1_0 = (RuleCall)cArgumentAssignment_5_2_1.eContents().get(0);
		private final Assignment cRationaleAssignment_5_3 = (Assignment)cUnorderedGroup_5.eContents().get(3);
		private final RuleCall cRationaleRationaleParserRuleCall_5_3_0 = (RuleCall)cRationaleAssignment_5_3.eContents().get(0);
		private final Assignment cSubclaimAssignment_5_4 = (Assignment)cUnorderedGroup_5.eContents().get(4);
		private final RuleCall cSubclaimClaimParserRuleCall_5_4_0 = (RuleCall)cSubclaimAssignment_5_4.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cUnorderedGroup_5.eContents().get(5);
		private final Keyword cIssuesKeyword_5_5_0 = (Keyword)cGroup_5_5.eContents().get(0);
		private final Assignment cIssuesAssignment_5_5_1 = (Assignment)cGroup_5_5.eContents().get(1);
		private final RuleCall cIssuesSTRINGTerminalRuleCall_5_5_1_0 = (RuleCall)cIssuesAssignment_5_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Claim:
		//	"claim" requirement=[ReqSpec::Requirement|QualifiedName] (":" title=STRING)? ("(" weight=Number ")")? "["
		//	("activities" activities+=VerificationActivity+ //( argumentUncertainty=Uncertainty)? )?
		//	& "assert" assert=ArgumentExpr & ("argument" argument=STRING)? & rationale=Rationale? & subclaim+=Claim* & ("issues"
		//	issues+=STRING+)?) "]";
		@Override public ParserRule getRule() { return rule; }

		//"claim" requirement=[ReqSpec::Requirement|QualifiedName] (":" title=STRING)? ("(" weight=Number ")")? "[" ("activities"
		//activities+=VerificationActivity+ //( argumentUncertainty=Uncertainty)? )?
		//& "assert" assert=ArgumentExpr & ("argument" argument=STRING)? & rationale=Rationale? & subclaim+=Claim* & ("issues"
		//issues+=STRING+)?) "]"
		public Group getGroup() { return cGroup; }

		//"claim"
		public Keyword getClaimKeyword_0() { return cClaimKeyword_0; }

		//requirement=[ReqSpec::Requirement|QualifiedName]
		public Assignment getRequirementAssignment_1() { return cRequirementAssignment_1; }

		//[ReqSpec::Requirement|QualifiedName]
		public CrossReference getRequirementRequirementCrossReference_1_0() { return cRequirementRequirementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRequirementRequirementQualifiedNameParserRuleCall_1_0_1() { return cRequirementRequirementQualifiedNameParserRuleCall_1_0_1; }

		//(":" title=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//("(" weight=Number ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//weight=Number
		public Assignment getWeightAssignment_3_1() { return cWeightAssignment_3_1; }

		//Number
		public RuleCall getWeightNumberParserRuleCall_3_1_0() { return cWeightNumberParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//"activities" activities+=VerificationActivity+ //( argumentUncertainty=Uncertainty)? )?
		//& "assert" assert=ArgumentExpr & ("argument" argument=STRING)? & rationale=Rationale? & subclaim+=Claim* & ("issues"
		//issues+=STRING+)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//"activities" activities+=VerificationActivity+
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"activities"
		public Keyword getActivitiesKeyword_5_0_0() { return cActivitiesKeyword_5_0_0; }

		//activities+=VerificationActivity+
		public Assignment getActivitiesAssignment_5_0_1() { return cActivitiesAssignment_5_0_1; }

		//VerificationActivity
		public RuleCall getActivitiesVerificationActivityParserRuleCall_5_0_1_0() { return cActivitiesVerificationActivityParserRuleCall_5_0_1_0; }

		//"assert" assert=ArgumentExpr
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"assert"
		public Keyword getAssertKeyword_5_1_0() { return cAssertKeyword_5_1_0; }

		//assert=ArgumentExpr
		public Assignment getAssertAssignment_5_1_1() { return cAssertAssignment_5_1_1; }

		//ArgumentExpr
		public RuleCall getAssertArgumentExprParserRuleCall_5_1_1_0() { return cAssertArgumentExprParserRuleCall_5_1_1_0; }

		//("argument" argument=STRING)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"argument"
		public Keyword getArgumentKeyword_5_2_0() { return cArgumentKeyword_5_2_0; }

		//argument=STRING
		public Assignment getArgumentAssignment_5_2_1() { return cArgumentAssignment_5_2_1; }

		//STRING
		public RuleCall getArgumentSTRINGTerminalRuleCall_5_2_1_0() { return cArgumentSTRINGTerminalRuleCall_5_2_1_0; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_5_3() { return cRationaleAssignment_5_3; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_5_3_0() { return cRationaleRationaleParserRuleCall_5_3_0; }

		//subclaim+=Claim*
		public Assignment getSubclaimAssignment_5_4() { return cSubclaimAssignment_5_4; }

		//Claim
		public RuleCall getSubclaimClaimParserRuleCall_5_4_0() { return cSubclaimClaimParserRuleCall_5_4_0; }

		//("issues" issues+=STRING+)?
		public Group getGroup_5_5() { return cGroup_5_5; }

		//"issues"
		public Keyword getIssuesKeyword_5_5_0() { return cIssuesKeyword_5_5_0; }

		//issues+=STRING+
		public Assignment getIssuesAssignment_5_5_1() { return cIssuesAssignment_5_5_1; }

		//STRING
		public RuleCall getIssuesSTRINGTerminalRuleCall_5_5_1_0() { return cIssuesSTRINGTerminalRuleCall_5_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class VerificationActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cMethodVerificationMethodCrossReference_2_0_0 = (CrossReference)cMethodAssignment_2_0.eContents().get(0);
		private final RuleCall cMethodVerificationMethodQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cMethodVerificationMethodCrossReference_2_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cParametersAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final CrossReference cParametersXExpressionCrossReference_2_2_0_0 = (CrossReference)cParametersAssignment_2_2_0.eContents().get(0);
		private final RuleCall cParametersXExpressionIDTerminalRuleCall_2_2_0_0_1 = (RuleCall)cParametersXExpressionCrossReference_2_2_0_0.eContents().get(1);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final CrossReference cParametersXExpressionCrossReference_2_2_1_1_0 = (CrossReference)cParametersAssignment_2_2_1_1.eContents().get(0);
		private final RuleCall cParametersXExpressionIDTerminalRuleCall_2_2_1_1_0_1 = (RuleCall)cParametersXExpressionCrossReference_2_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cTimeoutKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cTimeoutAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cTimeoutINTTerminalRuleCall_2_4_1_0 = (RuleCall)cTimeoutAssignment_2_4_1.eContents().get(0);
		
		////
		////VerificationLibrary returns VerificationLibrary:
		////	'library' name=ID (':' title=STRING)?
		////	('for' target=[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE])?
		////	'['
		////	( ( description=Description)?
		////	&(content+=(VerificationActivity |  VerificationFolder))*
		////	)
		////	']';
		////VerificationActivityParameter:
		////	ComputeDeclaration | XValDeclaration
		////;
		//VerificationActivity:
		//	name=ID ":" (method=[VerificationMethod|QualifiedName] "(" (parameters+=[xbase::XExpression] (","
		//	parameters+=[xbase::XExpression])*)? ")" ("timeout" timeout=INT)?) //	('parameters'  verificationParameters+=([ElementReference])*)? 
		//	// these are data parameters to the method in addition to what comes with the model
		//;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" (method=[VerificationMethod|QualifiedName] "(" (parameters+=[xbase::XExpression] (","
		//parameters+=[xbase::XExpression])*)? ")" ("timeout" timeout=INT)?) //	('parameters'  verificationParameters+=([ElementReference])*)? 
		//// these are data parameters to the method in addition to what comes with the model
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//method=[VerificationMethod|QualifiedName] "(" (parameters+=[xbase::XExpression] (","
		//parameters+=[xbase::XExpression])*)? ")" ("timeout" timeout=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//method=[VerificationMethod|QualifiedName]
		public Assignment getMethodAssignment_2_0() { return cMethodAssignment_2_0; }

		//[VerificationMethod|QualifiedName]
		public CrossReference getMethodVerificationMethodCrossReference_2_0_0() { return cMethodVerificationMethodCrossReference_2_0_0; }

		//QualifiedName
		public RuleCall getMethodVerificationMethodQualifiedNameParserRuleCall_2_0_0_1() { return cMethodVerificationMethodQualifiedNameParserRuleCall_2_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//(parameters+=[xbase::XExpression] ("," parameters+=[xbase::XExpression])*)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//parameters+=[xbase::XExpression]
		public Assignment getParametersAssignment_2_2_0() { return cParametersAssignment_2_2_0; }

		//[xbase::XExpression]
		public CrossReference getParametersXExpressionCrossReference_2_2_0_0() { return cParametersXExpressionCrossReference_2_2_0_0; }

		//ID
		public RuleCall getParametersXExpressionIDTerminalRuleCall_2_2_0_0_1() { return cParametersXExpressionIDTerminalRuleCall_2_2_0_0_1; }

		//("," parameters+=[xbase::XExpression])*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//","
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }

		//parameters+=[xbase::XExpression]
		public Assignment getParametersAssignment_2_2_1_1() { return cParametersAssignment_2_2_1_1; }

		//[xbase::XExpression]
		public CrossReference getParametersXExpressionCrossReference_2_2_1_1_0() { return cParametersXExpressionCrossReference_2_2_1_1_0; }

		//ID
		public RuleCall getParametersXExpressionIDTerminalRuleCall_2_2_1_1_0_1() { return cParametersXExpressionIDTerminalRuleCall_2_2_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//("timeout" timeout=INT)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"timeout"
		public Keyword getTimeoutKeyword_2_4_0() { return cTimeoutKeyword_2_4_0; }

		//timeout=INT
		public Assignment getTimeoutAssignment_2_4_1() { return cTimeoutAssignment_2_4_1; }

		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_2_4_1_0() { return cTimeoutINTTerminalRuleCall_2_4_1_0; }
	}

	public class VerificationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cValidationKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Action cVerificationValidationAction_0_0_1 = (Action)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cPreconditionKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cVerificationPreconditionAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTitleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTitleAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_4_0_0 = (RuleCall)cDescriptionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cMethodKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cMethodAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cMethodVerificationMethodCrossReference_4_1_1_0 = (CrossReference)cMethodAssignment_4_1_1.eContents().get(0);
		private final RuleCall cMethodVerificationMethodQualifiedNameParserRuleCall_4_1_1_0_1 = (RuleCall)cMethodVerificationMethodCrossReference_4_1_1_0.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cAsKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cComputeVariableAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final CrossReference cComputeVariableComputeDeclarationCrossReference_4_1_2_1_0 = (CrossReference)cComputeVariableAssignment_4_1_2_1.eContents().get(0);
		private final RuleCall cComputeVariableComputeDeclarationIDTerminalRuleCall_4_1_2_1_0_1 = (RuleCall)cComputeVariableComputeDeclarationCrossReference_4_1_2_1_0.eContents().get(1);
		private final Assignment cRationaleAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cRationaleRationaleParserRuleCall_4_2_0 = (RuleCall)cRationaleAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	VMParameter:
		////		{VMParameter} value = [xbase::XVariableDeclaration|ID]
		////	;
		//VerificationCondition:
		//	("validation" {VerificationValidation} | "precondition" {VerificationPrecondition}) name=ID (":" title=STRING)? "["
		//	(description=Description? & ("method" method=[VerificationMethod|QualifiedName] ("as"
		//	computeVariable=[common::ComputeDeclaration])?)? & rationale=Rationale?) "]";
		@Override public ParserRule getRule() { return rule; }

		//("validation" {VerificationValidation} | "precondition" {VerificationPrecondition}) name=ID (":" title=STRING)? "["
		//(description=Description? & ("method" method=[VerificationMethod|QualifiedName] ("as"
		//computeVariable=[common::ComputeDeclaration])?)? & rationale=Rationale?) "]"
		public Group getGroup() { return cGroup; }

		//"validation" {VerificationValidation} | "precondition" {VerificationPrecondition}
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"validation" {VerificationValidation}
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"validation"
		public Keyword getValidationKeyword_0_0_0() { return cValidationKeyword_0_0_0; }

		//{VerificationValidation}
		public Action getVerificationValidationAction_0_0_1() { return cVerificationValidationAction_0_0_1; }

		//"precondition" {VerificationPrecondition}
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"precondition"
		public Keyword getPreconditionKeyword_0_1_0() { return cPreconditionKeyword_0_1_0; }

		//{VerificationPrecondition}
		public Action getVerificationPreconditionAction_0_1_1() { return cVerificationPreconditionAction_0_1_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" title=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//title=STRING
		public Assignment getTitleAssignment_2_1() { return cTitleAssignment_2_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_1_0() { return cTitleSTRINGTerminalRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//description=Description? & ("method" method=[VerificationMethod|QualifiedName] ("as"
		//computeVariable=[common::ComputeDeclaration])?)? & rationale=Rationale?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//description=Description?
		public Assignment getDescriptionAssignment_4_0() { return cDescriptionAssignment_4_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_4_0_0() { return cDescriptionDescriptionParserRuleCall_4_0_0; }

		//("method" method=[VerificationMethod|QualifiedName] ("as" computeVariable=[common::ComputeDeclaration])?)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"method"
		public Keyword getMethodKeyword_4_1_0() { return cMethodKeyword_4_1_0; }

		//method=[VerificationMethod|QualifiedName]
		public Assignment getMethodAssignment_4_1_1() { return cMethodAssignment_4_1_1; }

		//[VerificationMethod|QualifiedName]
		public CrossReference getMethodVerificationMethodCrossReference_4_1_1_0() { return cMethodVerificationMethodCrossReference_4_1_1_0; }

		//QualifiedName
		public RuleCall getMethodVerificationMethodQualifiedNameParserRuleCall_4_1_1_0_1() { return cMethodVerificationMethodQualifiedNameParserRuleCall_4_1_1_0_1; }

		//("as" computeVariable=[common::ComputeDeclaration])?
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//"as"
		public Keyword getAsKeyword_4_1_2_0() { return cAsKeyword_4_1_2_0; }

		//computeVariable=[common::ComputeDeclaration]
		public Assignment getComputeVariableAssignment_4_1_2_1() { return cComputeVariableAssignment_4_1_2_1; }

		//[common::ComputeDeclaration]
		public CrossReference getComputeVariableComputeDeclarationCrossReference_4_1_2_1_0() { return cComputeVariableComputeDeclarationCrossReference_4_1_2_1_0; }

		//ID
		public RuleCall getComputeVariableComputeDeclarationIDTerminalRuleCall_4_1_2_1_0_1() { return cComputeVariableComputeDeclarationIDTerminalRuleCall_4_1_2_1_0_1; }

		//rationale=Rationale?
		public Assignment getRationaleAssignment_4_2() { return cRationaleAssignment_4_2; }

		//Rationale
		public RuleCall getRationaleRationaleParserRuleCall_4_2_0() { return cRationaleRationaleParserRuleCall_4_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class ArgumentExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentExpr");
		private final RuleCall cAllEvidenceExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArgumentExpr:
		//	AllEvidenceExpr;
		@Override public ParserRule getRule() { return rule; }

		//AllEvidenceExpr
		public RuleCall getAllEvidenceExprParserRuleCall() { return cAllEvidenceExprParserRuleCall; }
	}

	public class AllEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllEvidenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAllExprAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllAndThenEvidenceExprParserRuleCall_3_0 = (RuleCall)cAllAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAllAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAllAndThenEvidenceExprParserRuleCall_4_1_0 = (RuleCall)cAllAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AllEvidenceExpr returns ArgumentExpr:
		//	"all" {AllExpr} "[" all+=AndThenEvidenceExpr ("," all+=AndThenEvidenceExpr)* "]";
		@Override public ParserRule getRule() { return rule; }

		//"all" {AllExpr} "[" all+=AndThenEvidenceExpr ("," all+=AndThenEvidenceExpr)* "]"
		public Group getGroup() { return cGroup; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//{AllExpr}
		public Action getAllExprAction_1() { return cAllExprAction_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//all+=AndThenEvidenceExpr
		public Assignment getAllAssignment_3() { return cAllAssignment_3; }

		//AndThenEvidenceExpr
		public RuleCall getAllAndThenEvidenceExprParserRuleCall_3_0() { return cAllAndThenEvidenceExprParserRuleCall_3_0; }

		//("," all+=AndThenEvidenceExpr)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//all+=AndThenEvidenceExpr
		public Assignment getAllAssignment_4_1() { return cAllAssignment_4_1; }

		//AndThenEvidenceExpr
		public RuleCall getAllAndThenEvidenceExprParserRuleCall_4_1_0() { return cAllAndThenEvidenceExprParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class AndThenEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndThenEvidenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFailThenEvidenceExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAndThenExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAndthenKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndThenEvidenceExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndThenEvidenceExpr returns ArgumentExpr:
		//	FailThenEvidenceExpr (=> ({AndThenExpr.left=current} "andthen") right=AndThenEvidenceExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//FailThenEvidenceExpr (=> ({AndThenExpr.left=current} "andthen") right=AndThenEvidenceExpr)*
		public Group getGroup() { return cGroup; }

		//FailThenEvidenceExpr
		public RuleCall getFailThenEvidenceExprParserRuleCall_0() { return cFailThenEvidenceExprParserRuleCall_0; }

		//(=> ({AndThenExpr.left=current} "andthen") right=AndThenEvidenceExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({AndThenExpr.left=current} "andthen")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AndThenExpr.left=current} "andthen"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{AndThenExpr.left=current}
		public Action getAndThenExprLeftAction_1_0_0_0() { return cAndThenExprLeftAction_1_0_0_0; }

		//"andthen"
		public Keyword getAndthenKeyword_1_0_0_1() { return cAndthenKeyword_1_0_0_1; }

		//right=AndThenEvidenceExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndThenEvidenceExpr
		public RuleCall getRightAndThenEvidenceExprParserRuleCall_1_1_0() { return cRightAndThenEvidenceExprParserRuleCall_1_1_0; }
	}

	public class FailThenEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FailThenEvidenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicEvidenceExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cFailThenExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cFailedAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cFailedFailthenKeyword_1_0_0_1_0_0 = (Keyword)cFailedAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cUnknownAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cUnknownUnknownthenKeyword_1_0_0_1_1_0 = (Keyword)cUnknownAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFailThenEvidenceExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// Execute as alternative if the first one fails.
		//// The results of both are reported
		//FailThenEvidenceExpr returns ArgumentExpr:
		//	AtomicEvidenceExpr (=> ({FailThenExpr.left=current} (failed?="failthen" | unknown?="unknownthen"))
		//	right=FailThenEvidenceExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AtomicEvidenceExpr (=> ({FailThenExpr.left=current} (failed?="failthen" | unknown?="unknownthen"))
		//right=FailThenEvidenceExpr)*
		public Group getGroup() { return cGroup; }

		//AtomicEvidenceExpr
		public RuleCall getAtomicEvidenceExprParserRuleCall_0() { return cAtomicEvidenceExprParserRuleCall_0; }

		//(=> ({FailThenExpr.left=current} (failed?="failthen" | unknown?="unknownthen")) right=FailThenEvidenceExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({FailThenExpr.left=current} (failed?="failthen" | unknown?="unknownthen"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{FailThenExpr.left=current} (failed?="failthen" | unknown?="unknownthen")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{FailThenExpr.left=current}
		public Action getFailThenExprLeftAction_1_0_0_0() { return cFailThenExprLeftAction_1_0_0_0; }

		//failed?="failthen" | unknown?="unknownthen"
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//failed?="failthen"
		public Assignment getFailedAssignment_1_0_0_1_0() { return cFailedAssignment_1_0_0_1_0; }

		//"failthen"
		public Keyword getFailedFailthenKeyword_1_0_0_1_0_0() { return cFailedFailthenKeyword_1_0_0_1_0_0; }

		//unknown?="unknownthen"
		public Assignment getUnknownAssignment_1_0_0_1_1() { return cUnknownAssignment_1_0_0_1_1; }

		//"unknownthen"
		public Keyword getUnknownUnknownthenKeyword_1_0_0_1_1_0() { return cUnknownUnknownthenKeyword_1_0_0_1_1_0; }

		//right=FailThenEvidenceExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//FailThenEvidenceExpr
		public RuleCall getRightFailThenEvidenceExprParserRuleCall_1_1_0() { return cRightFailThenEvidenceExprParserRuleCall_1_1_0; }
	}

	public class AtomicEvidenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicEvidenceExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalEvidenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAndThenEvidenceExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cAllEvidenceExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AtomicEvidenceExpr returns ArgumentExpr:
		//	ConditionalEvidence | "(" AndThenEvidenceExpr ")" | AllEvidenceExpr;
		@Override public ParserRule getRule() { return rule; }

		//ConditionalEvidence | "(" AndThenEvidenceExpr ")" | AllEvidenceExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConditionalEvidence
		public RuleCall getConditionalEvidenceParserRuleCall_0() { return cConditionalEvidenceParserRuleCall_0; }

		//"(" AndThenEvidenceExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//AndThenEvidenceExpr
		public RuleCall getAndThenEvidenceExprParserRuleCall_1_1() { return cAndThenEvidenceExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//AllEvidenceExpr
		public RuleCall getAllEvidenceExprParserRuleCall_2() { return cAllEvidenceExprParserRuleCall_2; }
	}

	public class ConditionalEvidenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalEvidence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVAReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cWhenExprVerificationAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cWhenKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cConditionVerificationCategoryCrossReference_1_1_0 = (CrossReference)cConditionAssignment_1_1.eContents().get(0);
		private final RuleCall cConditionVerificationCategoryIDTerminalRuleCall_1_1_0_1 = (RuleCall)cConditionVerificationCategoryCrossReference_1_1_0.eContents().get(1);
		
		//// should it be a selection category as well
		//ConditionalEvidence returns ArgumentExpr:
		//	VAReference (=> ({WhenExpr.verification=current} "when") condition+=[categories::VerificationCategory]+)?;
		@Override public ParserRule getRule() { return rule; }

		//VAReference (=> ({WhenExpr.verification=current} "when") condition+=[categories::VerificationCategory]+)?
		public Group getGroup() { return cGroup; }

		//VAReference
		public RuleCall getVAReferenceParserRuleCall_0() { return cVAReferenceParserRuleCall_0; }

		//(=> ({WhenExpr.verification=current} "when") condition+=[categories::VerificationCategory]+)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({WhenExpr.verification=current} "when")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{WhenExpr.verification=current} "when"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{WhenExpr.verification=current}
		public Action getWhenExprVerificationAction_1_0_0_0() { return cWhenExprVerificationAction_1_0_0_0; }

		//"when"
		public Keyword getWhenKeyword_1_0_0_1() { return cWhenKeyword_1_0_0_1; }

		//condition+=[categories::VerificationCategory]+
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//[categories::VerificationCategory]
		public CrossReference getConditionVerificationCategoryCrossReference_1_1_0() { return cConditionVerificationCategoryCrossReference_1_1_0; }

		//ID
		public RuleCall getConditionVerificationCategoryIDTerminalRuleCall_1_1_0_1() { return cConditionVerificationCategoryIDTerminalRuleCall_1_1_0_1; }
	}

	public class VAReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVerificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVerificationVerificationActivityCrossReference_1_0 = (CrossReference)cVerificationAssignment_1.eContents().get(0);
		private final RuleCall cVerificationVerificationActivityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cVerificationVerificationActivityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWeightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_2_1_0 = (RuleCall)cWeightAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//VAReference returns ArgumentExpr:
		//	{RefExpr} verification=[VerificationActivity|QualifiedName] ("(" weight=INT ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{RefExpr} verification=[VerificationActivity|QualifiedName] ("(" weight=INT ")")?
		public Group getGroup() { return cGroup; }

		//{RefExpr}
		public Action getRefExprAction_0() { return cRefExprAction_0; }

		//verification=[VerificationActivity|QualifiedName]
		public Assignment getVerificationAssignment_1() { return cVerificationAssignment_1; }

		//[VerificationActivity|QualifiedName]
		public CrossReference getVerificationVerificationActivityCrossReference_1_0() { return cVerificationVerificationActivityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getVerificationVerificationActivityQualifiedNameParserRuleCall_1_0_1() { return cVerificationVerificationActivityQualifiedNameParserRuleCall_1_0_1; }

		//("(" weight=INT ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//weight=INT
		public Assignment getWeightAssignment_2_1() { return cWeightAssignment_2_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_1_0() { return cWeightINTTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class VerificationMethodRegistryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationMethodRegistry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMethodsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDescriptionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDescriptionDescriptionParserRuleCall_5_0_0 = (RuleCall)cDescriptionAssignment_5_0.eContents().get(0);
		private final Assignment cMethodsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMethodsVerificationMethodParserRuleCall_5_1_0 = (RuleCall)cMethodsAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VerificationMethodRegistry:
		//	"verification" "methods" name=ID (":" title=STRING)? "[" (description=Description? methods+=VerificationMethod*) "]";
		@Override public ParserRule getRule() { return rule; }

		//"verification" "methods" name=ID (":" title=STRING)? "[" (description=Description? methods+=VerificationMethod*) "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"methods"
		public Keyword getMethodsKeyword_1() { return cMethodsKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" title=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//description=Description? methods+=VerificationMethod*
		public Group getGroup_5() { return cGroup_5; }

		//description=Description?
		public Assignment getDescriptionAssignment_5_0() { return cDescriptionAssignment_5_0; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_5_0_0() { return cDescriptionDescriptionParserRuleCall_5_0_0; }

		//methods+=VerificationMethod*
		public Assignment getMethodsAssignment_5_1() { return cMethodsAssignment_5_1; }

		//VerificationMethod
		public RuleCall getMethodsVerificationMethodParserRuleCall_5_1_0() { return cMethodsVerificationMethodParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class VerificationMethodParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationMethodParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VerificationMethodParameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VerificationMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Assignment cMethodTypeAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cMethodTypeSupportedTypesEnumRuleCall_5_0_0_0 = (RuleCall)cMethodTypeAssignment_5_0_0.eContents().get(0);
		private final Assignment cScopeAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cScopeSupportedScopesEnumRuleCall_5_0_1_0 = (RuleCall)cScopeAssignment_5_0_1.eContents().get(0);
		private final Assignment cReportingAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cReportingSupportedReportingEnumRuleCall_5_0_2_0 = (RuleCall)cReportingAssignment_5_0_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cUnorderedGroup_5.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cPathKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMethodPathAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMethodPathSTRINGTerminalRuleCall_5_2_1_0 = (RuleCall)cMethodPathAssignment_5_2_1.eContents().get(0);
		private final Assignment cConditionsAssignment_5_3 = (Assignment)cUnorderedGroup_5.eContents().get(3);
		private final RuleCall cConditionsVerificationConditionParserRuleCall_5_3_0 = (RuleCall)cConditionsAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cUnorderedGroup_5.eContents().get(4);
		private final Keyword cCategoryKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cCategoryAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final CrossReference cCategoryVerificationCategoryCrossReference_5_4_1_0 = (CrossReference)cCategoryAssignment_5_4_1.eContents().get(0);
		private final RuleCall cCategoryVerificationCategoryIDTerminalRuleCall_5_4_1_0_1 = (RuleCall)cCategoryVerificationCategoryCrossReference_5_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VerificationMethod:
		//	"method" name=ID ("(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")")? (":"
		//	title=STRING)? "[" (methodType=SupportedTypes scope=SupportedScopes reporting=SupportedReporting? // parameters (in addition to the model element
		//	& description=Description? & ("path" methodPath=STRING)? & conditions+=VerificationCondition* & ("category"
		//	category+=[categories::VerificationCategory]+)?) "]";
		@Override public ParserRule getRule() { return rule; }

		//"method" name=ID ("(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")")? (":" title=STRING)?
		//"[" (methodType=SupportedTypes scope=SupportedScopes reporting=SupportedReporting? // parameters (in addition to the model element
		//& description=Description? & ("path" methodPath=STRING)? & conditions+=VerificationCondition* & ("category"
		//category+=[categories::VerificationCategory]+)?) "]"
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_1_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_1_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_1_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//(":" title=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//methodType=SupportedTypes scope=SupportedScopes reporting=SupportedReporting? // parameters (in addition to the model element
		//& description=Description? & ("path" methodPath=STRING)? & conditions+=VerificationCondition* & ("category"
		//category+=[categories::VerificationCategory]+)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//methodType=SupportedTypes scope=SupportedScopes reporting=SupportedReporting?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//methodType=SupportedTypes
		public Assignment getMethodTypeAssignment_5_0_0() { return cMethodTypeAssignment_5_0_0; }

		//SupportedTypes
		public RuleCall getMethodTypeSupportedTypesEnumRuleCall_5_0_0_0() { return cMethodTypeSupportedTypesEnumRuleCall_5_0_0_0; }

		//scope=SupportedScopes
		public Assignment getScopeAssignment_5_0_1() { return cScopeAssignment_5_0_1; }

		//SupportedScopes
		public RuleCall getScopeSupportedScopesEnumRuleCall_5_0_1_0() { return cScopeSupportedScopesEnumRuleCall_5_0_1_0; }

		//reporting=SupportedReporting?
		public Assignment getReportingAssignment_5_0_2() { return cReportingAssignment_5_0_2; }

		//SupportedReporting
		public RuleCall getReportingSupportedReportingEnumRuleCall_5_0_2_0() { return cReportingSupportedReportingEnumRuleCall_5_0_2_0; }

		//description=Description?
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_5_1_0() { return cDescriptionDescriptionParserRuleCall_5_1_0; }

		//("path" methodPath=STRING)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"path"
		public Keyword getPathKeyword_5_2_0() { return cPathKeyword_5_2_0; }

		//methodPath=STRING
		public Assignment getMethodPathAssignment_5_2_1() { return cMethodPathAssignment_5_2_1; }

		//STRING
		public RuleCall getMethodPathSTRINGTerminalRuleCall_5_2_1_0() { return cMethodPathSTRINGTerminalRuleCall_5_2_1_0; }

		//conditions+=VerificationCondition*
		public Assignment getConditionsAssignment_5_3() { return cConditionsAssignment_5_3; }

		//VerificationCondition
		public RuleCall getConditionsVerificationConditionParserRuleCall_5_3_0() { return cConditionsVerificationConditionParserRuleCall_5_3_0; }

		//("category" category+=[categories::VerificationCategory]+)?
		public Group getGroup_5_4() { return cGroup_5_4; }

		//"category"
		public Keyword getCategoryKeyword_5_4_0() { return cCategoryKeyword_5_4_0; }

		//category+=[categories::VerificationCategory]+
		public Assignment getCategoryAssignment_5_4_1() { return cCategoryAssignment_5_4_1; }

		//[categories::VerificationCategory]
		public CrossReference getCategoryVerificationCategoryCrossReference_5_4_1_0() { return cCategoryVerificationCategoryCrossReference_5_4_1_0; }

		//ID
		public RuleCall getCategoryVerificationCategoryIDTerminalRuleCall_5_4_1_0_1() { return cCategoryVerificationCategoryIDTerminalRuleCall_5_4_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	
	
	public class SupportedTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANALYSISEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANALYSISAnalysisKeyword_0_0 = (Keyword)cANALYSISEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPREDICATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPREDICATEPredicateKeyword_1_0 = (Keyword)cPREDICATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPUTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPUTEComputeKeyword_2_0 = (Keyword)cCOMPUTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRESOLUTEPROVEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRESOLUTEPROVEResoluteproveKeyword_3_0 = (Keyword)cRESOLUTEPROVEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRESOLUTECOMPUTEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRESOLUTECOMPUTEResolutecomputeKeyword_4_0 = (Keyword)cRESOLUTECOMPUTEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRESOLUTEPREDICATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRESOLUTEPREDICATEResolutepredicateKeyword_5_0 = (Keyword)cRESOLUTEPREDICATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMANUALEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMANUALManualKeyword_6_0 = (Keyword)cMANUALEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum SupportedTypes:
		//	ANALYSIS="analysis" | PREDICATE="predicate" | COMPUTE="compute" | RESOLUTEPROVE="resoluteprove" |
		//	RESOLUTECOMPUTE="resolutecompute" | RESOLUTEPREDICATE="resolutepredicate" | MANUAL="manual";
		public EnumRule getRule() { return rule; }

		//ANALYSIS="analysis" | PREDICATE="predicate" | COMPUTE="compute" | RESOLUTEPROVE="resoluteprove" |
		//RESOLUTECOMPUTE="resolutecompute" | RESOLUTEPREDICATE="resolutepredicate" | MANUAL="manual"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANALYSIS="analysis"
		public EnumLiteralDeclaration getANALYSISEnumLiteralDeclaration_0() { return cANALYSISEnumLiteralDeclaration_0; }

		//"analysis"
		public Keyword getANALYSISAnalysisKeyword_0_0() { return cANALYSISAnalysisKeyword_0_0; }

		//PREDICATE="predicate"
		public EnumLiteralDeclaration getPREDICATEEnumLiteralDeclaration_1() { return cPREDICATEEnumLiteralDeclaration_1; }

		//"predicate"
		public Keyword getPREDICATEPredicateKeyword_1_0() { return cPREDICATEPredicateKeyword_1_0; }

		//COMPUTE="compute"
		public EnumLiteralDeclaration getCOMPUTEEnumLiteralDeclaration_2() { return cCOMPUTEEnumLiteralDeclaration_2; }

		//"compute"
		public Keyword getCOMPUTEComputeKeyword_2_0() { return cCOMPUTEComputeKeyword_2_0; }

		//RESOLUTEPROVE="resoluteprove"
		public EnumLiteralDeclaration getRESOLUTEPROVEEnumLiteralDeclaration_3() { return cRESOLUTEPROVEEnumLiteralDeclaration_3; }

		//"resoluteprove"
		public Keyword getRESOLUTEPROVEResoluteproveKeyword_3_0() { return cRESOLUTEPROVEResoluteproveKeyword_3_0; }

		//RESOLUTECOMPUTE="resolutecompute"
		public EnumLiteralDeclaration getRESOLUTECOMPUTEEnumLiteralDeclaration_4() { return cRESOLUTECOMPUTEEnumLiteralDeclaration_4; }

		//"resolutecompute"
		public Keyword getRESOLUTECOMPUTEResolutecomputeKeyword_4_0() { return cRESOLUTECOMPUTEResolutecomputeKeyword_4_0; }

		//RESOLUTEPREDICATE="resolutepredicate"
		public EnumLiteralDeclaration getRESOLUTEPREDICATEEnumLiteralDeclaration_5() { return cRESOLUTEPREDICATEEnumLiteralDeclaration_5; }

		//"resolutepredicate"
		public Keyword getRESOLUTEPREDICATEResolutepredicateKeyword_5_0() { return cRESOLUTEPREDICATEResolutepredicateKeyword_5_0; }

		//MANUAL="manual"
		public EnumLiteralDeclaration getMANUALEnumLiteralDeclaration_6() { return cMANUALEnumLiteralDeclaration_6; }

		//"manual"
		public Keyword getMANUALManualKeyword_6_0() { return cMANUALManualKeyword_6_0; }
	}

	public class SupportedScopesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedScopes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSELFEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSELFSelfKeyword_0_0 = (Keyword)cSELFEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPARTSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPARTSPartsKeyword_1_0 = (Keyword)cPARTSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALLAllKeyword_2_0 = (Keyword)cALLEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SupportedScopes:
		//	SELF="self" | PARTS="parts" | ALL="all";
		public EnumRule getRule() { return rule; }

		//SELF="self" | PARTS="parts" | ALL="all"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SELF="self"
		public EnumLiteralDeclaration getSELFEnumLiteralDeclaration_0() { return cSELFEnumLiteralDeclaration_0; }

		//"self"
		public Keyword getSELFSelfKeyword_0_0() { return cSELFSelfKeyword_0_0; }

		//PARTS="parts"
		public EnumLiteralDeclaration getPARTSEnumLiteralDeclaration_1() { return cPARTSEnumLiteralDeclaration_1; }

		//"parts"
		public Keyword getPARTSPartsKeyword_1_0() { return cPARTSPartsKeyword_1_0; }

		//ALL="all"
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_2() { return cALLEnumLiteralDeclaration_2; }

		//"all"
		public Keyword getALLAllKeyword_2_0() { return cALLAllKeyword_2_0; }
	}

	public class SupportedReportingElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SupportedReporting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMARKEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMARKERMarkerKeyword_0_0 = (Keyword)cMARKEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cERRORMARKEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cERRORMARKERErrormarkerKeyword_1_0 = (Keyword)cERRORMARKEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIAGNOSTICSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIAGNOSTICSDiagnosticsKeyword_2_0 = (Keyword)cDIAGNOSTICSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cASSERTEXCEPTIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cASSERTEXCEPTIONAssertexceptionKeyword_3_0 = (Keyword)cASSERTEXCEPTIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRESULTREPORTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRESULTREPORTResultreportKeyword_4_0 = (Keyword)cRESULTREPORTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SupportedReporting:
		//	MARKER="marker" | ERRORMARKER="errormarker" | DIAGNOSTICS="diagnostics" | ASSERTEXCEPTION="assertexception" |
		//	RESULTREPORT="resultreport";
		public EnumRule getRule() { return rule; }

		//MARKER="marker" | ERRORMARKER="errormarker" | DIAGNOSTICS="diagnostics" | ASSERTEXCEPTION="assertexception" |
		//RESULTREPORT="resultreport"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MARKER="marker"
		public EnumLiteralDeclaration getMARKEREnumLiteralDeclaration_0() { return cMARKEREnumLiteralDeclaration_0; }

		//"marker"
		public Keyword getMARKERMarkerKeyword_0_0() { return cMARKERMarkerKeyword_0_0; }

		//ERRORMARKER="errormarker"
		public EnumLiteralDeclaration getERRORMARKEREnumLiteralDeclaration_1() { return cERRORMARKEREnumLiteralDeclaration_1; }

		//"errormarker"
		public Keyword getERRORMARKERErrormarkerKeyword_1_0() { return cERRORMARKERErrormarkerKeyword_1_0; }

		//DIAGNOSTICS="diagnostics"
		public EnumLiteralDeclaration getDIAGNOSTICSEnumLiteralDeclaration_2() { return cDIAGNOSTICSEnumLiteralDeclaration_2; }

		//"diagnostics"
		public Keyword getDIAGNOSTICSDiagnosticsKeyword_2_0() { return cDIAGNOSTICSDiagnosticsKeyword_2_0; }

		//ASSERTEXCEPTION="assertexception"
		public EnumLiteralDeclaration getASSERTEXCEPTIONEnumLiteralDeclaration_3() { return cASSERTEXCEPTIONEnumLiteralDeclaration_3; }

		//"assertexception"
		public Keyword getASSERTEXCEPTIONAssertexceptionKeyword_3_0() { return cASSERTEXCEPTIONAssertexceptionKeyword_3_0; }

		//RESULTREPORT="resultreport"
		public EnumLiteralDeclaration getRESULTREPORTEnumLiteralDeclaration_4() { return cRESULTREPORTEnumLiteralDeclaration_4; }

		//"resultreport"
		public Keyword getRESULTREPORTResultreportKeyword_4_0() { return cRESULTREPORTResultreportKeyword_4_0; }
	}
	
	private final VerificationElements pVerification;
	private final VerificationPlanElements pVerificationPlan;
	private final ClaimElements pClaim;
	private final VerificationActivityElements pVerificationActivity;
	private final VerificationConditionElements pVerificationCondition;
	private final ArgumentExprElements pArgumentExpr;
	private final AllEvidenceExprElements pAllEvidenceExpr;
	private final AndThenEvidenceExprElements pAndThenEvidenceExpr;
	private final FailThenEvidenceExprElements pFailThenEvidenceExpr;
	private final AtomicEvidenceExprElements pAtomicEvidenceExpr;
	private final ConditionalEvidenceElements pConditionalEvidence;
	private final VAReferenceElements pVAReference;
	private final VerificationMethodRegistryElements pVerificationMethodRegistry;
	private final VerificationMethodParameterElements pVerificationMethodParameter;
	private final VerificationMethodElements pVerificationMethod;
	private final SupportedTypesElements unknownRuleSupportedTypes;
	private final SupportedScopesElements unknownRuleSupportedScopes;
	private final SupportedReportingElements unknownRuleSupportedReporting;
	
	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	@Inject
	public VerifyGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pVerification = new VerificationElements();
		this.pVerificationPlan = new VerificationPlanElements();
		this.pClaim = new ClaimElements();
		this.pVerificationActivity = new VerificationActivityElements();
		this.pVerificationCondition = new VerificationConditionElements();
		this.pArgumentExpr = new ArgumentExprElements();
		this.pAllEvidenceExpr = new AllEvidenceExprElements();
		this.pAndThenEvidenceExpr = new AndThenEvidenceExprElements();
		this.pFailThenEvidenceExpr = new FailThenEvidenceExprElements();
		this.pAtomicEvidenceExpr = new AtomicEvidenceExprElements();
		this.pConditionalEvidence = new ConditionalEvidenceElements();
		this.pVAReference = new VAReferenceElements();
		this.pVerificationMethodRegistry = new VerificationMethodRegistryElements();
		this.pVerificationMethodParameter = new VerificationMethodParameterElements();
		this.pVerificationMethod = new VerificationMethodElements();
		this.unknownRuleSupportedTypes = new SupportedTypesElements();
		this.unknownRuleSupportedScopes = new SupportedScopesElements();
		this.unknownRuleSupportedReporting = new SupportedReportingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.verify.Verify".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	//Verification:
	//	contents+=(VerificationPlan | VerificationMethodRegistry);
	public VerificationElements getVerificationAccess() {
		return pVerification;
	}
	
	public ParserRule getVerificationRule() {
		return getVerificationAccess().getRule();
	}

	//// plan for a classifier. Will add import to allow for non-qualified requirement references 
	//// Also allows for cross checking that we have covered requirements with claims
	//VerificationPlan:
	//	"verification" "plan" name=ID (":" title=STRING)? "for" target= //      [ReqSpec::SystemSpec|QualifiedName]
	//	[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] "[" (description=Description? & claim+=Claim* &
	//	rationale=Rationale? & ("assume" verifiedAssumption+=[VerificationPlan|QualifiedName]+)? & ("issues"
	//	issues+=STRING+)?) "]";
	public VerificationPlanElements getVerificationPlanAccess() {
		return pVerificationPlan;
	}
	
	public ParserRule getVerificationPlanRule() {
		return getVerificationPlanAccess().getRule();
	}

	//Claim:
	//	"claim" requirement=[ReqSpec::Requirement|QualifiedName] (":" title=STRING)? ("(" weight=Number ")")? "["
	//	("activities" activities+=VerificationActivity+ //( argumentUncertainty=Uncertainty)? )?
	//	& "assert" assert=ArgumentExpr & ("argument" argument=STRING)? & rationale=Rationale? & subclaim+=Claim* & ("issues"
	//	issues+=STRING+)?) "]";
	public ClaimElements getClaimAccess() {
		return pClaim;
	}
	
	public ParserRule getClaimRule() {
		return getClaimAccess().getRule();
	}

	////
	////VerificationLibrary returns VerificationLibrary:
	////	'library' name=ID (':' title=STRING)?
	////	('for' target=[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE])?
	////	'['
	////	( ( description=Description)?
	////	&(content+=(VerificationActivity |  VerificationFolder))*
	////	)
	////	']';
	////VerificationActivityParameter:
	////	ComputeDeclaration | XValDeclaration
	////;
	//VerificationActivity:
	//	name=ID ":" (method=[VerificationMethod|QualifiedName] "(" (parameters+=[xbase::XExpression] (","
	//	parameters+=[xbase::XExpression])*)? ")" ("timeout" timeout=INT)?) //	('parameters'  verificationParameters+=([ElementReference])*)? 
	//	// these are data parameters to the method in addition to what comes with the model
	//;
	public VerificationActivityElements getVerificationActivityAccess() {
		return pVerificationActivity;
	}
	
	public ParserRule getVerificationActivityRule() {
		return getVerificationActivityAccess().getRule();
	}

	////	VMParameter:
	////		{VMParameter} value = [xbase::XVariableDeclaration|ID]
	////	;
	//VerificationCondition:
	//	("validation" {VerificationValidation} | "precondition" {VerificationPrecondition}) name=ID (":" title=STRING)? "["
	//	(description=Description? & ("method" method=[VerificationMethod|QualifiedName] ("as"
	//	computeVariable=[common::ComputeDeclaration])?)? & rationale=Rationale?) "]";
	public VerificationConditionElements getVerificationConditionAccess() {
		return pVerificationCondition;
	}
	
	public ParserRule getVerificationConditionRule() {
		return getVerificationConditionAccess().getRule();
	}

	//ArgumentExpr:
	//	AllEvidenceExpr;
	public ArgumentExprElements getArgumentExprAccess() {
		return pArgumentExpr;
	}
	
	public ParserRule getArgumentExprRule() {
		return getArgumentExprAccess().getRule();
	}

	//AllEvidenceExpr returns ArgumentExpr:
	//	"all" {AllExpr} "[" all+=AndThenEvidenceExpr ("," all+=AndThenEvidenceExpr)* "]";
	public AllEvidenceExprElements getAllEvidenceExprAccess() {
		return pAllEvidenceExpr;
	}
	
	public ParserRule getAllEvidenceExprRule() {
		return getAllEvidenceExprAccess().getRule();
	}

	//AndThenEvidenceExpr returns ArgumentExpr:
	//	FailThenEvidenceExpr (=> ({AndThenExpr.left=current} "andthen") right=AndThenEvidenceExpr)*;
	public AndThenEvidenceExprElements getAndThenEvidenceExprAccess() {
		return pAndThenEvidenceExpr;
	}
	
	public ParserRule getAndThenEvidenceExprRule() {
		return getAndThenEvidenceExprAccess().getRule();
	}

	//// Execute as alternative if the first one fails.
	//// The results of both are reported
	//FailThenEvidenceExpr returns ArgumentExpr:
	//	AtomicEvidenceExpr (=> ({FailThenExpr.left=current} (failed?="failthen" | unknown?="unknownthen"))
	//	right=FailThenEvidenceExpr)*;
	public FailThenEvidenceExprElements getFailThenEvidenceExprAccess() {
		return pFailThenEvidenceExpr;
	}
	
	public ParserRule getFailThenEvidenceExprRule() {
		return getFailThenEvidenceExprAccess().getRule();
	}

	//AtomicEvidenceExpr returns ArgumentExpr:
	//	ConditionalEvidence | "(" AndThenEvidenceExpr ")" | AllEvidenceExpr;
	public AtomicEvidenceExprElements getAtomicEvidenceExprAccess() {
		return pAtomicEvidenceExpr;
	}
	
	public ParserRule getAtomicEvidenceExprRule() {
		return getAtomicEvidenceExprAccess().getRule();
	}

	//// should it be a selection category as well
	//ConditionalEvidence returns ArgumentExpr:
	//	VAReference (=> ({WhenExpr.verification=current} "when") condition+=[categories::VerificationCategory]+)?;
	public ConditionalEvidenceElements getConditionalEvidenceAccess() {
		return pConditionalEvidence;
	}
	
	public ParserRule getConditionalEvidenceRule() {
		return getConditionalEvidenceAccess().getRule();
	}

	//VAReference returns ArgumentExpr:
	//	{RefExpr} verification=[VerificationActivity|QualifiedName] ("(" weight=INT ")")?;
	public VAReferenceElements getVAReferenceAccess() {
		return pVAReference;
	}
	
	public ParserRule getVAReferenceRule() {
		return getVAReferenceAccess().getRule();
	}

	//VerificationMethodRegistry:
	//	"verification" "methods" name=ID (":" title=STRING)? "[" (description=Description? methods+=VerificationMethod*) "]";
	public VerificationMethodRegistryElements getVerificationMethodRegistryAccess() {
		return pVerificationMethodRegistry;
	}
	
	public ParserRule getVerificationMethodRegistryRule() {
		return getVerificationMethodRegistryAccess().getRule();
	}

	//VerificationMethodParameter:
	//	name=ID;
	public VerificationMethodParameterElements getVerificationMethodParameterAccess() {
		return pVerificationMethodParameter;
	}
	
	public ParserRule getVerificationMethodParameterRule() {
		return getVerificationMethodParameterAccess().getRule();
	}

	//VerificationMethod:
	//	"method" name=ID ("(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")")? (":"
	//	title=STRING)? "[" (methodType=SupportedTypes scope=SupportedScopes reporting=SupportedReporting? // parameters (in addition to the model element
	//	& description=Description? & ("path" methodPath=STRING)? & conditions+=VerificationCondition* & ("category"
	//	category+=[categories::VerificationCategory]+)?) "]";
	public VerificationMethodElements getVerificationMethodAccess() {
		return pVerificationMethod;
	}
	
	public ParserRule getVerificationMethodRule() {
		return getVerificationMethodAccess().getRule();
	}

	//enum SupportedTypes:
	//	ANALYSIS="analysis" | PREDICATE="predicate" | COMPUTE="compute" | RESOLUTEPROVE="resoluteprove" |
	//	RESOLUTECOMPUTE="resolutecompute" | RESOLUTEPREDICATE="resolutepredicate" | MANUAL="manual";
	public SupportedTypesElements getSupportedTypesAccess() {
		return unknownRuleSupportedTypes;
	}
	
	public EnumRule getSupportedTypesRule() {
		return getSupportedTypesAccess().getRule();
	}

	//enum SupportedScopes:
	//	SELF="self" | PARTS="parts" | ALL="all";
	public SupportedScopesElements getSupportedScopesAccess() {
		return unknownRuleSupportedScopes;
	}
	
	public EnumRule getSupportedScopesRule() {
		return getSupportedScopesAccess().getRule();
	}

	//enum SupportedReporting:
	//	MARKER="marker" | ERRORMARKER="errormarker" | DIAGNOSTICS="diagnostics" | ASSERTEXCEPTION="assertexception" |
	//	RESULTREPORT="resultreport";
	public SupportedReportingElements getSupportedReportingAccess() {
		return unknownRuleSupportedReporting;
	}
	
	public EnumRule getSupportedReportingRule() {
		return getSupportedReportingAccess().getRule();
	}

	//Description:
	//	"description" description+=DescriptionElement+;
	public CommonGrammarAccess.DescriptionElements getDescriptionAccess() {
		return gaCommon.getDescriptionAccess();
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//DescriptionElement:
	//	text=STRING | showValue=ShowValue | thisTarget?="this" | image=ImageReference;
	public CommonGrammarAccess.DescriptionElementElements getDescriptionElementAccess() {
		return gaCommon.getDescriptionElementAccess();
	}
	
	public ParserRule getDescriptionElementRule() {
		return getDescriptionElementAccess().getRule();
	}

	//Rationale:
	//	"rationale" text=STRING;
	public CommonGrammarAccess.RationaleElements getRationaleAccess() {
		return gaCommon.getRationaleAccess();
	}
	
	public ParserRule getRationaleRule() {
		return getRationaleAccess().getRule();
	}

	//Uncertainty:
	//	"uncertainty" "[" ("volatility" volatility=Number & "costimpact" costimpact=Number & "scheduleimpact"
	//	scheduleimpact=Number & "familiarity" familiarity=Number & "timecriticality" timecriticality=Number & "riskindex"
	//	riskindex=Number & "maturityindex" maturityindex=Number) "]";
	public CommonGrammarAccess.UncertaintyElements getUncertaintyAccess() {
		return gaCommon.getUncertaintyAccess();
	}
	
	public ParserRule getUncertaintyRule() {
		return getUncertaintyAccess().getRule();
	}

	//// New rule for val only
	//XValDeclaration returns xbase::XExpression:
	//	{xbase::XVariableDeclaration} ("val" (=> (type=JvmTypeReference name=ID) | name=ID) "=" right=(APropertyReference |
	//	XExpression));
	public CommonGrammarAccess.XValDeclarationElements getXValDeclarationAccess() {
		return gaCommon.getXValDeclarationAccess();
	}
	
	public ParserRule getXValDeclarationRule() {
		return getXValDeclarationAccess().getRule();
	}

	//ComputeDeclaration returns xbase::XExpression:
	//	{ComputeDeclaration} ("compute" (=> (type=JvmTypeReference name=ID) | name=ID));
	public CommonGrammarAccess.ComputeDeclarationElements getComputeDeclarationAccess() {
		return gaCommon.getComputeDeclarationAccess();
	}
	
	public ParserRule getComputeDeclarationRule() {
		return getComputeDeclarationAccess().getRule();
	}

	//APropertyReference returns xbase::XExpression:
	//	{APropertyReference} "@" property=[aadl2::Property|AADLPROPERTYREFERENCE];
	public CommonGrammarAccess.APropertyReferenceElements getAPropertyReferenceAccess() {
		return gaCommon.getAPropertyReferenceAccess();
	}
	
	public ParserRule getAPropertyReferenceRule() {
		return getAPropertyReferenceAccess().getRule();
	}

	////ComputeDeclaration returns xbase::XVariableDeclaration: 
	////{ComputeDeclaration} writeable?='compute'  (=> (type=JvmTypeReference name=ValidID) | name=ValidID)   
	////;
	////ComputeDeclaration : 
	////{ComputeDeclaration} writeable?='compute'   name=ID   
	////;
	//// Override XNumberLiteral from XBase
	////Accept unit and have value converter turn it into value scaled to base unit
	//XNumberLiteral returns xbase::XNumberLiteral:
	//	{XNumberLiteralUnit} value=Number => unit=[aadl2::UnitLiteral]?;
	public CommonGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaCommon.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//// ShowValue: ref=[ConstantDecl|ID] ('%' unit=ID)?;	
	//ShowValue:
	//	ref=[xbase::XVariableDeclaration] ("%" unit=[aadl2::UnitLiteral])?;
	public CommonGrammarAccess.ShowValueElements getShowValueAccess() {
		return gaCommon.getShowValueAccess();
	}
	
	public ParserRule getShowValueRule() {
		return getShowValueAccess().getRule();
	}

	//ImageReference:
	//	"img" imgfile=IMGREF;
	public CommonGrammarAccess.ImageReferenceElements getImageReferenceAccess() {
		return gaCommon.getImageReferenceAccess();
	}
	
	public ParserRule getImageReferenceRule() {
		return getImageReferenceAccess().getRule();
	}

	//IMGREF:
	//	(ID "/")* ID "." ID;
	public CommonGrammarAccess.IMGREFElements getIMGREFAccess() {
		return gaCommon.getIMGREFAccess();
	}
	
	public ParserRule getIMGREFRule() {
		return getIMGREFAccess().getRule();
	}

	//// Qualified classifier reference
	//AADLCLASSIFIERREFERENCE:
	//	ID ("::" ID)+ ("." ID)?;
	public CommonGrammarAccess.AADLCLASSIFIERREFERENCEElements getAADLCLASSIFIERREFERENCEAccess() {
		return gaCommon.getAADLCLASSIFIERREFERENCEAccess();
	}
	
	public ParserRule getAADLCLASSIFIERREFERENCERule() {
		return getAADLCLASSIFIERREFERENCEAccess().getRule();
	}

	//AADLPROPERTYREFERENCE:
	//	ID ("::" ID)?;
	public CommonGrammarAccess.AADLPROPERTYREFERENCEElements getAADLPROPERTYREFERENCEAccess() {
		return gaCommon.getAADLPROPERTYREFERENCEAccess();
	}
	
	public ParserRule getAADLPROPERTYREFERENCERule() {
		return getAADLPROPERTYREFERENCEAccess().getRule();
	}

	//URIID:
	//	STRING;
	public CommonGrammarAccess.URIIDElements getURIIDAccess() {
		return gaCommon.getURIIDAccess();
	}
	
	public ParserRule getURIIDRule() {
		return getURIIDAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaCommon.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaCommon.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaCommon.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaCommon.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaCommon.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaCommon.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaCommon.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaCommon.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaCommon.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaCommon.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaCommon.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaCommon.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaCommon.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaCommon.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaCommon.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaCommon.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaCommon.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaCommon.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaCommon.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaCommon.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaCommon.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaCommon.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaCommon.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaCommon.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaCommon.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaCommon.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaCommon.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaCommon.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaCommon.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaCommon.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaCommon.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaCommon.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaCommon.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaCommon.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaCommon.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaCommon.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaCommon.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaCommon.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaCommon.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaCommon.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaCommon.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaCommon.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaCommon.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaCommon.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaCommon.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaCommon.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaCommon.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaCommon.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaCommon.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaCommon.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaCommon.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaCommon.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaCommon.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaCommon.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaCommon.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaCommon.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaCommon.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaCommon.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaCommon.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaCommon.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaCommon.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaCommon.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaCommon.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaCommon.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaCommon.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaCommon.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaCommon.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaCommon.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaCommon.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaCommon.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaCommon.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaCommon.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaCommon.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaCommon.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaCommon.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaCommon.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaCommon.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaCommon.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommon.getANY_OTHERRule();
	} 
}
