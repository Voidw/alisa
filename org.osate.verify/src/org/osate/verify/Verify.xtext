grammar org.osate.verify.Verify with org.osate.alisa.common.Common

generate verify "http://www.osate.org/verify/Verify"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.osate.org/reqspec/ReqSpec" as ReqSpec
import "http://www.osate.org/categories/Categories" as categories
import "http://www.osate.org/alisa/common/Common" as common
import  "http://www.rockwellcollins.com/atc/resolute/Resolute" as resolute

Verification:
	contents+=	( VerificationPlan | GlobalVerificationPlan | VerificationMethodRegistry)+;

VerificationPlan returns VerificationPlan:
	'system''verification' 'plan'{SystemVerificationPlan} name=QualifiedName (':' title=STRING)? 
	'for' requirements=[ReqSpec::SystemRequirements|QualifiedName]  
	'['
	(
		( description=Description)?
	& claim+=Claim*
	& rationale=Rationale?
	& ('issues' issues+=STRING+ )?
	)
	']';

GlobalVerificationPlan returns VerificationPlan:
	'global''verification' 'plan' {GlobalVerificationPlan} name=QualifiedName (':' title=STRING)? 
	'for' requirements=[ReqSpec::GlobalRequirements|QualifiedName]  
	'['
	(
		( description=Description)?
	& claim+=Claim*
	& rationale=Rationale?
	& ('issues' issues+=STRING+ )?
	)
	']';

Claim:
	'claim' requirement=[ReqSpec::Requirement|QualifiedName]  (':' title=STRING)?
	('(' weight=Number ')')?
	'['
	(
		  ('activities' activities += VerificationActivity*)?
		& ('assert' assert=ArgumentExpr)?
		& rationale=Rationale?
		& subclaim+=Claim*
		& ('issues' issues+=STRING+ )?
	)  
	']'
;


ArgumentExpr:
	ThenEvidenceExpr;

ThenEvidenceExpr returns ArgumentExpr:
	ElseEvidenceExpr (=> ({ThenExpr.left=current} 'then') successor=ThenEvidenceExpr)*;

	// Execute as alternative if the first one fails.
// The results of both are reported
ElseEvidenceExpr returns ArgumentExpr:
	SingleElseEvidenceExpr | CompositeElseEvidenceExpr
;
	
SingleElseEvidenceExpr returns ArgumentExpr:	
	VAReference (=> ({ElseExpr.left=current} 'else') 
		(error=ElseEvidenceExpr | 
				'[' ('fail' ':' fail=ThenEvidenceExpr)? ('timeout' ':' timeout=ThenEvidenceExpr)? 
				('error' ':' error=ThenEvidenceExpr)? 
				 ']'
		)
	)*
	;

CompositeElseEvidenceExpr returns ArgumentExpr:	
	CompositeEvidenceExpr (=> ({ElseExpr.left=current} 'else') 
		error=ElseEvidenceExpr 
	)*
	;


QuantifiedEvidenceExpr returns ArgumentExpr:
	 'all' {AllExpr} '[' elements+=ThenEvidenceExpr (',' elements+=ThenEvidenceExpr)* ']' ;


CompositeEvidenceExpr returns ArgumentExpr:
	 '(' ThenEvidenceExpr ')' | QuantifiedEvidenceExpr;

VAReference returns ArgumentExpr:
	{RefExpr} verification=[VerificationActivity|ID]
	('(' weight=INT ')')?;



VerificationActivity:
	name=ID (':' title=STRING)? 
//	('for' target=[aadl2::ComponentImplementation|AadlClassifierReference])? // for specific AADL model configuration
	('phase' category+=[categories::PhaseCategory|ID]+)?
	('selection' category+=[categories::SelectionCategory|ID]+)?
	':'
	(result+=[common::ComputeDeclaration|ID] (',' result+=[common::ComputeDeclaration|ID])* '=')?
	method=[VerificationMethod|QualifiedName] 
	'(' (parameters+=[common::ValDeclaration|ID] (',' parameters+=[common::ValDeclaration|ID])*)? ')' 
	(
		'property' 'values' '(' 
		(propertyValues+=[common::ValDeclaration|ID] (',' propertyValues+=[common::ValDeclaration|ID])*)? 
		')'
	)?
	('timeout' timeout=INT)?
;


VerificationValidation returns VerificationCondition:
	'validation' {VerificationValidation}  
			method=[VerificationMethod|QualifiedName] 
			'(' (parameters+=[FormalParameter|ID] (',' parameters+=[FormalParameter| ID])*)? ')'
	;

VerificationPrecondition returns VerificationCondition:
	'precondition' {VerificationPrecondition} 
			method=[VerificationMethod|QualifiedName] 
			'(' (parameters+=[FormalParameter|ID] (',' parameters+=[FormalParameter| ID])*)? ')'
	;

VerificationMethodRegistry returns VerificationMethodRegistry:
	'verification' 'methods' name=ID
	(':' title=STRING)?
	'[' (
	( description=Description)?
	methods+=VerificationMethod*)
	']';

	
FormalParameter returns FormalParameter:
	parameterType=ID name=ID ('%' unit=[aadl2::UnitLiteral|ID])?;


VerificationMethod:
	'method' name=ID
	(
		'(' (params+=FormalParameter (',' params+=FormalParameter)*)? ')'
		(
			'properties' '('
			(properties+=[aadl2::Property|AADLPROPERTYREFERENCE] (',' properties+=[aadl2::Property|AADLPROPERTYREFERENCE])*)? 
			')'
		)?
		(isPredicate?='boolean'|isResultReport?='report')?
	)? 
	(':' title=STRING)?
	'['
	(
		  methodType=MethodType 
		& description=Description?
		& precondition=VerificationPrecondition?
		& validation=VerificationValidation?
		& ('category' category+=[categories::MethodCategory|ID]+)?
		& ('quality' category+=[categories::QualityCategory|ID]+)?
		& ('selection' category+=[categories::SelectionCategory|ID]+)?
	)
	']'
	;

MethodType:
	ResoluteMethod | JavaMethod | ManualMethod | PluginMethod
;
	
	ResoluteMethod:
		'resolute' methodReference=[resolute::FunctionDefinition|ID]
	;
	
	JavaMethod:
		'java' methodPath=QualifiedName
	;
	
	ManualMethod:
		'manual' {ManualMethod} dialogID=QualifiedName
	;
	
	PluginMethod:
		'plugin' methodID=ID
	;



	
//enum SupportedScopes: SELF='self' | PARTS='parts' | ALL='all';

//enum SupportedReporting: MARKER='marker' |ERRORMARKER='errormarker' | DIAGNOSTICS='diagnostics'| ASSERTEXCEPTION='assertexception'|RESULTREPORT='resultreport' ;
