/*
 * generated by Xtext
 */
package org.osate.verify.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.osate.alisa.common.scoping.AlisaAbstractDeclarativeScopeProvider
import org.osate.verify.verify.Claim
import org.osate.verify.verify.VerificationActivity

import static org.osate.reqspec.util.ReqSpecUtilExtension.*
import static org.osate.verify.util.VerifyUtilExtension.*
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.osate.verify.verify.ResoluteMethod
import com.google.inject.Inject
import org.osate.alisa.common.scoping.ICommonGlobalReferenceFinder
import org.eclipse.emf.ecore.EObject
import com.rockwellcollins.atc.resolute.resolute.ResolutePackage
import org.eclipse.emf.ecore.util.EcoreUtil
import com.rockwellcollins.atc.resolute.resolute.FunctionDefinition
import com.rockwellcollins.atc.resolute.resolute.ClaimBody

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 * 
 */
class VerifyScopeProvider extends AlisaAbstractDeclarativeScopeProvider {

	def scope_XExpression(VerificationActivity context, EReference reference) {
		val claim = getContainingClaim(context)
		var req = claim.requirement
		return scopeForValCompute(req, IScope.NULLSCOPE)
	}

	def scope_ComputeDeclaration(VerificationActivity context, EReference reference) {
		val claim = getContainingClaim(context)
		var req = claim.requirement
		return scopeForCompute(req, IScope.NULLSCOPE)
	}

	def scope_Claim_requirement(Claim context, EReference reference) {
		var result = delegateGetScope(context,reference)
		val forSystemRequirements = containingVerificationPlan(context).systemRequirements
		if (!forSystemRequirements.content.empty) {
			result = new SimpleScope(result,
				Scopes::scopedElementsFor(forSystemRequirements.content,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
		}
		return result
	}
	
	def scope_FunctionDefinition(ResoluteMethod context, EReference reference){
		var result = IScope.NULLSCOPE
		val foundlist = refFinder.getEObjectDescriptions(context, ResolutePackage.Literals.FUNCTION_DEFINITION, "aadl")
		if (foundlist.isEmpty) return IScope.NULLSCOPE
		val fcns =  foundlist.map[f|EcoreUtil.resolve(f.EObjectOrProxy,context) as FunctionDefinition]
		.filter[fd|fd.body instanceof ClaimBody]
		return new SimpleScope(IScope.NULLSCOPE,Scopes::scopedElementsFor(fcns,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
	}
		@Inject ICommonGlobalReferenceFinder refFinder
//
//		def FunctionDefinition findResoluteFunction(EObject context, String resoluteFunctionName) {
//			val foundlist = refFinder.getEObjectDescriptions(context,
//				ResolutePackage.Literals.FUNCTION_DEFINITION, "aadl").filter[ eod |
//				eod.getName().getLastSegment().equalsIgnoreCase(resoluteFunctionName)
//			]
//			if(foundlist.length == 0) return null
//			return EcoreUtil.resolve(foundlist.head.EObjectOrProxy,context) as FunctionDefinition
//		}

}
