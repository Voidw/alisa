/*
 * generated by Xtext
 */
package org.osate.verify.scoping

import com.google.inject.Inject
import com.rockwellcollins.atc.resolute.resolute.ClaimBody
import com.rockwellcollins.atc.resolute.resolute.FunctionDefinition
import com.rockwellcollins.atc.resolute.resolute.ResolutePackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.osate.aadl2.Aadl2Package
import org.osate.alisa.common.scoping.CommonScopeProvider
import org.osate.alisa.common.scoping.ICommonGlobalReferenceFinder
import org.osate.verify.verify.Claim
import org.osate.verify.verify.ResoluteMethod
import org.osate.verify.verify.VerificationActivity

import static org.osate.reqspec.util.ReqSpecUtilExtension.*
import static org.osate.verify.util.VerifyUtilExtension.*

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 * 
 */
class VerifyScopeProvider extends CommonScopeProvider {

	@Inject ICommonGlobalReferenceFinder refFinder

	def scope_XExpression(VerificationActivity context, EReference reference) {
		val claim = getContainingClaim(context)
		var req = claim.requirement
		return scopeForValCompute(req, IScope.NULLSCOPE)
	}

	def scope_ComputeDeclaration(VerificationActivity context, EReference reference) {
		val claim = getContainingClaim(context)
		var req = claim.requirement
		return scopeForCompute(req, IScope.NULLSCOPE)
	}

	def scope_Claim_requirement(Claim context, EReference reference) {
		var result = delegateGetScope(context, reference)
		val forSystemRequirements = containingVerificationPlan(context).systemRequirements
		if (!forSystemRequirements.content.empty) {
			result = new SimpleScope(result,
				Scopes::scopedElementsFor(forSystemRequirements.content,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
		}
		return result
	}

	def scope_FunctionDefinition(ResoluteMethod context, EReference reference) {
		val foundlist = refFinder.getEObjectDescriptions(context, ResolutePackage.Literals.FUNCTION_DEFINITION, "aadl")
		if (foundlist.isEmpty)
			return IScope.NULLSCOPE
		val fcns = foundlist.map[f|EcoreUtil.resolve(f.EObjectOrProxy, context) as FunctionDefinition].filter [ fd |
			fd.body instanceof ClaimBody
		]
		return new SimpleScope(IScope.NULLSCOPE, Scopes::scopedElementsFor(fcns,
			QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
	}

	def scope_Property(EObject context, EReference reference) {
		val props = refFinder.getEObjectDescriptions(context, Aadl2Package.eINSTANCE.property, "aadl")
		new SimpleScope(IScope::NULLSCOPE, props, true)
	}

	def scope_VerificationActivity(EObject context, EReference reference) {
		val vas = getContainingClaim(context).activities
		new SimpleScope(IScope::NULLSCOPE, Scopes::scopedElementsFor(vas,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
	}
}
