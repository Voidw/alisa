/*
 * generated by Xtext
 */
package org.osate.alisa.workbench.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.osate.alisa.workbench.alisa.AlisaPackage;
import org.osate.alisa.workbench.alisa.AlisaWorkArea;
import org.osate.alisa.workbench.alisa.AssurancePlan;
import org.osate.alisa.workbench.alisa.AssuranceTask;
import org.osate.alisa.workbench.alisa.Description;
import org.osate.alisa.workbench.alisa.DescriptionElement;
import org.osate.alisa.workbench.services.AlisaGrammarAccess;

@SuppressWarnings("all")
public class AlisaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlisaGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == AlisaPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case AlisaPackage.ALISA_WORK_AREA:
				sequence_AlisaWorkArea(context, (AlisaWorkArea) semanticObject); 
				return; 
			case AlisaPackage.ASSURANCE_PLAN:
				sequence_AssurancePlan(context, (AssurancePlan) semanticObject); 
				return; 
			case AlisaPackage.ASSURANCE_TASK:
				sequence_AssuranceTask(context, (AssuranceTask) semanticObject); 
				return; 
			case AlisaPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case AlisaPackage.DESCRIPTION_ELEMENT:
				sequence_DescriptionElement(context, (DescriptionElement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (cases+=AssurancePlan | cases+=AssuranceTask)*
	 */
	protected void sequence_AlisaWorkArea(EObject context, AlisaWorkArea semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         title=STRING? 
	 *         target=[ComponentImplementation|AadlClassifierReference] 
	 *         description=Description? 
	 *         assureOwn+=[VerificationPlan|QualifiedName]* 
	 *         assureGlobal+=[VerificationPlan|QualifiedName]* 
	 *         assureSubsystemPlans+=[AssurancePlan|QualifiedName]* 
	 *         (assumeSubsystems+=[ComponentClassifier|AadlClassifierReference]+ | assumeAll?='all')? 
	 *         issues+=STRING*
	 *     )
	 */
	protected void sequence_AssurancePlan(EObject context, AssurancePlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         title=STRING? 
	 *         assurancePlan=[AssurancePlan|QualifiedName] 
	 *         description=Description? 
	 *         (requirementFilter+=[RequirementCategory|ID]+ strictRequirementCategories?='only'?)? 
	 *         (verificationFilter+=[VerificationCategory|ID]+ strictVerificationCategories?='only'?)? 
	 *         (selectionFilter+=[SelectionCategory|ID]+ strictSelectionCategories?='only'?)? 
	 *         issues+=STRING*
	 *     )
	 */
	protected void sequence_AssuranceTask(EObject context, AssuranceTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (text=STRING | thisTarget?='this')
	 */
	protected void sequence_DescriptionElement(EObject context, DescriptionElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     description+=DescriptionElement+
	 */
	protected void sequence_Description(EObject context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
