grammar org.osate.alisa.workbench.Alisa with org.osate.alisa.common.Common
//grammar org.osate.alisa.workbench.Alisa with org.eclipse.xtext.common.Terminals

generate alisa "http://www.osate.org/alisa/workbench/Alisa"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.osate.org/verify/Verify" as Verify 
import "http://www.osate.org/categories/Categories" as categories

AlisaWorkArea:
	cases+=(AssurancePlan|AssuranceTask)*;
 
AssurancePlan:
	'assurance' 'plan' name=QualifiedName (':' title=STRING)?
	'for' target=[aadl2::ComponentImplementation|AadlClassifierReference]
	'['
	(
	('description' description=Description)?
	& ('assure' 'own' assureOwn+=[Verify::VerificationPlan|QualifiedName]+)?
	& ('assure' 'global' assureGlobal+=[Verify::VerificationPlan|QualifiedName]+)?
	& ('assure' 'subsystem' 'plans' assureSubsystemPlans+=[AssurancePlan|QualifiedName]+)?
	& ('assume' 'subsystems' (assumeSubsystems+=[aadl2::ComponentClassifier|AadlClassifierReference]+|assumeAll?='all'))?
		& ('issues' issues+=STRING+ )?
	)
	']';
	
	AssuranceTask returns AssuranceTask :
		'assurance' 'task' name=ID (':' title=STRING)? 'for' assurancePlan=[AssurancePlan|QualifiedName]
	'['
	(
	('description' description=Description)?
	&( 'filter'  filter+=[categories::Category|ID]+ strictFilter?='only'?)?
	&('issues' issues+=STRING+ )?
	)
	']'
	;
	
//OrSelectionConditionExpr returns SelectionConditionExpr:
//	AndSelectionConditionExpr (=> ({AndSelectionConditionExpr.left=current} 'or') right=OrSelectionConditionExpr)*;
//
//AndSelectionConditionExpr returns SelectionConditionExpr:
//	SelectionCategoryReference (=> ({AndSelectionConditionExpr.left=current} 'and') right=AndSelectionConditionExpr)*;
//
//SelectionCategoryReference:
//	cat=[categories::Category|ID];
	
//Description : 
//	( description += DescriptionElement  )+
//;
//
//DescriptionElement :
// 	text = STRING | thisTarget?='this'
// ;
//

 
//// Qualified classifier reference
//
//AadlClassifierReference:
//	ID ('::' ID)+ ('.' ID)?;
//
//QualifiedName:
//	ID ('.' ID)?;
//	
//URIID: STRING;		