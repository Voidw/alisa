/*
 * generated by Xtext
 */
package org.osate.alisa.workbench.validation

import com.google.inject.Inject
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.CheckType
import org.osate.alisa.workbench.alisa.AlisaPackage
import org.osate.alisa.workbench.alisa.AssurancePlan
import org.osate.verify.util.IVerifyGlobalReferenceFinder

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class AlisaValidator extends AbstractAlisaValidator {

public static val ASSURANCE_PLAN_OWN_MISSING_VERIFICATION_PLANS = 'org.osate.alisa.workbench.validation.assurance.plan.own.missing.verification.plans'

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Inject extension IVerifyGlobalReferenceFinder referenceFinder

	@Check(CheckType.NORMAL)
	def void checkAssurancePlanOwn(AssurancePlan assurancePlan) {
		val res = referenceFinder.getVerificationPlans(assurancePlan.target, assurancePlan).filter([avp | !assurancePlan.assureOwn.contains(avp)])		
		if (res.size > 0){
			val String[] namesAndURI = newArrayOfSize(res.length * 2)
			res.forEach([vp, counter |
				namesAndURI.set(counter * 2, vp.name)
				namesAndURI.set((counter * 2) + 1, EcoreUtil.getURI(vp).toString())
			])
			warning("Assurance Plan '" + assurancePlan.name + "' missing Verification Plans in 'assure own' statement '",
				assurancePlan, AlisaPackage.Literals.ASSURANCE_PLAN__NAME, ASSURANCE_PLAN_OWN_MISSING_VERIFICATION_PLANS, namesAndURI
			)
		}
	}

}
