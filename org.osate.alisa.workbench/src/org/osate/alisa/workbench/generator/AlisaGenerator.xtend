/*
 * generated by Xtext
 */
package org.osate.alisa.workbench.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import com.google.inject.Inject
import org.osate.aadl2.ComponentClassifier
import org.osate.aadl2.NamedElement
import org.osate.aadl2.instance.ComponentInstance
import org.osate.aadl2.instance.InstanceObject
import org.osate.aadl2.instance.SystemInstance
import org.osate.alisa.common.scoping.CommonGlobalScopeProvider
import org.osate.reqspec.reqSpec.Hazard
import org.osate.reqspec.reqSpec.ReqSpecPackage
import org.osate.reqspec.reqSpec.Requirement
import org.osate.verify.verify.VerificationActivity
import org.osate.verify.verify.VerificationAssumption
import org.osate.verify.verify.VerificationContainer
import org.osate.verify.verify.VerifyPackage

import static extension org.eclipse.emf.ecore.util.EcoreUtil.*
import org.osate.verify.verify.VerificationCondition
import org.osate.alisa.workbench.alisa.AlisaWorkArea
import org.osate.aadl2.ComponentImplementation
import org.osate.alisa.workbench.alisa.AssuranceCasePlan
import static extension org.osate.aadl2.instantiation.InstantiateModel.buildInstanceModelFile
import org.eclipse.xtext.scoping.IGlobalScopeProvider


/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class AlisaGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val workarea = resource.contents.get(0) as AlisaWorkArea
		workarea.cases.forEach[mycase|
		fsa.generateFile(
			'''«mycase.name».assure''', generateCase(mycase) )
				
		]
	}
	
	@Inject
	var IGlobalScopeProvider scopeProvider 
	
	extension CommonGlobalScopeProvider cgsp = scopeProvider as CommonGlobalScopeProvider

	var AssuranceCasePlan currentcase 
	
	def generateCase(AssuranceCasePlan acp){
		currentcase = acp
	val si = acp.system.buildInstanceModelFile
		si.generate
	}
	
	def String generate ( ComponentInstance ci){
		'''
		case «ci.name» for «ci.instanceObjectPath»
		[
			pass = 0
			fail = 0
			neutral = 0
			unknown = 0
			weight = 1
		«FOR subci : ci.componentInstances»
			«subci.generate»
		«ENDFOR»
		«FOR reqspec : ci.requirements»
			«reqspec.generate(ci)»
		«ENDFOR»
		]
		'''
	}
	
//io.getRelativeURIFragmentPath(null) for relative path
	def String generate (Requirement reqspec, InstanceObject io){
		'''
		claim «io.name»-«reqspec.name» of «reqspec»
		for "«io.getURI»" 
		[
			pass = 0
			fail = 0
			neutral = 0
			unknown = 0
		«FOR subreqspec : reqspec.subrequirement»
			«subreqspec.generate(io)»
		«ENDFOR»
		«FOR va : reqspec.verificationActivities»
			«(va as VerificationActivity).generate(io)»
		«ENDFOR»
		]
		'''
	}
		
	def generate (VerificationActivity va, InstanceObject io){
		'''
		verification «io.name»-«va.name» of «va»
		for "«io.getURI»" 
		[
			pass = 0
			fail = 0
			neutral = 0
			unknown = 0
		«FOR subva : va.method.conditions »
			«subva.generate(io)»
		«ENDFOR»
		]
		'''
	}
		
	def generate (VerificationAssumption va, InstanceObject io){
		'''
		verification «io.name»-«va.name» of «va»
		for "«io.getURI»" 
		[
			pass = 0
			fail = 0
			neutral = 0
			unknown = 0
		]
		'''
	}
		
	def generate (Hazard ha, InstanceObject io){
		'''
		verification «io.name»-«ha.name» of «ha»
		for "«io.getURI»"
		[
		]
		'''
	}
		
	def generate (VerificationCondition vc, InstanceObject io){
		'''
		assumption/precondition «io.name»-«vc.name» of «vc»
		for "«io.getURI»"
		[
		]
		'''
	}
	
	def getRequirements(ComponentInstance io){
		val x = io.componentClassifier.getGlobalEObjectDescriptions(ReqSpecPackage.eINSTANCE.requirement,null)
		
		val y = x.map[EObjectOrProxy as Requirement]
		for ( r : y) {
			val cl1 = r.target
			val ComponentClassifier t2 = (io as ComponentInstance).componentClassifier
			val c1n = cl1.getQualifiedName()
			val c2n = t2.getQualifiedName()
			println(c1n + " "+c2n)
		}
		y.filter[req| samereqs((req as Requirement).target as ComponentClassifier, (io as ComponentInstance).componentClassifier )]//(req as Requirement).target.getQualifiedName().equalsIgnoreCase((io as ComponentInstance).componentClassifier.getQualifiedName())]
//		io.componentClassifier.getGlobalEObjectDescriptions(ReqSpecPackage.eINSTANCE.requirement)
//		 [IEObjectDescription ed | (ed.EObjectOrProxy as Requirement).target == (io as ComponentInstance).componentClassifier]
//		 .map[ed|ed.EObjectOrProxy as Requirement]
	}
	
	def boolean samereqs (ComponentClassifier cl1, ComponentClassifier cl2){
		cl1.getQualifiedName().equalsIgnoreCase(cl2.getQualifiedName())
	}
	
	def getVerificationActivities(Requirement reqspec){
//		reqspec.getGlobalEObjectDescriptions(VerifyPackage.eINSTANCE.verificationContainer,null).
//		map[EObjectOrProxy as VerificationContainer].filter[va | va.target == reqspec] 
		reqspec.getGlobalEObjectDescriptions(VerifyPackage.eINSTANCE.verificationContainer)
		[ed | (ed.EObjectOrProxy as VerificationContainer)?.target == reqspec] 
		.map[ed|ed.EObjectOrProxy as VerificationContainer]
	}
	
	def getRequirementTarget(Requirement req, InstanceObject io){
		io.findElementInstance(req.target)
	}
	
	def findElementInstance(InstanceObject io, NamedElement element){
		switch io {
			ComponentInstance : io.allOwnedElements.findFirst[ei| (ei as InstanceObject).name.equalsIgnoreCase(element.name)] as NamedElement
			default: io
		}
	}
	
}
