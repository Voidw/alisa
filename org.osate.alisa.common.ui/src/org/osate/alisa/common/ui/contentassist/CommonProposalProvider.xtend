/*
 * generated by Xtext
 */
package org.osate.alisa.common.ui.contentassist

import org.osate.alisa.common.ui.contentassist.AbstractCommonProposalProvider
import com.google.common.base.Function
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.conversion.ValueConverterException
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.emf.ecore.EObject
import org.eclipse.jface.viewers.StyledString
import org.eclipse.swt.graphics.Image
import org.osate.aadl2.Aadl2Package
import org.osate.xtext.aadl2.naming.Aadl2QualifiedNameConverter
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class CommonProposalProvider extends AbstractCommonProposalProvider {



	override void completeAPropertyReference_Property(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor,
			[description | model.propertyUsedIn(context.currentModel)]
		);
	}
	
	def propertyUsedIn(EObject model, EObject context){
		true
	}

	
	val Aadl2QualifiedNameConverter aadl2QNC = new Aadl2QualifiedNameConverter()
	
	override Function<IEObjectDescription, ICompletionProposal> getProposalFactory( String ruleName,
			ContentAssistContext contentAssistContext) {
		return new DefaultProposalCreator(contentAssistContext, ruleName, getQualifiedNameConverter()) {

		override ICompletionProposal apply(IEObjectDescription candidate) {
			if (candidate == null)
				return null;
			var ICompletionProposal result = null;
			var String proposal = if (Aadl2Package.eINSTANCE.classifier.isSuperTypeOf(candidate.EClass))  
					aadl2QNC.toString(candidate.name) 
				else qualifiedNameConverter.toString(candidate.getName()) ;
			if (valueConverter != null) {
				try {
					proposal = valueConverter.toString(proposal);
				} catch (ValueConverterException e) {
					return null;
				}
			} else if (ruleName != null) {
				try {
					proposal = getValueConverter().toString(proposal, ruleName);
				} catch (ValueConverterException e) {
					return null;
				}
			}
			val EObject objectOrProxy = candidate.getEObjectOrProxy();
			val StyledString displayString = getStyledDisplayString(candidate);
			val Image image = getImage(objectOrProxy);
			result = createCompletionProposal(proposal, displayString, image, contentAssistContext);
			if (result instanceof ConfigurableCompletionProposal) {
				result.setProposalContextResource(contentAssistContext.getResource());
				result.setAdditionalProposalInfo(objectOrProxy);
				result.setHover(hover);
			}
			getPriorityHelper().adjustCrossReferencePriority(result, contentAssistContext.getPrefix());
			return result;
		}
			
		}
	}
}
