/*
 * generated by Xtext
 */
grammar InternalCommon;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.osate.alisa.common.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.osate.alisa.common.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.osate.alisa.common.services.CommonGrammarAccess;

}

@parser::members {
 
 	private CommonGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CommonGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDescription
entryRuleDescription 
:
{ before(grammarAccess.getDescriptionRule()); }
	 ruleDescription
{ after(grammarAccess.getDescriptionRule()); } 
	 EOF 
;

// Rule Description
ruleDescription
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDescriptionAccess().getGroup()); }
(rule__Description__Group__0)
{ after(grammarAccess.getDescriptionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDescriptionElement
entryRuleDescriptionElement 
:
{ before(grammarAccess.getDescriptionElementRule()); }
	 ruleDescriptionElement
{ after(grammarAccess.getDescriptionElementRule()); } 
	 EOF 
;

// Rule DescriptionElement
ruleDescriptionElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDescriptionElementAccess().getAlternatives()); }
(rule__DescriptionElement__Alternatives)
{ after(grammarAccess.getDescriptionElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}













<<<<<<< HEAD
// Entry rule entryRuleAVariableReference
entryRuleAVariableReference 
:
{ before(grammarAccess.getAVariableReferenceRule()); }
	 ruleAVariableReference
{ after(grammarAccess.getAVariableReferenceRule()); } 
	 EOF 
;

// Rule AVariableReference
ruleAVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAVariableReferenceAccess().getGroup()); }
(rule__AVariableReference__Group__0)
{ after(grammarAccess.getAVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}

=======
>>>>>>> refs/remotes/origin/PeterWork


// Entry rule entryRuleShowValue
entryRuleShowValue 
:
{ before(grammarAccess.getShowValueRule()); }
	 ruleShowValue
{ after(grammarAccess.getShowValueRule()); } 
	 EOF 
;

// Rule ShowValue
ruleShowValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShowValueAccess().getGroup()); }
(rule__ShowValue__Group__0)
{ after(grammarAccess.getShowValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImageReference
entryRuleImageReference 
:
{ before(grammarAccess.getImageReferenceRule()); }
	 ruleImageReference
{ after(grammarAccess.getImageReferenceRule()); } 
	 EOF 
;

// Rule ImageReference
ruleImageReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImageReferenceAccess().getGroup()); }
(rule__ImageReference__Group__0)
{ after(grammarAccess.getImageReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIMGREF
entryRuleIMGREF 
:
{ before(grammarAccess.getIMGREFRule()); }
	 ruleIMGREF
{ after(grammarAccess.getIMGREFRule()); } 
	 EOF 
;

// Rule IMGREF
ruleIMGREF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIMGREFAccess().getGroup()); }
(rule__IMGREF__Group__0)
{ after(grammarAccess.getIMGREFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAExpression
entryRuleAExpression 
:
{ before(grammarAccess.getAExpressionRule()); }
	 ruleAExpression
{ after(grammarAccess.getAExpressionRule()); } 
	 EOF 
;

// Rule AExpression
ruleAExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAExpressionAccess().getAOrExpressionParserRuleCall()); }
	ruleAOrExpression
{ after(grammarAccess.getAExpressionAccess().getAOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAOrExpression
entryRuleAOrExpression 
:
{ before(grammarAccess.getAOrExpressionRule()); }
	 ruleAOrExpression
{ after(grammarAccess.getAOrExpressionRule()); } 
	 EOF 
;

// Rule AOrExpression
ruleAOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAOrExpressionAccess().getGroup()); }
(rule__AOrExpression__Group__0)
{ after(grammarAccess.getAOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpOr
entryRuleOpOr 
:
{ before(grammarAccess.getOpOrRule()); }
	 ruleOpOr
{ after(grammarAccess.getOpOrRule()); } 
	 EOF 
;

// Rule OpOr
ruleOpOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); }

	'||' 

{ after(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAndExpression
entryRuleAAndExpression 
:
{ before(grammarAccess.getAAndExpressionRule()); }
	 ruleAAndExpression
{ after(grammarAccess.getAAndExpressionRule()); } 
	 EOF 
;

// Rule AAndExpression
ruleAAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAndExpressionAccess().getGroup()); }
(rule__AAndExpression__Group__0)
{ after(grammarAccess.getAAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpAnd
entryRuleOpAnd 
:
{ before(grammarAccess.getOpAndRule()); }
	 ruleOpAnd
{ after(grammarAccess.getOpAndRule()); } 
	 EOF 
;

// Rule OpAnd
ruleOpAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); }

	'&&' 

{ after(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAEqualityExpression
entryRuleAEqualityExpression 
:
{ before(grammarAccess.getAEqualityExpressionRule()); }
	 ruleAEqualityExpression
{ after(grammarAccess.getAEqualityExpressionRule()); } 
	 EOF 
;

// Rule AEqualityExpression
ruleAEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getGroup()); }
(rule__AEqualityExpression__Group__0)
{ after(grammarAccess.getAEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpEquality
entryRuleOpEquality 
:
{ before(grammarAccess.getOpEqualityRule()); }
	 ruleOpEquality
{ after(grammarAccess.getOpEqualityRule()); } 
	 EOF 
;

// Rule OpEquality
ruleOpEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpEqualityAccess().getAlternatives()); }
(rule__OpEquality__Alternatives)
{ after(grammarAccess.getOpEqualityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleARelationalExpression
entryRuleARelationalExpression 
:
{ before(grammarAccess.getARelationalExpressionRule()); }
	 ruleARelationalExpression
{ after(grammarAccess.getARelationalExpressionRule()); } 
	 EOF 
;

// Rule ARelationalExpression
ruleARelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getARelationalExpressionAccess().getGroup()); }
(rule__ARelationalExpression__Group__0)
{ after(grammarAccess.getARelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpCompare
entryRuleOpCompare 
:
{ before(grammarAccess.getOpCompareRule()); }
	 ruleOpCompare
{ after(grammarAccess.getOpCompareRule()); } 
	 EOF 
;

// Rule OpCompare
ruleOpCompare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpCompareAccess().getAlternatives()); }
(rule__OpCompare__Alternatives)
{ after(grammarAccess.getOpCompareAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAOtherOperatorExpression
entryRuleAOtherOperatorExpression 
:
{ before(grammarAccess.getAOtherOperatorExpressionRule()); }
	 ruleAOtherOperatorExpression
{ after(grammarAccess.getAOtherOperatorExpressionRule()); } 
	 EOF 
;

// Rule AOtherOperatorExpression
ruleAOtherOperatorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getGroup()); }
(rule__AOtherOperatorExpression__Group__0)
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpOther
entryRuleOpOther 
:
{ before(grammarAccess.getOpOtherRule()); }
	 ruleOpOther
{ after(grammarAccess.getOpOtherRule()); } 
	 EOF 
;

// Rule OpOther
ruleOpOther
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpOtherAccess().getAlternatives()); }
(rule__OpOther__Alternatives)
{ after(grammarAccess.getOpOtherAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAdditiveExpression
entryRuleAAdditiveExpression 
:
{ before(grammarAccess.getAAdditiveExpressionRule()); }
	 ruleAAdditiveExpression
{ after(grammarAccess.getAAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AAdditiveExpression
ruleAAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getGroup()); }
(rule__AAdditiveExpression__Group__0)
{ after(grammarAccess.getAAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpAdd
entryRuleOpAdd 
:
{ before(grammarAccess.getOpAddRule()); }
	 ruleOpAdd
{ after(grammarAccess.getOpAddRule()); } 
	 EOF 
;

// Rule OpAdd
ruleOpAdd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpAddAccess().getAlternatives()); }
(rule__OpAdd__Alternatives)
{ after(grammarAccess.getOpAddAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAMultiplicativeExpression
entryRuleAMultiplicativeExpression 
:
{ before(grammarAccess.getAMultiplicativeExpressionRule()); }
	 ruleAMultiplicativeExpression
{ after(grammarAccess.getAMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule AMultiplicativeExpression
ruleAMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getGroup()); }
(rule__AMultiplicativeExpression__Group__0)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpMulti
entryRuleOpMulti 
:
{ before(grammarAccess.getOpMultiRule()); }
	 ruleOpMulti
{ after(grammarAccess.getOpMultiRule()); } 
	 EOF 
;

// Rule OpMulti
ruleOpMulti
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpMultiAccess().getAlternatives()); }
(rule__OpMulti__Alternatives)
{ after(grammarAccess.getOpMultiAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAUnaryOperation
entryRuleAUnaryOperation 
:
{ before(grammarAccess.getAUnaryOperationRule()); }
	 ruleAUnaryOperation
{ after(grammarAccess.getAUnaryOperationRule()); } 
	 EOF 
;

// Rule AUnaryOperation
ruleAUnaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAUnaryOperationAccess().getAlternatives()); }
(rule__AUnaryOperation__Alternatives)
{ after(grammarAccess.getAUnaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpUnary
entryRuleOpUnary 
:
{ before(grammarAccess.getOpUnaryRule()); }
	 ruleOpUnary
{ after(grammarAccess.getOpUnaryRule()); } 
	 EOF 
;

// Rule OpUnary
ruleOpUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpUnaryAccess().getAlternatives()); }
(rule__OpUnary__Alternatives)
{ after(grammarAccess.getOpUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAPrimaryExpression
entryRuleAPrimaryExpression 
:
{ before(grammarAccess.getAPrimaryExpressionRule()); }
	 ruleAPrimaryExpression
{ after(grammarAccess.getAPrimaryExpressionRule()); } 
	 EOF 
;

// Rule APrimaryExpression
ruleAPrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAPrimaryExpressionAccess().getAlternatives()); }
(rule__APrimaryExpression__Alternatives)
{ after(grammarAccess.getAPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleALiteral
entryRuleALiteral 
:
{ before(grammarAccess.getALiteralRule()); }
	 ruleALiteral
{ after(grammarAccess.getALiteralRule()); } 
	 EOF 
;

// Rule ALiteral
ruleALiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getALiteralAccess().getAlternatives()); }
(rule__ALiteral__Alternatives)
{ after(grammarAccess.getALiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleAIntegerTerm
entryRuleAIntegerTerm 
=======
// Entry rule entryRuleACollectionLiteral
entryRuleACollectionLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getAIntegerTermRule()); }
	 ruleAIntegerTerm
{ after(grammarAccess.getAIntegerTermRule()); } 
=======
{ before(grammarAccess.getACollectionLiteralRule()); }
	 ruleACollectionLiteral
{ after(grammarAccess.getACollectionLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule AIntegerTerm
ruleAIntegerTerm
=======
// Rule ACollectionLiteral
ruleACollectionLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getAIntegerTermAccess().getGroup()); }
(rule__AIntegerTerm__Group__0)
{ after(grammarAccess.getAIntegerTermAccess().getGroup()); }
=======
{ before(grammarAccess.getACollectionLiteralAccess().getAlternatives()); }
(rule__ACollectionLiteral__Alternatives)
{ after(grammarAccess.getACollectionLiteralAccess().getAlternatives()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleAInt
entryRuleAInt 
=======
// Entry rule entryRuleASetLiteral
entryRuleASetLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getAIntRule()); }
	 ruleAInt
{ after(grammarAccess.getAIntRule()); } 
=======
{ before(grammarAccess.getASetLiteralRule()); }
	 ruleASetLiteral
{ after(grammarAccess.getASetLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule AInt
ruleAInt
=======
// Rule ASetLiteral
ruleASetLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getAIntAccess().getINTEGER_LITTerminalRuleCall()); }
	RULE_INTEGER_LIT
{ after(grammarAccess.getAIntAccess().getINTEGER_LITTerminalRuleCall()); }
=======
{ before(grammarAccess.getASetLiteralAccess().getGroup()); }
(rule__ASetLiteral__Group__0)
{ after(grammarAccess.getASetLiteralAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleARealTerm
entryRuleARealTerm 
=======
// Entry rule entryRuleAListLiteral
entryRuleAListLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getARealTermRule()); }
	 ruleARealTerm
{ after(grammarAccess.getARealTermRule()); } 
=======
{ before(grammarAccess.getAListLiteralRule()); }
	 ruleAListLiteral
{ after(grammarAccess.getAListLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule ARealTerm
ruleARealTerm
=======
// Rule AListLiteral
ruleAListLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getARealTermAccess().getGroup()); }
(rule__ARealTerm__Group__0)
{ after(grammarAccess.getARealTermAccess().getGroup()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getGroup()); }
(rule__AListLiteral__Group__0)
{ after(grammarAccess.getAListLiteralAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleAReal
entryRuleAReal 
=======
// Entry rule entryRuleAParenthesizedExpression
entryRuleAParenthesizedExpression 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getARealRule()); }
	 ruleAReal
{ after(grammarAccess.getARealRule()); } 
=======
{ before(grammarAccess.getAParenthesizedExpressionRule()); }
	 ruleAParenthesizedExpression
{ after(grammarAccess.getAParenthesizedExpressionRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule AReal
ruleAReal
=======
// Rule AParenthesizedExpression
ruleAParenthesizedExpression
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getARealAccess().getREAL_LITTerminalRuleCall()); }
	RULE_REAL_LIT
{ after(grammarAccess.getARealAccess().getREAL_LITTerminalRuleCall()); }
=======
{ before(grammarAccess.getAParenthesizedExpressionAccess().getGroup()); }
(rule__AParenthesizedExpression__Group__0)
{ after(grammarAccess.getAParenthesizedExpressionAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD


// Entry rule entryRuleNumAlt
entryRuleNumAlt 
=======
// Entry rule entryRuleABooleanLiteral
entryRuleABooleanLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getNumAltRule()); }
	 ruleNumAlt
{ after(grammarAccess.getNumAltRule()); } 
=======
{ before(grammarAccess.getABooleanLiteralRule()); }
	 ruleABooleanLiteral
{ after(grammarAccess.getABooleanLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule NumAlt
ruleNumAlt
=======
// Rule ABooleanLiteral
ruleABooleanLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getNumAltAccess().getAlternatives()); }
(rule__NumAlt__Alternatives)
{ after(grammarAccess.getNumAltAccess().getAlternatives()); }
=======
{ before(grammarAccess.getABooleanLiteralAccess().getGroup()); }
(rule__ABooleanLiteral__Group__0)
{ after(grammarAccess.getABooleanLiteralAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleASetTerm
entryRuleASetTerm 
=======
// Entry rule entryRuleANullLiteral
entryRuleANullLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getASetTermRule()); }
	 ruleASetTerm
{ after(grammarAccess.getASetTermRule()); } 
=======
{ before(grammarAccess.getANullLiteralRule()); }
	 ruleANullLiteral
{ after(grammarAccess.getANullLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule ASetTerm
ruleASetTerm
=======
// Rule ANullLiteral
ruleANullLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getASetTermAccess().getGroup()); }
(rule__ASetTerm__Group__0)
{ after(grammarAccess.getASetTermAccess().getGroup()); }
=======
{ before(grammarAccess.getANullLiteralAccess().getGroup()); }
(rule__ANullLiteral__Group__0)
{ after(grammarAccess.getANullLiteralAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleAListTerm
entryRuleAListTerm 
=======
// Entry rule entryRuleANumberLiteral
entryRuleANumberLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getAListTermRule()); }
	 ruleAListTerm
{ after(grammarAccess.getAListTermRule()); } 
=======
{ before(grammarAccess.getANumberLiteralRule()); }
	 ruleANumberLiteral
{ after(grammarAccess.getANumberLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule AListTerm
ruleAListTerm
=======
// Rule ANumberLiteral
ruleANumberLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getGroup()); }
(rule__AListTerm__Group__0)
{ after(grammarAccess.getAListTermAccess().getGroup()); }
=======
{ before(grammarAccess.getANumberLiteralAccess().getGroup()); }
(rule__ANumberLiteral__Group__0)
{ after(grammarAccess.getANumberLiteralAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleAParenthesizedExpression
entryRuleAParenthesizedExpression 
=======
// Entry rule entryRuleAStringLiteral
entryRuleAStringLiteral 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getAParenthesizedExpressionRule()); }
	 ruleAParenthesizedExpression
{ after(grammarAccess.getAParenthesizedExpressionRule()); } 
=======
{ before(grammarAccess.getAStringLiteralRule()); }
	 ruleAStringLiteral
{ after(grammarAccess.getAStringLiteralRule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule AParenthesizedExpression
ruleAParenthesizedExpression
=======
// Rule AStringLiteral
ruleAStringLiteral
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getAParenthesizedExpressionAccess().getGroup()); }
(rule__AParenthesizedExpression__Group__0)
{ after(grammarAccess.getAParenthesizedExpressionAccess().getGroup()); }
=======
{ before(grammarAccess.getAStringLiteralAccess().getGroup()); }
(rule__AStringLiteral__Group__0)
{ after(grammarAccess.getAStringLiteralAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleABooleanLiteral
entryRuleABooleanLiteral 
=======


// Entry rule entryRuleAADLPROPERTYREFERENCE
entryRuleAADLPROPERTYREFERENCE 
>>>>>>> refs/remotes/origin/PeterWork
:
<<<<<<< HEAD
{ before(grammarAccess.getABooleanLiteralRule()); }
	 ruleABooleanLiteral
{ after(grammarAccess.getABooleanLiteralRule()); } 
=======
{ before(grammarAccess.getAADLPROPERTYREFERENCERule()); }
	 ruleAADLPROPERTYREFERENCE
{ after(grammarAccess.getAADLPROPERTYREFERENCERule()); } 
>>>>>>> refs/remotes/origin/PeterWork
	 EOF 
;

<<<<<<< HEAD
// Rule ABooleanLiteral
ruleABooleanLiteral
=======
// Rule AADLPROPERTYREFERENCE
ruleAADLPROPERTYREFERENCE
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
<<<<<<< HEAD
{ before(grammarAccess.getABooleanLiteralAccess().getGroup()); }
(rule__ABooleanLiteral__Group__0)
{ after(grammarAccess.getABooleanLiteralAccess().getGroup()); }
=======
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup()); }
(rule__AADLPROPERTYREFERENCE__Group__0)
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}



<<<<<<< HEAD
// Entry rule entryRuleANullLiteral
entryRuleANullLiteral 
:
{ before(grammarAccess.getANullLiteralRule()); }
	 ruleANullLiteral
{ after(grammarAccess.getANullLiteralRule()); } 
	 EOF 
;

// Rule ANullLiteral
ruleANullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANullLiteralAccess().getGroup()); }
(rule__ANullLiteral__Group__0)
{ after(grammarAccess.getANullLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringTerm
entryRuleStringTerm 
:
{ before(grammarAccess.getStringTermRule()); }
	 ruleStringTerm
{ after(grammarAccess.getStringTermRule()); } 
	 EOF 
;

// Rule StringTerm
ruleStringTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringTermAccess().getValueAssignment()); }
(rule__StringTerm__ValueAssignment)
{ after(grammarAccess.getStringTermAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString 
:
{ before(grammarAccess.getNoQuoteStringRule()); }
	 ruleNoQuoteString
{ after(grammarAccess.getNoQuoteStringRule()); } 
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleAADLPROPERTYREFERENCE
entryRuleAADLPROPERTYREFERENCE 
:
{ before(grammarAccess.getAADLPROPERTYREFERENCERule()); }
	 ruleAADLPROPERTYREFERENCE
{ after(grammarAccess.getAADLPROPERTYREFERENCERule()); } 
	 EOF 
;

// Rule AADLPROPERTYREFERENCE
ruleAADLPROPERTYREFERENCE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup()); }
(rule__AADLPROPERTYREFERENCE__Group__0)
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



=======
>>>>>>> refs/remotes/origin/PeterWork




// Entry rule entryRuleNumber
entryRuleNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__DescriptionElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionElementAccess().getTextAssignment_0()); }
(rule__DescriptionElement__TextAssignment_0)
{ after(grammarAccess.getDescriptionElementAccess().getTextAssignment_0()); }
)

    |(
{ before(grammarAccess.getDescriptionElementAccess().getShowValueAssignment_1()); }
(rule__DescriptionElement__ShowValueAssignment_1)
{ after(grammarAccess.getDescriptionElementAccess().getShowValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getDescriptionElementAccess().getThisTargetAssignment_2()); }
(rule__DescriptionElement__ThisTargetAssignment_2)
{ after(grammarAccess.getDescriptionElementAccess().getThisTargetAssignment_2()); }
)

    |(
{ before(grammarAccess.getDescriptionElementAccess().getImageAssignment_3()); }
(rule__DescriptionElement__ImageAssignment_3)
{ after(grammarAccess.getDescriptionElementAccess().getImageAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__OpEquality__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); }

	'===' 

{ after(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); }

	'!==' 

{ after(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); }

	'>=' 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getGroup_1()); }
(rule__OpCompare__Group_1__0)
{ after(grammarAccess.getOpCompareAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); }

	'<' 

{ after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); }

	'->' 

{ after(grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); }

	'..<' 

{ after(grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getGroup_2()); }
(rule__OpOther__Group_2__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); }

	'..' 

{ after(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); }

	'=>' 

{ after(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getGroup_5()); }
(rule__OpOther__Group_5__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getGroup_6()); }
(rule__OpOther__Group_6__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); }

	'<>' 

{ after(grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); }

	'?:' 

{ after(grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Alternatives_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGroup_5_1_0()); }
(rule__OpOther__Group_5_1_0__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_5_1_0()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); }

	'>' 

{ after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Alternatives_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGroup_6_1_0()); }
(rule__OpOther__Group_6_1_0__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_6_1_0()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); }

	'<' 

{ after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); }
)

    |(
{ before(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); }

	'=>' 

{ after(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpAdd__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpMulti__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); }

	'**' 

{ after(grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); }

	'/' 

{ after(grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); }
)

    |(
{ before(grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); }

	'%' 

{ after(grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOperationAccess().getGroup_0()); }
(rule__AUnaryOperation__Group_0__0)
{ after(grammarAccess.getAUnaryOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAUnaryOperationAccess().getAPrimaryExpressionParserRuleCall_1()); }
	ruleAPrimaryExpression
{ after(grammarAccess.getAUnaryOperationAccess().getAPrimaryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpUnary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); }
)

    |(
{ before(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); }

	'+' 

{ after(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPrimaryExpressionAccess().getALiteralParserRuleCall_0()); }
	ruleALiteral
{ after(grammarAccess.getAPrimaryExpressionAccess().getALiteralParserRuleCall_0()); }
)

    |(
<<<<<<< HEAD
{ before(grammarAccess.getAPrimaryExpressionAccess().getAVariableReferenceParserRuleCall_1()); }
	ruleAVariableReference
{ after(grammarAccess.getAPrimaryExpressionAccess().getAVariableReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAPrimaryExpressionAccess().getAParenthesizedExpressionParserRuleCall_2()); }
	ruleAParenthesizedExpression
{ after(grammarAccess.getAPrimaryExpressionAccess().getAParenthesizedExpressionParserRuleCall_2()); }
=======
{ before(grammarAccess.getAPrimaryExpressionAccess().getAParenthesizedExpressionParserRuleCall_1()); }
	ruleAParenthesizedExpression
{ after(grammarAccess.getAPrimaryExpressionAccess().getAParenthesizedExpressionParserRuleCall_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ALiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getALiteralAccess().getASetTermParserRuleCall_0()); }
	ruleASetTerm
{ after(grammarAccess.getALiteralAccess().getASetTermParserRuleCall_0()); }
=======
{ before(grammarAccess.getALiteralAccess().getACollectionLiteralParserRuleCall_0()); }
	ruleACollectionLiteral
{ after(grammarAccess.getALiteralAccess().getACollectionLiteralParserRuleCall_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

    |(
<<<<<<< HEAD
{ before(grammarAccess.getALiteralAccess().getAListTermParserRuleCall_1()); }
	ruleAListTerm
{ after(grammarAccess.getALiteralAccess().getAListTermParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getABooleanLiteralParserRuleCall_2()); }
	ruleABooleanLiteral
{ after(grammarAccess.getALiteralAccess().getABooleanLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getARealTermParserRuleCall_3()); }
	ruleARealTerm
{ after(grammarAccess.getALiteralAccess().getARealTermParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getAIntegerTermParserRuleCall_4()); }
	ruleAIntegerTerm
{ after(grammarAccess.getALiteralAccess().getAIntegerTermParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getANullLiteralParserRuleCall_5()); }
	ruleANullLiteral
{ after(grammarAccess.getALiteralAccess().getANullLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getStringTermParserRuleCall_6()); }
	ruleStringTerm
{ after(grammarAccess.getALiteralAccess().getStringTermParserRuleCall_6()); }
=======
{ before(grammarAccess.getALiteralAccess().getABooleanLiteralParserRuleCall_1()); }
	ruleABooleanLiteral
{ after(grammarAccess.getALiteralAccess().getABooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getANumberLiteralParserRuleCall_2()); }
	ruleANumberLiteral
{ after(grammarAccess.getALiteralAccess().getANumberLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getANullLiteralParserRuleCall_3()); }
	ruleANullLiteral
{ after(grammarAccess.getALiteralAccess().getANullLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getALiteralAccess().getAStringLiteralParserRuleCall_4()); }
	ruleAStringLiteral
{ after(grammarAccess.getALiteralAccess().getAStringLiteralParserRuleCall_4()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NumAlt__Alternatives
=======
rule__ACollectionLiteral__Alternatives
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getNumAltAccess().getARealTermParserRuleCall_0()); }
	ruleARealTerm
{ after(grammarAccess.getNumAltAccess().getARealTermParserRuleCall_0()); }
=======
{ before(grammarAccess.getACollectionLiteralAccess().getASetLiteralParserRuleCall_0()); }
	ruleASetLiteral
{ after(grammarAccess.getACollectionLiteralAccess().getASetLiteralParserRuleCall_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

    |(
<<<<<<< HEAD
{ before(grammarAccess.getNumAltAccess().getAIntegerTermParserRuleCall_1()); }
	ruleAIntegerTerm
{ after(grammarAccess.getNumAltAccess().getAIntegerTermParserRuleCall_1()); }
=======
{ before(grammarAccess.getACollectionLiteralAccess().getAListLiteralParserRuleCall_1()); }
	ruleAListLiteral
{ after(grammarAccess.getACollectionLiteralAccess().getAListLiteralParserRuleCall_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABooleanLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getABooleanLiteralAccess().getValueAssignment_1_0()); }
(rule__ABooleanLiteral__ValueAssignment_1_0)
{ after(grammarAccess.getABooleanLiteralAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getABooleanLiteralAccess().getFalseKeyword_1_1()); }
=======
{ before(grammarAccess.getABooleanLiteralAccess().getFalseKeyword_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork

	'false' 

<<<<<<< HEAD
{ after(grammarAccess.getABooleanLiteralAccess().getFalseKeyword_1_1()); }
=======
{ after(grammarAccess.getABooleanLiteralAccess().getFalseKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getABooleanLiteralAccess().getIsTrueAssignment_1_1()); }
(rule__ABooleanLiteral__IsTrueAssignment_1_1)
{ after(grammarAccess.getABooleanLiteralAccess().getIsTrueAssignment_1_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); }
	RULE_HEX
{ after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getGroup_1()); }
(rule__Number__Group_1__0)
{ after(grammarAccess.getNumberAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); }
	RULE_DECIMAL
{ after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); }
	RULE_DECIMAL
{ after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Description__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Description__Group__0__Impl
	rule__Description__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }

	'description' 

{ after(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Description__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Description__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1()); }
(rule__Description__DescriptionAssignment_1)
{ after(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1()); }
)
(
{ before(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1()); }
(rule__Description__DescriptionAssignment_1)*
{ after(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}

















<<<<<<< HEAD





rule__AVariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVariableReference__Group__0__Impl
	rule__AVariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AVariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVariableReferenceAccess().getAVariableReferenceAction_0()); }
(

)
{ after(grammarAccess.getAVariableReferenceAccess().getAVariableReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AVariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AVariableReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AVariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVariableReferenceAccess().getVariableAssignment_1()); }
(rule__AVariableReference__VariableAssignment_1)
{ after(grammarAccess.getAVariableReferenceAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}
=======
>>>>>>> refs/remotes/origin/PeterWork






rule__ShowValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShowValue__Group__0__Impl
	rule__ShowValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShowValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShowValueAccess().getRefAssignment_0()); }
(rule__ShowValue__RefAssignment_0)
{ after(grammarAccess.getShowValueAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShowValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShowValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShowValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShowValueAccess().getGroup_1()); }
(rule__ShowValue__Group_1__0)?
{ after(grammarAccess.getShowValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShowValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShowValue__Group_1__0__Impl
	rule__ShowValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShowValue__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShowValueAccess().getPercentSignKeyword_1_0()); }

	'%' 

{ after(grammarAccess.getShowValueAccess().getPercentSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShowValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShowValue__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShowValue__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShowValueAccess().getUnitAssignment_1_1()); }
(rule__ShowValue__UnitAssignment_1_1)
{ after(grammarAccess.getShowValueAccess().getUnitAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImageReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImageReference__Group__0__Impl
	rule__ImageReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImageReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageReferenceAccess().getImgKeyword_0()); }

	'img' 

{ after(grammarAccess.getImageReferenceAccess().getImgKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImageReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImageReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImageReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageReferenceAccess().getImgfileAssignment_1()); }
(rule__ImageReference__ImgfileAssignment_1)
{ after(grammarAccess.getImageReferenceAccess().getImgfileAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IMGREF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IMGREF__Group__0__Impl
	rule__IMGREF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IMGREF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIMGREFAccess().getGroup_0()); }
(rule__IMGREF__Group_0__0)*
{ after(grammarAccess.getIMGREFAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IMGREF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IMGREF__Group__1__Impl
	rule__IMGREF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IMGREF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIMGREFAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getIMGREFAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IMGREF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IMGREF__Group__2__Impl
	rule__IMGREF__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IMGREF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIMGREFAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getIMGREFAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IMGREF__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IMGREF__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IMGREF__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIMGREFAccess().getIDTerminalRuleCall_3()); }
	RULE_ID
{ after(grammarAccess.getIMGREFAccess().getIDTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IMGREF__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IMGREF__Group_0__0__Impl
	rule__IMGREF__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IMGREF__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIMGREFAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getIMGREFAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IMGREF__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IMGREF__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IMGREF__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIMGREFAccess().getSolidusKeyword_0_1()); }

	'/' 

{ after(grammarAccess.getIMGREFAccess().getSolidusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group__0__Impl
	rule__AOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getAAndExpressionParserRuleCall_0()); }
	ruleAAndExpression
{ after(grammarAccess.getAOrExpressionAccess().getAAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getGroup_1()); }
(rule__AOrExpression__Group_1__0)*
{ after(grammarAccess.getAOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1__0__Impl
	rule__AOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getGroup_1_0()); }
(rule__AOrExpression__Group_1_0__0)
{ after(grammarAccess.getAOrExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__AOrExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getAOrExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOrExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getGroup_1_0_0()); }
(rule__AOrExpression__Group_1_0_0__0)
{ after(grammarAccess.getAOrExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AOrExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1_0_0__0__Impl
	rule__AOrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAOrExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOrExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AOrExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAOrExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group__0__Impl
	rule__AAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getAEqualityExpressionParserRuleCall_0()); }
	ruleAEqualityExpression
{ after(grammarAccess.getAAndExpressionAccess().getAEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getGroup_1()); }
(rule__AAndExpression__Group_1__0)*
{ after(grammarAccess.getAAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1__0__Impl
	rule__AAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getGroup_1_0()); }
(rule__AAndExpression__Group_1_0__0)
{ after(grammarAccess.getAAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__AAndExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getAAndExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getGroup_1_0_0()); }
(rule__AAndExpression__Group_1_0_0__0)
{ after(grammarAccess.getAAndExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AAndExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1_0_0__0__Impl
	rule__AAndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAAndExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAndExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AAndExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAAndExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AEqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group__0__Impl
	rule__AEqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getARelationalExpressionParserRuleCall_0()); }
	ruleARelationalExpression
{ after(grammarAccess.getAEqualityExpressionAccess().getARelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AEqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getGroup_1()); }
(rule__AEqualityExpression__Group_1__0)*
{ after(grammarAccess.getAEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AEqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group_1__0__Impl
	rule__AEqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getGroup_1_0()); }
(rule__AEqualityExpression__Group_1_0__0)
{ after(grammarAccess.getAEqualityExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AEqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__AEqualityExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getAEqualityExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AEqualityExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getGroup_1_0_0()); }
(rule__AEqualityExpression__Group_1_0_0__0)
{ after(grammarAccess.getAEqualityExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AEqualityExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group_1_0_0__0__Impl
	rule__AEqualityExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAEqualityExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AEqualityExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AEqualityExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AEqualityExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAEqualityExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ARelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group__0__Impl
	rule__ARelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getAOtherOperatorExpressionParserRuleCall_0()); }
	ruleAOtherOperatorExpression
{ after(grammarAccess.getARelationalExpressionAccess().getAOtherOperatorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getGroup_1()); }
(rule__ARelationalExpression__Group_1__0)*
{ after(grammarAccess.getARelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ARelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1__0__Impl
	rule__ARelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getGroup_1_0()); }
(rule__ARelationalExpression__Group_1_0__0)
{ after(grammarAccess.getARelationalExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__ARelationalExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getARelationalExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ARelationalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getGroup_1_0_0()); }
(rule__ARelationalExpression__Group_1_0_0__0)
{ after(grammarAccess.getARelationalExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ARelationalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1_0_0__0__Impl
	rule__ARelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getARelationalExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARelationalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__ARelationalExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getARelationalExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpCompare__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpCompare__Group_1__0__Impl
	rule__OpCompare__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); }

	'<' 

{ after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpCompare__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpCompare__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpCompare__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); }

	'=' 

{ after(grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOtherOperatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group__0__Impl
	rule__AOtherOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getAAdditiveExpressionParserRuleCall_0()); }
	ruleAAdditiveExpression
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getAAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOtherOperatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getGroup_1()); }
(rule__AOtherOperatorExpression__Group_1__0)*
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOtherOperatorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group_1__0__Impl
	rule__AOtherOperatorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getGroup_1_0()); }
(rule__AOtherOperatorExpression__Group_1_0__0)
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOtherOperatorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__AOtherOperatorExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOtherOperatorExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getGroup_1_0_0()); }
(rule__AOtherOperatorExpression__Group_1_0_0__0)
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AOtherOperatorExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group_1_0_0__0__Impl
	rule__AOtherOperatorExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOtherOperatorExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOtherOperatorExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AOtherOperatorExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAOtherOperatorExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpOther__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_2__0__Impl
	rule__OpOther__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); }

	'>' 

{ after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpOther__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); }

	'..' 

{ after(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpOther__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_5__0__Impl
	rule__OpOther__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); }

	'>' 

{ after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpOther__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getAlternatives_5_1()); }
(rule__OpOther__Alternatives_5_1)
{ after(grammarAccess.getOpOtherAccess().getAlternatives_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpOther__Group_5_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_5_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_5_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGroup_5_1_0_0()); }
(rule__OpOther__Group_5_1_0_0__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_5_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OpOther__Group_5_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_5_1_0_0__0__Impl
	rule__OpOther__Group_5_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_5_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); }

	'>' 

{ after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpOther__Group_5_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_5_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_5_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); }

	'>' 

{ after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpOther__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_6__0__Impl
	rule__OpOther__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); }

	'<' 

{ after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpOther__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getAlternatives_6_1()); }
(rule__OpOther__Alternatives_6_1)
{ after(grammarAccess.getOpOtherAccess().getAlternatives_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpOther__Group_6_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_6_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_6_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getGroup_6_1_0_0()); }
(rule__OpOther__Group_6_1_0_0__0)
{ after(grammarAccess.getOpOtherAccess().getGroup_6_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OpOther__Group_6_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_6_1_0_0__0__Impl
	rule__OpOther__Group_6_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_6_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); }

	'<' 

{ after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpOther__Group_6_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpOther__Group_6_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpOther__Group_6_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); }

	'<' 

{ after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group__0__Impl
	rule__AAdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getAMultiplicativeExpressionParserRuleCall_0()); }
	ruleAMultiplicativeExpression
{ after(grammarAccess.getAAdditiveExpressionAccess().getAMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getGroup_1()); }
(rule__AAdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1__0__Impl
	rule__AAdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getGroup_1_0()); }
(rule__AAdditiveExpression__Group_1_0__0)
{ after(grammarAccess.getAAdditiveExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__AAdditiveExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getAAdditiveExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAdditiveExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getGroup_1_0_0()); }
(rule__AAdditiveExpression__Group_1_0_0__0)
{ after(grammarAccess.getAAdditiveExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AAdditiveExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1_0_0__0__Impl
	rule__AAdditiveExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAAdditiveExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAdditiveExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AAdditiveExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AMultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group__0__Impl
	rule__AMultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getAUnaryOperationParserRuleCall_0()); }
	ruleAUnaryOperation
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getAUnaryOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1()); }
(rule__AMultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AMultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1__0__Impl
	rule__AMultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1_0()); }
(rule__AMultiplicativeExpression__Group_1_0__0)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__AMultiplicativeExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AMultiplicativeExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1_0_0()); }
(rule__AMultiplicativeExpression__Group_1_0_0__0)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AMultiplicativeExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1_0_0__0__Impl
	rule__AMultiplicativeExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getABinaryOperationLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiplicativeExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AMultiplicativeExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AUnaryOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AUnaryOperation__Group_0__0__Impl
	rule__AUnaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOperationAccess().getAUnaryOperationAction_0_0()); }
(

)
{ after(grammarAccess.getAUnaryOperationAccess().getAUnaryOperationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AUnaryOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AUnaryOperation__Group_0__1__Impl
	rule__AUnaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOperationAccess().getFeatureAssignment_0_1()); }
(rule__AUnaryOperation__FeatureAssignment_0_1)
{ after(grammarAccess.getAUnaryOperationAccess().getFeatureAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AUnaryOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AUnaryOperation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOperation__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOperationAccess().getOperandAssignment_0_2()); }
(rule__AUnaryOperation__OperandAssignment_0_2)
{ after(grammarAccess.getAUnaryOperationAccess().getOperandAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








<<<<<<< HEAD
rule__AIntegerTerm__Group__0
=======
rule__ASetLiteral__Group__0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AIntegerTerm__Group__0__Impl
	rule__AIntegerTerm__Group__1
=======
	rule__ASetLiteral__Group__0__Impl
	rule__ASetLiteral__Group__1
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AIntegerTerm__Group__0__Impl
=======
rule__ASetLiteral__Group__0__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAIntegerTermAccess().getValueAssignment_0()); }
(rule__AIntegerTerm__ValueAssignment_0)
{ after(grammarAccess.getAIntegerTermAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIntegerTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIntegerTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIntegerTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
=======
{ before(grammarAccess.getASetLiteralAccess().getASetLiteralAction_0()); }
>>>>>>> refs/remotes/origin/PeterWork
(
<<<<<<< HEAD
{ before(grammarAccess.getAIntegerTermAccess().getUnitAssignment_1()); }
(rule__AIntegerTerm__UnitAssignment_1)?
{ after(grammarAccess.getAIntegerTermAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ARealTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARealTerm__Group__0__Impl
	rule__ARealTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}
=======
>>>>>>> refs/remotes/origin/PeterWork

<<<<<<< HEAD
rule__ARealTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARealTermAccess().getValueAssignment_0()); }
(rule__ARealTerm__ValueAssignment_0)
{ after(grammarAccess.getARealTermAccess().getValueAssignment_0()); }
=======
>>>>>>> refs/remotes/origin/PeterWork
)
<<<<<<< HEAD

;
finally {
	restoreStackSize(stackSize);
}


rule__ARealTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARealTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARealTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARealTermAccess().getUnitAssignment_1()); }
(rule__ARealTerm__UnitAssignment_1)?
{ after(grammarAccess.getARealTermAccess().getUnitAssignment_1()); }
=======
{ after(grammarAccess.getASetLiteralAccess().getASetLiteralAction_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD






rule__ASetTerm__Group__0
=======
rule__ASetLiteral__Group__1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__ASetTerm__Group__0__Impl
	rule__ASetTerm__Group__1
=======
	rule__ASetLiteral__Group__1__Impl
	rule__ASetLiteral__Group__2
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ASetTerm__Group__0__Impl
=======
rule__ASetLiteral__Group__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getASetTermAccess().getASetLiteralAction_0()); }
(

)
{ after(grammarAccess.getASetTermAccess().getASetLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group__1__Impl
	rule__ASetTerm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getASetTermAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetTerm__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group__2__Impl
	rule__ASetTerm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getGroup_2()); }
(rule__ASetTerm__Group_2__0)?
{ after(grammarAccess.getASetTermAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetTerm__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getASetTermAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ASetTerm__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group_2__0__Impl
	rule__ASetTerm__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getElementsAssignment_2_0()); }
(rule__ASetTerm__ElementsAssignment_2_0)
{ after(grammarAccess.getASetTermAccess().getElementsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetTerm__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getGroup_2_1()); }
(rule__ASetTerm__Group_2_1__0)*
{ after(grammarAccess.getASetTermAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ASetTerm__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group_2_1__0__Impl
	rule__ASetTerm__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getASetTermAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetTerm__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetTerm__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getElementsAssignment_2_1_1()); }
(rule__ASetTerm__ElementsAssignment_2_1_1)
{ after(grammarAccess.getASetTermAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AListTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AListTerm__Group__0__Impl
	rule__AListTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AListTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListTermAccess().getAListTermAction_0()); }
(

)
{ after(grammarAccess.getAListTermAccess().getAListTermAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AListTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AListTerm__Group__1__Impl
	rule__AListTerm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AListTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListTermAccess().getNumberSignKeyword_1()); }
=======
{ before(grammarAccess.getASetLiteralAccess().getNumberSignKeyword_1()); }
>>>>>>> refs/remotes/origin/PeterWork

	'#' 

<<<<<<< HEAD
{ after(grammarAccess.getAListTermAccess().getNumberSignKeyword_1()); }
=======
{ after(grammarAccess.getASetLiteralAccess().getNumberSignKeyword_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AListTerm__Group__2
=======
rule__ASetLiteral__Group__2
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group__2__Impl
	rule__AListTerm__Group__3
=======
	rule__ASetLiteral__Group__2__Impl
	rule__ASetLiteral__Group__3
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group__2__Impl
=======
rule__ASetLiteral__Group__2__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getLeftSquareBracketKeyword_2()); }
=======
{ before(grammarAccess.getASetLiteralAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getASetLiteralAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetLiteral__Group__3__Impl
	rule__ASetLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetLiteralAccess().getGroup_3()); }
(rule__ASetLiteral__Group_3__0)?
{ after(grammarAccess.getASetLiteralAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetLiteralAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getASetLiteralAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ASetLiteral__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetLiteral__Group_3__0__Impl
	rule__ASetLiteral__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetLiteral__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetLiteralAccess().getElementsAssignment_3_0()); }
(rule__ASetLiteral__ElementsAssignment_3_0)
{ after(grammarAccess.getASetLiteralAccess().getElementsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetLiteral__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetLiteral__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetLiteral__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetLiteralAccess().getGroup_3_1()); }
(rule__ASetLiteral__Group_3_1__0)*
{ after(grammarAccess.getASetLiteralAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ASetLiteral__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetLiteral__Group_3_1__0__Impl
	rule__ASetLiteral__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetLiteral__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetLiteralAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getASetLiteralAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASetLiteral__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASetLiteral__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASetLiteral__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetLiteralAccess().getElementsAssignment_3_1_1()); }
(rule__ASetLiteral__ElementsAssignment_3_1_1)
{ after(grammarAccess.getASetLiteralAccess().getElementsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AListLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AListLiteral__Group__0__Impl
	rule__AListLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AListLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListLiteralAccess().getAListLiteralAction_0()); }
(

)
{ after(grammarAccess.getAListLiteralAccess().getAListLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AListLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AListLiteral__Group__1__Impl
	rule__AListLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AListLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListLiteralAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getAListLiteralAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AListLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AListLiteral__Group__2__Impl
	rule__AListLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AListLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListLiteralAccess().getLeftSquareBracketKeyword_2()); }
>>>>>>> refs/remotes/origin/PeterWork

	'[' 

<<<<<<< HEAD
{ after(grammarAccess.getAListTermAccess().getLeftSquareBracketKeyword_2()); }
=======
{ after(grammarAccess.getAListLiteralAccess().getLeftSquareBracketKeyword_2()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AListTerm__Group__3
=======
rule__AListLiteral__Group__3
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group__3__Impl
	rule__AListTerm__Group__4
=======
	rule__AListLiteral__Group__3__Impl
	rule__AListLiteral__Group__4
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group__3__Impl
=======
rule__AListLiteral__Group__3__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getGroup_3()); }
(rule__AListTerm__Group_3__0)?
{ after(grammarAccess.getAListTermAccess().getGroup_3()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getGroup_3()); }
(rule__AListLiteral__Group_3__0)?
{ after(grammarAccess.getAListLiteralAccess().getGroup_3()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AListTerm__Group__4
=======
rule__AListLiteral__Group__4
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group__4__Impl
=======
	rule__AListLiteral__Group__4__Impl
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group__4__Impl
=======
rule__AListLiteral__Group__4__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getRightSquareBracketKeyword_4()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getRightSquareBracketKeyword_4()); }
>>>>>>> refs/remotes/origin/PeterWork

	']' 

<<<<<<< HEAD
{ after(grammarAccess.getAListTermAccess().getRightSquareBracketKeyword_4()); }
=======
{ after(grammarAccess.getAListLiteralAccess().getRightSquareBracketKeyword_4()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}












<<<<<<< HEAD
rule__AListTerm__Group_3__0
=======
rule__AListLiteral__Group_3__0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group_3__0__Impl
	rule__AListTerm__Group_3__1
=======
	rule__AListLiteral__Group_3__0__Impl
	rule__AListLiteral__Group_3__1
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group_3__0__Impl
=======
rule__AListLiteral__Group_3__0__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getElementsAssignment_3_0()); }
(rule__AListTerm__ElementsAssignment_3_0)
{ after(grammarAccess.getAListTermAccess().getElementsAssignment_3_0()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getElementsAssignment_3_0()); }
(rule__AListLiteral__ElementsAssignment_3_0)
{ after(grammarAccess.getAListLiteralAccess().getElementsAssignment_3_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AListTerm__Group_3__1
=======
rule__AListLiteral__Group_3__1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group_3__1__Impl
=======
	rule__AListLiteral__Group_3__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group_3__1__Impl
=======
rule__AListLiteral__Group_3__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getGroup_3_1()); }
(rule__AListTerm__Group_3_1__0)*
{ after(grammarAccess.getAListTermAccess().getGroup_3_1()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getGroup_3_1()); }
(rule__AListLiteral__Group_3_1__0)*
{ after(grammarAccess.getAListLiteralAccess().getGroup_3_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}






<<<<<<< HEAD
rule__AListTerm__Group_3_1__0
=======
rule__AListLiteral__Group_3_1__0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group_3_1__0__Impl
	rule__AListTerm__Group_3_1__1
=======
	rule__AListLiteral__Group_3_1__0__Impl
	rule__AListLiteral__Group_3_1__1
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group_3_1__0__Impl
=======
rule__AListLiteral__Group_3_1__0__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getCommaKeyword_3_1_0()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getCommaKeyword_3_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork

	',' 

<<<<<<< HEAD
{ after(grammarAccess.getAListTermAccess().getCommaKeyword_3_1_0()); }
=======
{ after(grammarAccess.getAListLiteralAccess().getCommaKeyword_3_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AListTerm__Group_3_1__1
=======
rule__AListLiteral__Group_3_1__1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AListTerm__Group_3_1__1__Impl
=======
	rule__AListLiteral__Group_3_1__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AListTerm__Group_3_1__1__Impl
=======
rule__AListLiteral__Group_3_1__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAListTermAccess().getElementsAssignment_3_1_1()); }
(rule__AListTerm__ElementsAssignment_3_1_1)
{ after(grammarAccess.getAListTermAccess().getElementsAssignment_3_1_1()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getElementsAssignment_3_1_1()); }
(rule__AListLiteral__ElementsAssignment_3_1_1)
{ after(grammarAccess.getAListLiteralAccess().getElementsAssignment_3_1_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AParenthesizedExpression__Group__0__Impl
	rule__AParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getAParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AParenthesizedExpression__Group__1__Impl
	rule__AParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAParenthesizedExpressionAccess().getAExpressionParserRuleCall_1()); }
	ruleAExpression
{ after(grammarAccess.getAParenthesizedExpressionAccess().getAExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getAParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ABooleanLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABooleanLiteral__Group__0__Impl
	rule__ABooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABooleanLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getABooleanLiteralAccess().getBooleanLiteralAction_0()); }
=======
{ before(grammarAccess.getABooleanLiteralAccess().getABooleanLiteralAction_0()); }
>>>>>>> refs/remotes/origin/PeterWork
(

)
<<<<<<< HEAD
{ after(grammarAccess.getABooleanLiteralAccess().getBooleanLiteralAction_0()); }
=======
{ after(grammarAccess.getABooleanLiteralAccess().getABooleanLiteralAction_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABooleanLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABooleanLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABooleanLiteralAccess().getAlternatives_1()); }
(rule__ABooleanLiteral__Alternatives_1)
{ after(grammarAccess.getABooleanLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ANullLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANullLiteral__Group__0__Impl
	rule__ANullLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ANullLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANullLiteralAccess().getANullLiteralAction_0()); }
(

)
{ after(grammarAccess.getANullLiteralAccess().getANullLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ANullLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANullLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ANullLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANullLiteralAccess().getNullKeyword_1()); }

	'null' 

{ after(grammarAccess.getANullLiteralAccess().getNullKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






<<<<<<< HEAD



rule__AADLPROPERTYREFERENCE__Group__0
=======
rule__ANumberLiteral__Group__0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AADLPROPERTYREFERENCE__Group__0__Impl
	rule__AADLPROPERTYREFERENCE__Group__1
=======
	rule__ANumberLiteral__Group__0__Impl
	rule__ANumberLiteral__Group__1
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group__0__Impl
=======
rule__ANumberLiteral__Group__0__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_0()); }
=======
{ before(grammarAccess.getANumberLiteralAccess().getValueAssignment_0()); }
(rule__ANumberLiteral__ValueAssignment_0)
{ after(grammarAccess.getANumberLiteralAccess().getValueAssignment_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group__1
=======
rule__ANumberLiteral__Group__1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AADLPROPERTYREFERENCE__Group__1__Impl
=======
	rule__ANumberLiteral__Group__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group__1__Impl
=======
rule__ANumberLiteral__Group__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup_1()); }
(rule__AADLPROPERTYREFERENCE__Group_1__0)?
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup_1()); }
=======
{ before(grammarAccess.getANumberLiteralAccess().getUnitAssignment_1()); }
(rule__ANumberLiteral__UnitAssignment_1)?
{ after(grammarAccess.getANumberLiteralAccess().getUnitAssignment_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}






<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group_1__0
=======
rule__AStringLiteral__Group__0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AADLPROPERTYREFERENCE__Group_1__0__Impl
	rule__AADLPROPERTYREFERENCE__Group_1__1
=======
	rule__AStringLiteral__Group__0__Impl
	rule__AStringLiteral__Group__1
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group_1__0__Impl
=======
rule__AStringLiteral__Group__0__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getColonColonKeyword_1_0()); }
=======
{ before(grammarAccess.getAStringLiteralAccess().getAStringLiteralAction_0()); }
(
>>>>>>> refs/remotes/origin/PeterWork

<<<<<<< HEAD
	'::' 

{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getColonColonKeyword_1_0()); }
=======
)
{ after(grammarAccess.getAStringLiteralAccess().getAStringLiteralAction_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group_1__1
=======
rule__AStringLiteral__Group__1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
	rule__AADLPROPERTYREFERENCE__Group_1__1__Impl
=======
	rule__AStringLiteral__Group__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AADLPROPERTYREFERENCE__Group_1__1__Impl
=======
rule__AStringLiteral__Group__1__Impl
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_1_1()); }
=======
{ before(grammarAccess.getAStringLiteralAccess().getValueAssignment_1()); }
(rule__AStringLiteral__ValueAssignment_1)
{ after(grammarAccess.getAStringLiteralAccess().getValueAssignment_1()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
=======







rule__AADLPROPERTYREFERENCE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AADLPROPERTYREFERENCE__Group__0__Impl
	rule__AADLPROPERTYREFERENCE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AADLPROPERTYREFERENCE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AADLPROPERTYREFERENCE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AADLPROPERTYREFERENCE__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AADLPROPERTYREFERENCE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup_1()); }
(rule__AADLPROPERTYREFERENCE__Group_1__0)?
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AADLPROPERTYREFERENCE__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AADLPROPERTYREFERENCE__Group_1__0__Impl
	rule__AADLPROPERTYREFERENCE__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AADLPROPERTYREFERENCE__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getColonColonKeyword_1_0()); }

	'::' 

{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getColonColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AADLPROPERTYREFERENCE__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AADLPROPERTYREFERENCE__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AADLPROPERTYREFERENCE__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getAADLPROPERTYREFERENCEAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


>>>>>>> refs/remotes/origin/PeterWork






rule__Number__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
(rule__Number__Alternatives_1_0)
{ after(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_1_1()); }
(rule__Number__Group_1_1__0)?
{ after(grammarAccess.getNumberAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Number__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group_1_1__0__Impl
	rule__Number__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); }

	'.' 

{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
(rule__Number__Alternatives_1_1_1)
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Description__DescriptionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionAccess().getDescriptionDescriptionElementParserRuleCall_1_0()); }
	ruleDescriptionElement{ after(grammarAccess.getDescriptionAccess().getDescriptionDescriptionElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DescriptionElement__TextAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionElementAccess().getTextSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getDescriptionElementAccess().getTextSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DescriptionElement__ShowValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionElementAccess().getShowValueShowValueParserRuleCall_1_0()); }
	ruleShowValue{ after(grammarAccess.getDescriptionElementAccess().getShowValueShowValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DescriptionElement__ThisTargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionElementAccess().getThisTargetThisKeyword_2_0()); }
(
{ before(grammarAccess.getDescriptionElementAccess().getThisTargetThisKeyword_2_0()); }

	'this' 

{ after(grammarAccess.getDescriptionElementAccess().getThisTargetThisKeyword_2_0()); }
)

{ after(grammarAccess.getDescriptionElementAccess().getThisTargetThisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DescriptionElement__ImageAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDescriptionElementAccess().getImageImageReferenceParserRuleCall_3_0()); }
	ruleImageReference{ after(grammarAccess.getDescriptionElementAccess().getImageImageReferenceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

















<<<<<<< HEAD
rule__AVariableReference__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVariableReferenceAccess().getVariableAVariableDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getAVariableReferenceAccess().getVariableAVariableDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAVariableReferenceAccess().getVariableAVariableDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAVariableReferenceAccess().getVariableAVariableDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}
=======
>>>>>>> refs/remotes/origin/PeterWork

rule__ShowValue__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShowValueAccess().getRefAVariableDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getShowValueAccess().getRefAVariableDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getShowValueAccess().getRefAVariableDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getShowValueAccess().getRefAVariableDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShowValue__UnitAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShowValueAccess().getUnitUnitLiteralCrossReference_1_1_0()); }
(
{ before(grammarAccess.getShowValueAccess().getUnitUnitLiteralIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getShowValueAccess().getUnitUnitLiteralIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getShowValueAccess().getUnitUnitLiteralCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImageReference__ImgfileAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageReferenceAccess().getImgfileIMGREFParserRuleCall_1_0()); }
	ruleIMGREF{ after(grammarAccess.getImageReferenceAccess().getImgfileIMGREFParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); }
	ruleOpOr{ after(grammarAccess.getAOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getRightOperandAAndExpressionParserRuleCall_1_1_0()); }
	ruleAAndExpression{ after(grammarAccess.getAOrExpressionAccess().getRightOperandAAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); }
	ruleOpAnd{ after(grammarAccess.getAAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getRightOperandAEqualityExpressionParserRuleCall_1_1_0()); }
	ruleAEqualityExpression{ after(grammarAccess.getAAndExpressionAccess().getRightOperandAEqualityExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getFeatureOpEqualityParserRuleCall_1_0_0_1_0()); }
	ruleOpEquality{ after(grammarAccess.getAEqualityExpressionAccess().getFeatureOpEqualityParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AEqualityExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAEqualityExpressionAccess().getRightOperandARelationalExpressionParserRuleCall_1_1_0()); }
	ruleARelationalExpression{ after(grammarAccess.getAEqualityExpressionAccess().getRightOperandARelationalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0()); }
	ruleOpCompare{ after(grammarAccess.getARelationalExpressionAccess().getFeatureOpCompareParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getRightOperandAOtherOperatorExpressionParserRuleCall_1_1_0()); }
	ruleAOtherOperatorExpression{ after(grammarAccess.getARelationalExpressionAccess().getRightOperandAOtherOperatorExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); }
	ruleOpOther{ after(grammarAccess.getAOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOtherOperatorExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOtherOperatorExpressionAccess().getRightOperandAAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAAdditiveExpression{ after(grammarAccess.getAOtherOperatorExpressionAccess().getRightOperandAAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); }
	ruleOpAdd{ after(grammarAccess.getAAdditiveExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getRightOperandAMultiplicativeExpressionParserRuleCall_1_1_0()); }
	ruleAMultiplicativeExpression{ after(grammarAccess.getAAdditiveExpressionAccess().getRightOperandAMultiplicativeExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getFeatureOpMultiParserRuleCall_1_0_0_1_0()); }
	ruleOpMulti{ after(grammarAccess.getAMultiplicativeExpressionAccess().getFeatureOpMultiParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getRightOperandAUnaryOperationParserRuleCall_1_1_0()); }
	ruleAUnaryOperation{ after(grammarAccess.getAMultiplicativeExpressionAccess().getRightOperandAUnaryOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOperation__FeatureAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); }
	ruleOpUnary{ after(grammarAccess.getAUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOperation__OperandAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOperationAccess().getOperandAUnaryOperationParserRuleCall_0_2_0()); }
	ruleAUnaryOperation{ after(grammarAccess.getAUnaryOperationAccess().getOperandAUnaryOperationParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AIntegerTerm__ValueAssignment_0
=======
rule__ASetLiteral__ElementsAssignment_3_0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAIntegerTermAccess().getValueAIntParserRuleCall_0_0()); }
	ruleAInt{ after(grammarAccess.getAIntegerTermAccess().getValueAIntParserRuleCall_0_0()); }
=======
{ before(grammarAccess.getASetLiteralAccess().getElementsAExpressionParserRuleCall_3_0_0()); }
	ruleAExpression{ after(grammarAccess.getASetLiteralAccess().getElementsAExpressionParserRuleCall_3_0_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__AIntegerTerm__UnitAssignment_1
=======
rule__ASetLiteral__ElementsAssignment_3_1_1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getAIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
(
{ before(grammarAccess.getAIntegerTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAIntegerTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
=======
{ before(grammarAccess.getASetLiteralAccess().getElementsAExpressionParserRuleCall_3_1_1_0()); }
	ruleAExpression{ after(grammarAccess.getASetLiteralAccess().getElementsAExpressionParserRuleCall_3_1_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ARealTerm__ValueAssignment_0
=======
rule__AListLiteral__ElementsAssignment_3_0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getARealTermAccess().getValueARealParserRuleCall_0_0()); }
	ruleAReal{ after(grammarAccess.getARealTermAccess().getValueARealParserRuleCall_0_0()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getElementsAExpressionParserRuleCall_3_0_0()); }
	ruleAExpression{ after(grammarAccess.getAListLiteralAccess().getElementsAExpressionParserRuleCall_3_0_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ARealTerm__UnitAssignment_1
=======
rule__AListLiteral__ElementsAssignment_3_1_1
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
<<<<<<< HEAD
(
{ before(grammarAccess.getARealTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
=======
>>>>>>> refs/remotes/origin/PeterWork
(
<<<<<<< HEAD
{ before(grammarAccess.getARealTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getARealTermAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getARealTermAccess().getUnitUnitLiteralCrossReference_1_0()); }
=======
{ before(grammarAccess.getAListLiteralAccess().getElementsAExpressionParserRuleCall_3_1_1_0()); }
	ruleAExpression{ after(grammarAccess.getAListLiteralAccess().getElementsAExpressionParserRuleCall_3_1_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD



rule__ASetTerm__ElementsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getElementsAExpressionParserRuleCall_2_0_0()); }
	ruleAExpression{ after(grammarAccess.getASetTermAccess().getElementsAExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASetTerm__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASetTermAccess().getElementsAExpressionParserRuleCall_2_1_1_0()); }
	ruleAExpression{ after(grammarAccess.getASetTermAccess().getElementsAExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AListTerm__ElementsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListTermAccess().getElementsAExpressionParserRuleCall_3_0_0()); }
	ruleAExpression{ after(grammarAccess.getAListTermAccess().getElementsAExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AListTerm__ElementsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListTermAccess().getElementsAExpressionParserRuleCall_3_1_1_0()); }
	ruleAExpression{ after(grammarAccess.getAListTermAccess().getElementsAExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABooleanLiteral__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
(
{ before(grammarAccess.getABooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
=======
rule__ABooleanLiteral__IsTrueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
(
{ before(grammarAccess.getABooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork

	'true' 

<<<<<<< HEAD
{ after(grammarAccess.getABooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
=======
{ after(grammarAccess.getABooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

<<<<<<< HEAD
{ after(grammarAccess.getABooleanLiteralAccess().getValueTrueKeyword_1_0_0()); }
=======
{ after(grammarAccess.getABooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
>>>>>>> refs/remotes/origin/PeterWork
)

;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__StringTerm__ValueAssignment
=======
rule__ANumberLiteral__ValueAssignment_0
>>>>>>> refs/remotes/origin/PeterWork
    @init {
		int stackSize = keepStackSize();
    }
:
(
<<<<<<< HEAD
{ before(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); }
	ruleNoQuoteString{ after(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DIGIT+;

fragment RULE_INT_EXPONENT : ('e'|'E') '+'? RULE_DIGIT+;

RULE_REAL_LIT : RULE_DIGIT+ ('_' RULE_DIGIT+)* '.' RULE_DIGIT+ ('_' RULE_DIGIT+)* RULE_EXPONENT?;

RULE_INTEGER_LIT : RULE_DIGIT+ ('_' RULE_DIGIT+)* ('#' RULE_BASED_INTEGER '#' RULE_INT_EXPONENT?|RULE_INT_EXPONENT?);

fragment RULE_DIGIT : '0'..'9';

fragment RULE_EXTENDED_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_BASED_INTEGER : RULE_EXTENDED_DIGIT ('_'? RULE_EXTENDED_DIGIT)*;
=======
{ before(grammarAccess.getANumberLiteralAccess().getValueNumberParserRuleCall_0_0()); }
	ruleNumber{ after(grammarAccess.getANumberLiteralAccess().getValueNumberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANumberLiteral__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANumberLiteralAccess().getUnitUnitLiteralCrossReference_1_0()); }
(
{ before(grammarAccess.getANumberLiteralAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getANumberLiteralAccess().getUnitUnitLiteralIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getANumberLiteralAccess().getUnitUnitLiteralCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AStringLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

>>>>>>> refs/remotes/origin/PeterWork

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


