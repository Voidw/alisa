chapter:Introduction[Introduction]

Architecture-led Incremental System Assurance (ALISA) is an incremental life-cycle assurance workbench
for high-assurance software-reliant systems. It utlizes architecture abstractions in models to manage
requirements across multiple layer of a system architecture and the verification of a system implementation
agains tthese requirements. The workbench complements the capabilities of an architecture-centric virtual
system integration workbench for the development of such systems.

Alisa utilizes SAE AADL as an architecture modeling language. Alisa provides several notations for users
to specify requirements, verification plans, and execute verification plans incrementally througout
the life cycle.

img[images/doublev.png][Incrementally Evolving and Maintaining the Assurance Evidence][][]

The three notations are:
ul[
	item[e[ReqSpec:] a notation for specifying stakeholder goals and system requirements.]
	item[e[Verify:] a notation for registering verification methods, specifying verification activities,
	and verification plans with claims that requirements are satisfied by the results of verivication
	activities.]
	item[e[Alisa:] a notation for defining assurance tasks to produce assurance evidence from execution
	of verification plans configured to specific perspectives.]
	item[e[Assure:] a notation that represents the assurance evidence, i.e., the results of executing verification
	plans on a system instance. Models in this notation are automatically generated from an asurance
	task specification.]
]

These notations are supported by additional notations:
ul[
item[e[Organization:] a notation for defining the stakeholders of a system.]
item[e[Categories:] a notation for defining  requirement categories, verification categories, and selection
categories]
]

The notations use a simple syntax. Each construct introduces an instance of a particular Alisa concept,
which we will refer to as e[entity], 
and identifies it with a unique name. The name is a identifier that is qualified with the name of a container
entity, such as a library. 

As the identifier may take the form of a label such as Req1, each entity optionally also has a title
field that provides a short descriptive label. This label may be used instead of or an additon to the identifier for
presentation in views.

An entity may identify a model element that it is associated with. 

An entity may contain a number of attributes, i.e., labelled values or references to other model elements.
These are enclosed in square brackets.

When describing the syntax of Alisa notations we will use BNF-like syntax markers to indicate optional
constructs, such as e[( construct )?] for an optional construct, e[( construct )*] for a construct repeated
zero or more times, e[( construct )+] for a construct repeated one or more times, and e[ a | b ] to represent altenatives. 
Grammr rules are labeled by e[<conceptname> ::=] and rules may be referred by e[<conceptname>]. The rerefence
means that the construct is to be inserted in place as nested entity within another construct.

We use the following approach for cross references:
ul[
item[References to AADL classifiers use the AADL2 syntax to qualify the classifier name with the package name,
e.g., my::pack::sys.impl for a system implementation reference.]
item[Within requirements the user may reference
a feature within a classifier. this is done by the feature name, which is resolved relative to the classifier
reference of the enclosing Requirement specifications container.]
item[References to objects in the Alisa languages, e.g., requirements and goals, use a "." separator
in the qualified name path, e.g., systemreqs.r1. This includes references to verification activities,
verification methods, verification plans, and to stakeholders. In many cases the references do not have to be qualified as the context uniquely identifies to target. 
For example, the requirement reference of a claim is within the scope of the system requirements container identified by a verification plan.]
item[User defined categories are globally known by their name. Categories of different kinds (requirement,
verification, selection) can use the same name as they only have to be unique within their kind.]
]

Note that we will be providing a user interface that presents the Alisa information in a graphical or
structured navigator view with the details of a selected entity shown in a properties view. The user
will be able to create entities within the navigator view and edit its attributes in the properties
view. In other words, in the future users of Alisa may not have to learn the details of the textual syntax of the Alisa notations.
