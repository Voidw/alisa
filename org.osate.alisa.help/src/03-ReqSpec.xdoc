chapter:ReqSpec[Requirement Specification]

e[ReqSpec] is a notation for specifying e[stakeholder goals] and e[system requirements]. ReqSpecs are
created in files with the extension e[reqspec].

Stakeholder goals represent the interests of stakeholders, also known as stakeholder requirements.
They may be specified ambiguously, may ot be verifiable, and
may be in conflict with each other. We use the term e[goal] to refer to the concept of stakeholder requirements. 

System requirements represent a system specification that becomes a contract that system implementation
will be verified against. In other words, system requirements may not have conflicts and must be verifiable.
We will use the term e[requirement] to refer to this concept.

ReqSpec can be used in two ways to organize stakeholder goals and system requirements.
ul[
item[to reflect the structure of a requirement documents. This representation will be typically used
to import existing requirement documents into the Alisa workbench. It may also be used to define a reporting
structure for goals and requirements different from goal and requirement specifications aligned with
the architecture expressed in the AADL model. This allows us to interface with existing document-based requirement engineering
practices with traceability tools such as DOORS. ]
item[to align goal and requirement specifications in an e[architecture-led way] with an AADL model of the system.]
]

section:Goals[Stakeholder Goals]

This section describes the elements of a e[stakeholder goal specification]. 

A e[goal] construct has the following syntax:

code[ReqSpec][
<Goal>::=
goal goalname
	( :  "short descriptive title" )?
	( for ComponentElement | "Target description" )?
	\[  
	 (category ( safety )+ )?
	 (description  "one or more lines of descriptoive text" )? 
	 (rationale "explanation" )? 
	 (refines ( docx.goal1 )+ )? 
	 (conflicts with docx.goal15 )+)? 
	 (stakeholder  ( SEI.Feiler )+ )?
	 (see document requirement ( ReqDoc.Req14 )+)?
	 (see document ( filepath/file.doc#path.within.doc )+)? 
	 ( <change Uncertainty> )?  
	\]
]

e[Note:] The items declared between the square brackets can be specified in any order.

ul[
item[The e[for] attribute either points to an element in an AADL componenbt classifier (the classifier
itself is identified in the enclosing container), or it provides a string description of the target of
the goal. If absent the goal applies to any system component.]
item[The e[category] attribute identifies one or more requirment categories. Requirement categories are user-definable
and existing category definitions are extensible (see ref:ReqCategory[User-definable Requirement Categories]).
]
item[The e[description] attribute allows user to provide a description that spans multiple lines. The description consists of a sequence of strings,
name of the model element the requirement applies to (e[this]). ]
item[The e[rationale] attributes is a text field. The rationale, if present, can include a reference
to stakeholders.]
item[The e[refines] attribute is a list of one or more references to other goals. The referenced goal
is being refined by the given goal. The referenced goal
is identified by its qualified name.]
item[The e[conflicts with] attribute identifies goals this goal conflicts with. The references uses a
qualified name.]
item[The e[stakeholder] attribute refers to a steakholder. Stakeholders are defined in a separate files
using the e[organization] notation. The stakeholder is qualified by the organization name.]
item[The e[see document requirement] attribute identifies a stakeholder requirement in an imported stakeholder
requirement document.]
item[The e[see document] attribute is a reference to an external document that may not be in a format
importable to Alisa.]
item[The e[uncertainty] attribute specifies a potential requirement change ref:Uncertainty[uncertainty].]
]

Goals can used to represent stakeholder requirements imported from existing documents, or aligned with
the architecture model using the architecture-led requirement specification process. 

section:Requirements[System Requirements]

This section describes the elements of a e[system requirement specification]. 

A e[requirement] construct has the following syntax:

code[ReqSpec][
<Requirement> ::=
requirement reqname
	( :  "short descriptive title" )?
	( for ComponentElement | "Target description" )?
	\[  
	 (category ( safety )+ )?
	 (description  this " shall not exceed " limit%sec " latency")? 
	 (val limit = 200 ms )* 
	 (compute actualbudget )*
	 ( <Requirement Predicate> )*
	 (rationale "explanation")? 
	 (mitigates ( model.hazard3 )+ )? 
	 (refines ( docx.req1 )+ )? 
	 (see goal (docx.goal2 )+ )?
	 (see document goal ( ReqDoc.goal12 )+)?
	 (see document requirement ( ReqDoc.Req14 )+)?
	 (see document ( filepath/file.doc#path.within.doc )+)? 
	 ( <change Uncertainty> )?  
	\]
]

e[Note:] The items declared between the square brackets can be specified in any order.

ul[
item[The e[for] attribute either points to an element in an AADL componenbt classifier (the classifier
itself is identified in the enclosing container), or it provides a string description of the target of
the goal.]
item[The e[category] attribute identifies one or more requirment category. Requirement categories are user-definable
and existing category definitions are extensible (see ref:ReqCategory[User-definable Requirement Categories]).
]
item[The e[description] attribute allows user to provide a description that spans multiple lines. The description consists of a sequence of strings,
name of the model element the requirement applies to (e[this]), a reference to one of the constants defined in the requirement. The optional e[%ID] is used to specify the measurement unit to be
used for showing the value of numeric constants.]

item[The e[val] field allows users to define values to be used in the requirement specification. These
may be values that the user may want to change and are used in more than one location. The values can be numeric,
optionally with measurement unit, ranges, a string, or a references to an AADL property, e.g., e[@SEI::MIPSCapacity]. They can be referenced
in the predicate of the e[assertions] or in the e[description].
]
item[The e[compute] field allows users to introduce variables whose value will be computed by a verification
method that is identified in a verificaiton activity declaration. This variable can then be referenced in assertion expressions.]
item[The e[rationale] attributes is a multi line text field]
item[The e[mitigates] attributes specifies a reference to a hazard expressed in EMV2 that is being mitigated
by the requirement.]
item[The e[refines] attribute is a list of one or more references to other requirements of the same component that this requirement refines. The prupose of requirement refinement is to achieve a verifable requirement specification.
The referenced requirement is identified by its qualified name.]
item[The e[see goal] attributes provides traceability to stakeholder goals expressed in ALRS form that relate to the requirement.]
item[The e[see document goal] attribute refers to a stakeholder goal documented in a stakeholder requirement
document and imported into Alisa.]
item[The e[see document requirement] attribute identifies a stakeholder requirement in an imported stakeholder
requirement document.]
item[The e[see document] attribute is a reference to an external document that may not be in a format
importable to Alisa.]
item[The e[uncertainty] attribute specifies a potential requirement change ref:Uncertainty[uncertainty].]
]

code[ReqSpec][
<Requirement Predicate> ::=
	text "informal specification"
	| assert value  <expression involving constant e[val] and e[compute] variables>
	| input assumption <agree styl Xbase expression or e[as] reference into Agree subclause>
	| output guarantee <agree styl Xbase expression or e[as] reference into Agree subclause>
	| invariant <agree style Xbase expression or e[as] reference into Agree subclause>
	| predicate <general XBase expression>
]

We distinguish between different types of assertions.
ul[
item[The e[text] assertions allows the user to specify a condition informally as a text string.
This is useful if the user has not figured out yet how to specify the requirement more formally.]

item[The e[assert value] assertion specifies a condition that a computed value must satisfy. Typically
this is used to specify that some computed numeric value, e.g., end to end latency, stays within limits.
Users can refer to the e[val] constants and e[compute] variables of the requirement or its enclosing
requirement specification container. If the computed value is to be within a range users can specify
the range condition as follows: e[ minval..maxval.contains(actual)]. Otherwise esxpressions with comparison
operators can be used. The syntax currently allows the user to specify any e[XBase] expression. ]

item[The e[assert value] expression may optionally include a mapping of e[val] constants to AADL properties
to reflect the fact that this constant is expected to be represent in the model by this property. This
is useful if an analysis (verification) method expects to find the data reflected as property. e[note:]
this may move to the verificication activity as an assumption. ]

item[The e[input assumption] assertion represents assumptions made about incoming information. Users
can express these assumptions as an e[XBase]
expression, or by referring to an e[assume] statement in an e[agree] subclause in the model.]

item[The e[output guarantee] assertion represents guarantees made about outgoing information. Users
can express these guarantees as an e[XBase]
expression, or by referring to a e[guarantee] statement in an e[agree] subclause in the model.]

item[The e[invariant] assertion represents an invariant equation e[eq] that must hold between inputs and outputs.
Users
can express these guarantees as an e[XBase]
expression, or by referring to an e[eq] or other statement in an e[agree] subclause in the model.]

item[The e[predicate] assertions allows the user to specify a condition in e[XBase].]

]


Requirements can used to represent system requirements imported from existing documents, or aligned with
the architecture model using the architecture-led requirement specification process. 


section:RequirementDocuments[Requirement Documents]

Users can import existing stakeholder requirment and system requirement documents. Users can also create
goals and requirements following the structure of a requirement document.

The following constructs are available to represent such requirement documents. e[ReqDocument] represents
a complete text-based requirement document. e[DocumentSection] represents a document section. It can
contain goals, requirements, and nested document sections.

code[ReqSpec][
<RequirementDocument> ::=
document docname ( : "myTitle")?
 (description MultiLineString)? 
\[ 
	<DocumentSection>
\]


<DocumentSection> ::=
section section1 ( : "my title")?
 (description Description)? 
\[  
	( <Goal> | <Requirement> |  <DocumentSection> )+ )*
\]
]

e[Note:] Requirements in requirement documents are qualified by the name of the enclosing ReqDocument.
Document sections to not contribute to the qualified name.

section:ALRS[Architecture-led Goal and Requirement Specifications]

Users can specify goals for a system in an architecture-led way. They do so in the context of an AADL
model that contains the component type declaration of the system of interest. The definition of a system
process by the French System Engineering Society, illustrated in the figure below, together with a utility
tree from the SEI QAW or ATAM provide guidance on ensuring coverage when developing a system requirement
specification.

img[images/cpret.png][System Process Requirements and Utility Trees][][] 

The following constructs are available to define stakeholder goals.

code[ReqSpec][
<StakeholderGoals> ::=
stakeholder goals SysGoals (':' "short title" )?
( for mypack::GPSDevice | "Target description" )?
 (description Description)? 
\[ 
	( <GoalFolder> | <Goal> )*
\]

<Goalfolder> ::=
folder name (':' "my title text")?
\[ 
	( <Goal>< |  GoalFolder> )*
\]
]

The next construct allow users to define libraries of requirements for components and combine them into
a requirement specification for a system.

code[ReqSpec][
<ReqSpecs> ::=
requirement specification Sysspec (':' "short title" )?
( for mypack::GPSDevice )?
( include ( Sysspec1 )+ )?
(description Description)? 
\[ 
	(val ( limit = 200 ms )+ )?
	(compute actualbudget )*
	( <ReqFolder> | <Requirement> )*
\]

<Reqfolder> ::=
folder name (':' "my title text")?
\[ 
	( <ReqFolder> |  <Requirement> )*
\]
]

ul[
item[e[include] identifies other requirement specifications for the target component. It allows users
to identify requirements that are kept in separate ReqSpecs declaraiton to be part of a set of system
requirements.]
item[e[val] and e[compute] variables can be defined to be applicable to all requirement declarations
in a given system requirement specification.]]

Here is an example of a set of system requirement specifications.

code[ReqSpec][
requirement specification scsreqs 
for resourcebudgets::SCS 
\[ 
	val MaxBudget = 400 kg
	val MaxLatency = 50ms
	requirement R1 \[
		description this " shall have a budget within " Maxbudget
		assert value actualbudget <= MaxBudget
	\]
	requirement R2 \[
		description "hello"
		assert value actuallatency <= MaxLatency
	\]
\]
]

section:ReqCategory[User Definable Requirement Categories]

Requirement categories are defined through the CateGory specificaiton notation. These specifications are
created in files with the extension @e[cat].

code[Categories][
<RequirementCategories> ::=
	requirement categories 
	\[ 
		<RequirementCategory>+
	\]

<RequirementCategory> :
	dependeability
	safety ( extends dependability )? 
]

Requirement categories must have globally unique names. References to a category do not have to be qualified.

Requirement categories can be placed into an extends hierarchy.


section:Stakeholders[Stakeholders and Their Organization]

The e[organization] notations allows user to define organizations and stakeholders that belong to organizations.
Stakeholder names must be unique within an organization. Stakeholders are referenced by qualifying them
with the orgnaization name.

code[Organization][
<Organization>::=
	organization SEI
	<Stakeholder>+

<Stakeholder> ::=
	stakeholder phf
	\[
		( full name  "Peter Feiler" )?
		( title  "Chief Engineer" )?
		( description  "my job is ..." )?
		( role "reviewer" )?
		( email "phf@sei.cmu.edu" )?
		( phone  "412-268-7790" )?
	\] 
]

Organizations must have globally unique names. At this time only single identifiers without spaces are
supported.

At this time the name used after the stakeholder keyword must be unique within an organization. This
is the name to be referenced. 
 
