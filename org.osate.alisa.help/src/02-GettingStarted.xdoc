chapter:GettingStarted[Getting Started]

To get started, you should first download and install the Alisa feature with the pulgins that support
the different notations of Alisa as well as the assurance harness that executes the verificativities specified in verification plans on an instance
of the AADL model for the system of interest.

You then create a project as an AADL project for which the Xtext nature will be enabled when you create
model files for one of the Alisa notations. You can create separate projects for your architecture models
in AADL, for your requirement/verification specifications, and for other specifications such as Resolute
libraries used in the verification - as shown in the example. Make sure you specify e[Project References]
through the e[Preferences] menu. Select a project, selecte e[Preferences] under the e[Window] menu, (type e[pref] into the search bar of the preferences dialog and then
specify the projects in which this project will reference file content.

img[images/Alisaprojects.png][AADL, Alisa, and Resolute files in Different Projects][][]

You will create stakeholder goals and system requirements. You will do so in the context of an
AADL model that represents the system of interest in its operational context by explicitly modeling all
the entities in the operational environment that the system may be exposed to and interact with.

Stakeholders are defined as members of an organization. Each organization and its members is defined in a 
separate e[.org] file.

img[images/stakeholderorg.png][Stakeholder Descriptions as Members of Organizations][][]

Users can define a collection of stakeholder e[goals] for a system . For each goal one or more stakeholders can be identified.
In the process the user want to utilize a use case notation such as the URN Use Case Maps (UCM) - see
http://jucmnav.softwareengineering.ca/ucm/bin/view/ProjetSEG/WebHome .

img[images/goals.png][Stakeholder Goals][][]

System e[requirements] are specified in a system e[requirement specification].  They are traced to stakeholder goals and they identify the component
 type or implementation in the AADL model the requirement is associated with.
Users can also specifies values as constants that can be used in descriptions and as operands in assert expressions. Typically,
those are values that the user may want to change.

Requirements can be refined into requirements that are verifable. All e[leaf] requirements are expected
to be verifiable.

img[images/requirementexample.png][System Requirements in Context of an AADL Model][][]

For each system the user specifies a verificaiton plan. The verification plan specifies a claim for each requirement of the system of interest,
identifying a collection of verification activities and making the argument of sufficient evidence if these verification activities applied to a system implementation pass. 
Users may impose an order to indicate that some are dependent
on the successful completion of others, and specify that in case of failure to complete execution, or returning a negative
result (e[fail]) an alternative verification activity may be performed.

img[images/claimexample.png][System Requirements in Context of an AADL Model][][] 

Typically the user will work with an existing e[registry] of e[verification methods]. This registry identifies the methods available for use in verification activities. You may add methods to the registry as you may
develop additional analysis,verification, and test methods. Users can build up libraries of verificaion
methods that can be used on different projects.

Finally, the user will define the an e[assurance task] for a particular system. The assurance task identifies
the verification plans of those system components that the user wants to verify. The user may specify
selection criteria for a subset of the verificaitona activities that are to be performed as part of this assurance task.
The selection criterion is expressed in terms of e[selection category] tags that have been attached to
verification methods or activities.
 
 From the assurance task specification an assurance task instance is created. 
 This instance is used to drive the execution of the verification activities and to record the resultss as e[assuanrce evidence]. 
 
 
img[images/assuresnippet.png][Snippet of a Generated Assure file][][] 
 
 Users then initiate the execution of all verification activities for an assurance case by opening the
 e[assure] file and selecting the root element in the e[Outline] view, bring up the cotnext menu by right clicking, and invoking
 the e[Verify All Evidence] command.
 
 Note that multiple assurance cases can be defined for the same system. Each case may focus on assuring
 different aspects of the system, as identified by the chosen selection categories.  SImilarly users
 can define assurance tasks to include different combinations of verification plans for different subsets
 of system components, leading to an incrememental approach of verification.
 
 Users can define the following types of categories:
 ul[
 item[e[requirement categories:] These categories are used to categorize requirements and goals.]
 item[e[verification categories:] These categories are used to categorize verification methods.]
 item[e[Selection categories:] These categories are used to categorize additional selection criteria
 when assurance evidence instances are created.]
 ]
 
For more on any of the Alisa concepts see the respective section.
 