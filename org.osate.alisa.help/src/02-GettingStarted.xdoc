chapter:GettingStarted[Getting Started]

To get started, you should first download and install the Alisa feature with the pulgins that support
the different notations of Alisa as well as the assurance harness that executes the verificativities specified in verification plans on an instance
of the AADL model for the system of interest.

You then create a project as an AADL project for which the Xtext nature will be enabled when you create
model files for one of the Alisa notations. You can create separate projects for your architecture models
in AADL, for your requirement/verification specifications, and for other specifications such as Resolute
libraries used in teh verification - as shown in the example. Make sure you specify e[Project References]
through the e[Preferences] menu. Select a project, selecte e[Preferences] under the e[Window] menu, (type e[pref] into the search bar of the preferences dialog and then
specify the projects in which this project will reference file content.

img[images/Alisaprojects.png][AADL, Alisa, and Resolute files in Different Projects][][]

You will create stakeholder goals and system requirements. You will do so in the context of an
AADL model that represents the system of interest in its operational context by explicitly modeling all
the entities in the operational environment that the system may be exposed to and interact with.

In the case of stakeholder goals you will identify the stakeholders. Those are defined in a separate
e[.org] file.

img[images/stakeholderorg.png][Stekeholder Descriptions as Members of Organizations][][]

Users can specify stakeholder goals and identify stekeholders responsible for those goals.

img[images/goals.png][Stakeholder Goals][][]

Next we specify system requirements. They are traced to stakeholder goals and they idnetify the component
specification (component type or implementation) in teh AADL model the requirement is associated with.
It also specifies constants that can be used in descriptions and as operands in assert expressions. 

Requirmeents can be refined into requirements that are verifable. All e[leaf] requirements are expected
to be verifiable.

img[images/requirementexample.png][System Requirements in Context of an AADL Model][][]

For each requirement the user specifies how the requirement is verified. This is done through a verification
plans for each system component. Such a plan specifies a claim for each requirement that a particular
collection of verification activities is sufficient evidence that a system implementation meets the requirement.
Users may specify collections of verification activities, impose an order to indicate that some are dependent
on the successful completion of others, and that specify that in case of failure to complete execution, or returning a negative
result (e[fail]) an alternative verification activity may be performed.

img[images/verificationplan.png][System Requirements in Context of an AADL Model][][] 

Typically the user will work with an existing e[registry] of e[verification methods]. This registry identifies the methods available for use in verification activities. You may add methods to the registry as you may
develop additional analysis,verification, and test methods. 

Finally, you will define the an assurance task configuration for a particular system by identifying
the verification plans of those components in your system you are responsbile for verifying and a verification perspective that specifies selection criteria for a subset of the verificaitona ctivities as part of this assurance task.
The selection criterion is expressed in terms of e[selection category] tags that have been attached to
verificaiton methods or activities.
 
 The assurance task configuration is used to automatically
 generate an instance of the specified assurance task that will execute and track the results of verification
 activities as a record of evidence at any time during the life cycle. This instance can be found in
 the folder e[assure] as a file with the extension e[assure].
 
img[images/assureexample.png][Snippet of a Generated Assure file][][] 
 
 Users then initiate the execution of all verification activities for an assurance case by opening the
 e[assure] file and selecting the root element in the e[Outline] view, bring up the cotnext menu by right clicking, and invoking
 the e[Verify All Evidence] command.
 
 Note that multiple assurance cases can be defined for the same system. Each case may focus on assuring
 different aspects of the system, as identified by the chosen selection categories.  SImilarly users
 can define assurance tasks to include different combinations of verification plans for different subsets
 of system components, leading to an incrememental approach of verification.
 
 Users can define the following types of categories:
 ul[
 item[e[requirement categories:] These categories are used to categorize requirements and goals.]
 item[e[verification categories:] These categories are used to categorize verification methods.]
 item[e[Selection categories:] These categories are used to categorize additional selection criteria
 when assurance evidence instances are created.]
 ]
 
 for more on any of the Alisa concepts see the respective section.
 