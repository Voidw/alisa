/**
 * Copyright 2015 Carnegie Mellon University. All Rights Reserved.
 *
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 *
 * Released under the Eclipse Public License (http://www.eclipse.org/org/documents/epl-v10.php)
 *
 * See COPYRIGHT file for full details.
 */

/*
 * generated by Xtext
 */
package org.osate.verify.ui.contentassist

import org.osate.verify.ui.contentassist.AbstractVerifyProposalProvider
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.Assignment
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.CrossReference
import org.osate.verify.verify.VerificationPlan
import org.eclipse.emf.ecore.util.EcoreUtil
import java.util.ArrayList
import org.osate.categories.categories.CategoriesPackage
import org.osate.verify.verify.VerificationActivity
import org.osate.verify.verify.VerificationMethod
import static extension org.osate.verify.util.VerifyUtilExtension.*

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class VerifyProposalProvider extends AbstractVerifyProposalProvider {

	override void completeClaim_Requirement(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		// filter scope to only include requirements that exist in system requirement of verification plan
		val forSystemRequirements = (model.eContainer as VerificationPlan).getRequirements
		val ArrayList<EObject> nameList = newArrayList();
		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor, [
			val proposedObj = EcoreUtil.resolve(EObjectOrProxy, model) // Gets all Requirements from Loose Scope
			// no duplicates. Seems like duplicates with full qualified names are check later so that we get the short one.
			if (nameList.contains(proposedObj)) {
				return false
			} else {
				nameList.add(proposedObj)
			}
			// Scope handles correctly to make sure all valid requirements are included in scope without '.'
			forSystemRequirements.content.contains(proposedObj)
		]);
	}
	
	override void completeVerificationMethod_MethodType(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				 ! (model as VerificationMethod).methodType.exists[c|c.name.equals(match)]
			]
		);
	}
	
	override void completeVerificationMethod_QualityAttribute(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				val qa = (model as VerificationMethod).qualityAttribute;
				 ! (model as VerificationMethod).qualityAttribute.exists[c|c.name.equals(match)]
			]
		);
	}
	
	override void completeVerificationMethod_UserSelection(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				 ! (model as VerificationMethod).userSelection.exists[c|c.name.equals(match)]
			]
		);
	}
	
	override void completeVerificationActivity_DevelopmentPhase(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				 ! (model as VerificationActivity).developmentPhase.exists[c|c.name.equals(match)]
			]
		);
	}
	
	override void completeVerificationActivity_UserSelection(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			assignment.getTerminal() as CrossReference,
			context,
			acceptor,
			[description| val match = description.qualifiedName.toString; 
				 ! (model as VerificationActivity).userSelection.exists[c|c.name.equals(match)]
			]
		);
	}
	
}
