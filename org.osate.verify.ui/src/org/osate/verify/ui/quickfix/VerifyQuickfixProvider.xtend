/**
 * Copyright 2015 Carnegie Mellon University. All Rights Reserved.
 *
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 *
 * Released under the Eclipse Public License (http://www.eclipse.org/org/documents/epl-v10.php)
 *
 * See COPYRIGHT file for full details.
 */

/*
* generated by Xtext
*/
package org.osate.verify.ui.quickfix

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.osate.reqspec.reqSpec.Requirement
import org.osate.verify.validation.VerifyValidator
import org.osate.verify.verify.Claim
import org.osate.verify.verify.Verification
import org.osate.verify.verify.VerificationPlan
import org.osate.verify.verify.VerifyFactory
import org.osate.verify.verify.VerifyPackage

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class VerifyQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
	protected VerifyPackage verifyPackage = VerifyPackage.eINSTANCE;
	protected VerifyFactory verifyFactory = verifyPackage.getVerifyFactory();

	/**
	 * QuickFix for adding a claim for a requirement
	 * The issue data array is expected to have two elements:
	 *
	 * issue.getData()[0]: The name of the requirement
	 * issue.getData()[1]: the uri of the requirement
	 * 
	 */
	@Fix(VerifyValidator.MISSING_CLAIM_FOR_REQ)
	def public void fixMissingClaimForRequirement(Issue issue, IssueResolutionAcceptor acceptor) {
		val reqName = issue.getData().head
		val reqURI = issue.getData().get(1)

		acceptor.accept(issue, "Add claim for " + reqName, null, null,
				new ISemanticModification() {
					override apply(EObject element, IModificationContext context) throws Exception {
						val resourceSet = element.eResource().getResourceSet() as ResourceSet
						val req = resourceSet.getEObject(URI.createURI(reqURI), true) as Requirement
						val verificationPlan = element as VerificationPlan
						val Claim claim = verifyFactory.createClaim
						claim.requirement = req
						verificationPlan.claim.add(claim)
					}
				});
	}

	/**
	 * QuickFix for removing an illegal object in a Verification file
	 * The issue data array is expected to have two elements:
	 *
	 * issue.getData()[0]: The type of element
	 * issue.getData()[1]: The uri of the containing parent
	 * 
	 */
	@Fix(VerifyValidator.ILLEGAL_OBJECT_FOR_FILETYPE)
	def public void fixIllegalObjectForFileTypeInVerify(Issue issue, IssueResolutionAcceptor acceptor) {
		val elementType = issue.getData().head
		val verificationURI = issue.getData().get(1)

		acceptor.accept(issue, "Remove " + elementType + ".", null, null,
				new ISemanticModification() {
					override apply(EObject element, IModificationContext context) throws Exception {
						val resourceSet = element.eResource().getResourceSet() as ResourceSet
						val verification  = resourceSet.getEObject(URI.createURI(verificationURI), true) as Verification
						val illegalObject = element as EObject
						verification.contents.remove(illegalObject)
					}
				});
	}


}
