/*
 * generated by Xtext
 */
package org.osate.assure.scoping

import org.eclipse.emf.ecore.EReference
import org.osate.assure.assure.AssuranceCase
import static extension org.osate.assure.util.AssureUtilExtension.*
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.eclipse.emf.mwe2.language.mwe2.impl.ComponentImpl
import org.osate.aadl2.ComponentImplementation

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class AssureScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	def scope_Subcomponent(AssuranceCase ac, EReference reference){
		val parent = ac.enclosingAssuranceCase
		if (parent == null) return IScope::NULLSCOPE
		val targetCC = ac.contextImplementation?:parent.target?.target
		if (targetCC instanceof ComponentImplementation){
			return new SimpleScope(IScope::NULLSCOPE, 
			Scopes::scopedElementsFor(targetCC.allSubcomponents,
						QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
		} else {
			return IScope::NULLSCOPE
		}
	}

}
