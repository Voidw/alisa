grammar org.osate.assure.Assure with org.eclipse.xtext.common.Terminals

generate assure "http://www.osate.org/assure/Assure"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://aadl.info/AADL/2.0/instance" as instance
import "http://www.osate.org/reqspec/ReqSpec" as ReqSpec
import "http://www.osate.org/alisa/common/Common" as Common
import "http://www.osate.org/verify/Verify" as Verify 
import  "http://www.osate.org/categories/Categories" as categories
import  "http://www.osate.org/results/Results" as results
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

 
// result for a system in the architecture hierarchy
AssuranceEvidence:
	'evidence' name=ID 
	'for' target=[aadl2::ComponentImplementation|AadlClassifierReference]
	'instance' instance= [instance::InstanceObject|URIID]
	'['
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	('message' message= STRING)?
	(subAssuranceEvidence += AssuranceEvidence)*
	(claimResult += ClaimResult)*
	']'  
;

// Result of meeting a requirement
ClaimResult:
	'claim' name=ID 'for' target=[ReqSpec::Requirement|QualifiedName]
	('instance' instance= [instance::InstanceObject|URIID])? // if the requirement is for an element of the component instance
	'['
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	('message' message= STRING)?
	(subClaimResult += ClaimResult)*
	(verificationActivityResult+= VerificationExpr)*
	']'  
;


ValidationResult returns VerificationResult:
	'validation' {ValidationResult}	name=ID 
	'for' target= [Verify::VerificationValidation|QualifiedName]
	'['
	'executionstate'  executionState=VerificationExecutionState
	'resultstate' resultState=VerificationResultState
	('issues' '['
		issues+=ResultIssue*
		']'
	)?
	('report' resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	('message' message= STRING)?
	']'  
;

PreconditionResult returns VerificationResult:
	'precondition' {PreconditionResult}	name=ID 
	'for' target=[Verify::VerificationPrecondition|QualifiedName]
	'['
	'executionstate'  executionState=VerificationExecutionState
	'resultstate' resultState=VerificationResultState
	('issues' '['
		issues+=ResultIssue*
		']'
	)?
	('report' resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	('message' message= STRING)?
	']'  
;


// result of executing a verification activity
VerificationActivityResult returns VerificationResult:
	'verification' 	{VerificationActivityResult} name=ID 
	'for' target=[Verify::VerificationActivity|QualifiedName]
	'['
	'executionstate'  executionState=VerificationExecutionState
	'resultstate' resultState=VerificationResultState
	('issues' '['
		issues+=ResultIssue*
		']'
	)?
	('report' resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	('message' message= STRING)?
	(validationResult+= ValidationResult)*
	(preconditionResult+= PreconditionResult)*
	']'  
;

AssureResult:
	VerificationExpr |
		AssuranceEvidence | ClaimResult  | PreconditionResult | ValidationResult
	;

	
VerificationExpr : VerificationActivityResult | FailThenResult | AndThenResult;

FailThenResult returns FailThenResult:
	'failthen'  first+=VerificationExpr 'do' second+=VerificationExpr
	'['
	( failThen?='failthen')?
	( unknownThen?='unknownthen')?
	( didFail?='didfail')?
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	']'
;

AndThenResult returns AndThenResult:
	'andthen' first+=VerificationExpr 'do' second+=VerificationExpr
	'['
	( didAndThenFail?='andthenfailed')?
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('unknowncount' unknownCount=INT)? 
	('failthencount' failthenCount=INT)?
	('andthencount' andthenCount=INT)?
	('tbdcount' tbdCount=INT)?
	('weight' weight = INT)?
	']'
;

// use it for failures, warnings and successes.
ResultIssue:
	issueType=ResultIssueType (':' name=ID)?
	message=STRING
	('exception' exceptionType = STRING)?
	('target' target=[ecore::EObject|URIID])?
	('[' issues +=ResultIssue+']')?
;

enum ResultIssueType:
	ERROR='error' | WARNING='warning'| SUCCESS='success' | INFO='info'
;


enum VerificationResultState :
	TBD='tbd'| SUCCESS='success' | FAIL='fail' | UNKNOWN='unknown' ;



enum  VerificationExecutionState:
	TODO='todo'  // verification to be performed
	| RUNNING='running' // verification in progress (background processing)
	| REDO='redo' // invalidated while in progress. redo verification.
	| COMPLETED='completed' // completed. verification result is valid
;



URIID: STRING;	

AadlClassifierReference:
	ID ('::' ID)+ ('.' ID)?;

QualifiedName : ID ( => '.' ID )*
	
;
