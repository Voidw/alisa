grammar org.osate.assure.Assure with org.osate.alisa.common.Common

generate assure "http://www.osate.org/assure/Assure"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://aadl.info/AADL/2.0/instance" as instance
import "http://www.osate.org/reqspec/ReqSpec" as ReqSpec
import "http://www.osate.org/verify/Verify" as Verify
import  "http://www.osate.org/categories/Categories" as categories
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
// We assume that conditional selection has occurred during instantiation
 
// result for a system in the architecture hierarchy
CaseResult:
	'case' name=ID 
	'for' target=[aadl2::Classifier|AadlClassifierReference]
	('uri' instanceURI= [instance::InstanceObject|URIID])?
	'['
	('success'  passCount=INT)
	('fail'  failCount=INT)
	('unknown' unknownCount=INT) 
	('tbd' tbdCount=INT)
	('weight' weight = INT)?
	('message' sucessMsg= STRING)?
	(subCaseResult += CaseResult)*
	(claimResult += ClaimResult)*
	(hazardResult += HazardResult)*
	']'  
;

// Result of meeting a requirement
ClaimResult:
	'claim' name=ID 'for' target=[ReqSpec::Requirement|QualifiedName]
	'['
	('success'  successCount=INT)
	('fail'  failCount=INT)
	('unknown' unknownCount=INT) 
	('tbd' tbdCount=INT)
	('weight' weight = INT)?
	('successMsg' sucessMsg= STRING)?
	(subClaimResult += ClaimResult)*
	(verificationActivityResult+= VerificationExpr)*
	']'  
;

// result of all requirements of a hazard being met
HazardResult:
	'hazard' name=ID 'for' target=[ReqSpec::Hazard|QualifiedName]
	'['
	('success'  passCount=INT)
	('fail'  failCount=INT)
	('unknown' unknownCount=INT) 
	('tbd' tbdCount=INT)
	('weight' weight = INT)?
	('message' sucessMsg= STRING)?
	(claimResult+= ClaimResult)*
	']'  
;
//AggregateResult:  ClaimResult | HazardResult | CaseResult
//	| AssumptionResult | PreconditionResult
//;

AssumptionResult:
	'assumption' 	name=ID 
	'for' target= [Verify::VerificationAssumption|QualifiedName]
	'['
	('success'  successCount=INT)
	('fail'  failCount=INT)
	('unknown' unknownCount=INT) 
	('tbd' tbdCount=INT)
	('weight' weight = INT)?
	('message' sucessMsg= STRING)?
	(verificationResult+= VerificationExpr)*
	']'  
;

PreconditionResult:
	'precondition' 	name=ID 
	'for' target=[Verify::VerificationPrecondition|QualifiedName]
	'['
	('success'  successCount=INT)
	('fail'  failCount=INT)
	('unknown' unknownCount=INT) 
	('tbd' tbdCount=INT)
	('weight' weight = INT)?
	('message' sucessMsg= STRING)?
	(verificationResult+= VerificationExpr)*
	']'  
;


// result of executing a verification activity
VerificationActivityResult:
	'verification' 	name=ID 
	'for' target=[Verify::VerificationActivity|QualifiedName]
	'['
	('executionstate'  executionState=VerificationExecutionState)
	(result=VerificationResult)
	('weight' weight = INT)?
	('message' sucessMsg= STRING)?
	(assumptionResult+= AssumptionResult)*
	(preconditionResult+= PreconditionResult)*
	']'  
;

VerificationExpr returns VerificationActivityResult:
	VerificationActivityResult |
	('failthen' {FailThenResult}|'andthen' {AndThenResult}) first+=VerificationActivityResult 'do' second+=VerificationActivityResult
;

VerificationResult returns VerificationResult:
	'resultstate' resultState=VerificationResultState
	('failtype' type=STRING)?
	('failmessage' failMsg=STRING)?
	('failtarget' failTarget=[ecore::EObject|QualifiedName])?
;

enum VerificationResultState :
	TBD='tbd'| SUCCESS='success' | FAIL='fail' | UNKNOWN='unknown' ;



enum  VerificationExecutionState:
	TODO='todo'  // verification to be performed
	| RUNNING='running' // verification in progress (background processing)
	| REDO='redo' // invalidated while in progress. redo verification.
	| COMPLETED='completed' // completed. verification result is valid
;


