grammar org.osate.assure.Assure with org.eclipse.xtext.common.Terminals

generate assure "http://www.osate.org/assure/Assure"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://aadl.info/AADL/2.0/instance" as instance
import "http://www.osate.org/reqspec/ReqSpec" as ReqSpec
import "http://www.osate.org/alisa/common/Common" as Common
import "http://www.osate.org/alisa/workbench/Alisa" as Alisa
import "http://www.osate.org/verify/Verify" as Verify 
import  "http://www.osate.org/results/Results" as results
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

 
// result for a system in the architecture hierarchy
AssuranceCase:
	'case' name=QualifiedName 
	('for' target=[Alisa::AssurancePlan|QualifiedName])?
	('system' targetSystem=ID)?
	'['
	metrics=Metrics
	('message' message= STRING)?
	(claimResult += ClaimResult)*
	(subAssuranceCase += AssuranceCase)*
	']'  
;

// Result of meeting a requirement
ClaimResult:
	'claim' target=[ReqSpec::Requirement|QualifiedName]
	'['
	metrics=Metrics
	('message' message= STRING)?
	(subClaimResult += ClaimResult)*
	(verificationActivityResult+= VerificationExpr)*
	']'  
;



ConditionResult returns VerificationResult:
	('precondition' {PreconditionResult}| 'validation' {ValidationResult})	
	target=[Verify::VerificationCondition|QualifiedName]
	'['
	'executionstate'  executionState=VerificationExecutionState
	'resultstate' resultState=VerificationResultState
	('issues' '['
		issues+=ResultIssue*
		']'
	)?
	('report' resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	metrics=Metrics
	('message' message= STRING)?
	']'  
;


// result of executing a verification activity
VerificationActivityResult returns VerificationResult:
	'verification' {VerificationActivityResult}	target=[Verify::VerificationActivity|QualifiedName]
//	('instance' instance= [instance::InstanceObject|URIID])?
	'['
	'executionstate'  executionState=VerificationExecutionState
	'resultstate' resultState=VerificationResultState
	('issues' '['
		issues+=ResultIssue*
		']'
	)?
	('report' resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	metrics=Metrics
	('message' message= STRING)?
	conditionResult= ConditionResult?
	']'  
;

AssureResult:
	VerificationExpr |
		AssuranceCase | ClaimResult  | ConditionResult 
	;

enum ElseType: 
	FAIL='fail' | TIMEOUT='timeout' | OTHER='other'
;
	
VerificationExpr : VerificationActivityResult | ElseResult | ThenResult;

ElseResult returns ElseResult:
	'else'  first+=VerificationExpr+ ('other' other+=VerificationExpr+)?
	('fail' fail+=VerificationExpr+)? ('timeout' timeout+=VerificationExpr+)?
	'['
	didFail=ElseType?
	metrics=Metrics
	']'
;

ThenResult returns ThenResult:
	'then' first+=VerificationExpr+ 'do' second+=VerificationExpr+
	'['
	( didThenFail?='thenfailed')?
	metrics=Metrics
	']'
;

Metrics returns Metrics:
	('tbdcount' tbdCount=INT)?
	('successcount'  successCount=INT)?
	('failcount'  failCount=INT)?
	('timeoutcount'  timeoutCount=INT)?
	('othercount' otherCount=INT)? 
	('didelsecount' didelseCount=INT)?  // else branch executed
	('thenskipcount' thenskipCount=INT)?
	('prefailcount'  preconditionfailCount=INT)?
	('validfailcount'  validationfailCount=INT)?
	('weight' weight = INT)?
;

// use it for failures, warnings and successes.
ResultIssue:
	issueType=ResultIssueType (':' name=ID)?
	message=STRING
	('exception' exceptionType = STRING)?
	('target' target=[ecore::EObject|URIID])?
	('[' issues +=ResultIssue+']')?
;

enum ResultIssueType:
	ERROR='error' | WARNING='warning'| SUCCESS='success' | INFO='info'
;


enum VerificationResultState :
	TBD='tbd'| SUCCESS='success' | FAIL='fail' | OTHER='other' | TIMEOUT='timeout' ;



enum  VerificationExecutionState:
	TODO='todo'  // verification to be performed
	| RUNNING='running' // verification in progress (background processing)
	| REDO='redo' // invalidated while in progress. redo verification.
	| COMPLETED='completed' // completed. verification result is valid
;



URIID: STRING;	

AadlClassifierReference:
	ID ('::' ID)+ ('.' ID)?;

QualifiedName : ID ( => '.' ID )*
	
;
