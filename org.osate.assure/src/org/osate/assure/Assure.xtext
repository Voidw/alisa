grammar org.osate.assure.Assure with org.osate.alisa.common.Common

generate assure "http://www.osate.org/assure/Assure"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://aadl.info/AADL/2.0/instance" as instance
import "http://www.osate.org/reqspec/ReqSpec" as ReqSpec
import "http://www.osate.org/verify/Verify" as Verify

// We assume that conditional selection has occurred during instantiation
 
// result for a system in the architecture hierarchy
CaseResult:
	'case' name=ID 
	('for' system=[aadl2::Classifier|AadlClassifierReference])?
	('uri' target= [instance::InstanceObject|URIID])?
	'['
	('success'  passCount=INT)
	('fail'  failCount=INT)
	('neutral' neutralCount=INT)
	('unknown' unknownCount=INT) 
	('weight' weight = INT)?
	('successMsg' sucessMsg= MultiLineString)?
	('failMsg' failMsg = MultiLineString)?
	(subCaseResult += CaseResult)*
	(claimResult += ClaimResult)*
	(hazardResult += HazardResult)*
	']'  
;

// Result of meeting a requirement
ClaimResult:
	'claim' name=ID 'of' requirement=[ReqSpec::Requirement|QualifiedName]
//	('for' target=[instance::InstanceObject|URIID])?
	'['
	('success'  successCount=INT)
	('fail'  failCount=INT)
	('neutral' neutralCount=INT)
	('unknown' unknownCount=INT) 
	('weight' weight = INT)?
	('successMsg' sucessMsg= MultiLineString)?
	('failMsg' failMsg = MultiLineString)?
	(subClaimResult += ClaimResult)*
	(verificationResult+= VerificationExpr)*
	']'  
;

// result of executing a verification activity
VerificationResult:
	'verification' 	name=ID 
	'of' verificationActivity=[Verify::VerificationActivity|QualifiedName]
//	('for' target=[instance::InstanceObject|URIID])?
	'['
	('state'  state=VerificationExecutionState)?
	('status'  status=VerificationResultState)? 
	('weight' weight = INT)?
	('successMsg' sucessMsg= MultiLineString)?
	('failMsg' failMsg = MultiLineString)?
//	('output'  title=STRING)?
//	('logfile'  description=STRING)?
//	('date'  date=STRING)?
	(assumptionResult+= AssumptionResult)*
	(preconditionResult+= PreconditionResult)*
	']'  
;
AssumptionResult:
	'assumption' 	name=ID 
	'of' verificationActivity= [Verify::VerificationAssumption|QualifiedName]
//	('for' target=[instance::InstanceObject|URIID])?
	'['
	('state'  state=VerificationExecutionState)?
	('status'  status=VerificationResult)? 
	('weight' weight = INT)?
	('successMsg' sucessMsg= MultiLineString)?
	('failMsg' failMsg = MultiLineString)?
//	('output'  title=STRING)?
//	('logfile'  description=STRING)?
//	('date'  date=STRING)?
	']'  
;

PreconditionResult:
	'precondition' 	name=ID 
	'of' verificationActivity=[Verify::VerificationPrecondition|QualifiedName]
//	('for' target=[instance::InstanceObject|URIID])?
	'['
	('state'  state=VerificationExecutionState)?
	('status'  status=VerificationResult)? // TODO change keyword to result
	('weight' weight = INT)?
	('successMsg' sucessMsg= MultiLineString)?
	('failMsg' failMsg = MultiLineString)?
//	('output'  title=STRING)?
//	('logfile'  description=STRING)?
//	('date'  date=STRING)?
	']'  
;

AssuranceResult: EvidenceResult | ClaimResult | HazardResult | CaseResult;
EvidenceResult : VerificationResult | AssumptionResult | PreconditionResult;

// result of all requirements of a hazard being met
HazardResult:
	'hazard' name=ID 'of' hazard=[ReqSpec::Hazard|QualifiedName]
	('for' target=[instance::InstanceObject|URIID])?
	'['
	('success'  passCount=INT)
	('fail'  failCount=INT)
	('neutral' neutralCount=INT)
	('unknown' unknownCount=INT) 
	('weight' weight = INT)?
	(verificationResult+= VerificationResult)*
	// TODO should be claim results
	']'  
;

VerificationExpr returns VerificationResult:
	VerificationResult |
	('fail' {FailThenResult}|'if' {IfThenResult}) first+=VerificationResult 'then' second+=VerificationResult
;



enum  VerificationExecutionState:
	TODO='todo'  // verification to be performed
	| RUNNING='running' // verification in progress (background processing)
	| REDO='redo' // invalidated while in progress. redo verification.
	| COMPLETED='completed' // completed. verification result is valid
;

enum VerificationResultState:
	TBD='tbd' | SUCCESS='success' | FAIL='fail' | UNKNOWN='unknown' 
;
