/*
* generated by Xtext
*/
package org.osate.assure.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AssureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AssuranceCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssuranceCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssuranceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetSystemInstanceCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetSystemInstanceIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetSystemInstanceCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultsAssuranceResultParserRuleCall_6_0 = (RuleCall)cResultsAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AssuranceCase:
		//	"assurance" "case" name=ID "for" target=[instance::SystemInstance] "[" results+=AssuranceResult+ "]";
		public ParserRule getRule() { return rule; }

		//"assurance" "case" name=ID "for" target=[instance::SystemInstance] "[" results+=AssuranceResult+ "]"
		public Group getGroup() { return cGroup; }

		//"assurance"
		public Keyword getAssuranceKeyword_0() { return cAssuranceKeyword_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"for"
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//target=[instance::SystemInstance]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[instance::SystemInstance]
		public CrossReference getTargetSystemInstanceCrossReference_4_0() { return cTargetSystemInstanceCrossReference_4_0; }

		//ID
		public RuleCall getTargetSystemInstanceIDTerminalRuleCall_4_0_1() { return cTargetSystemInstanceIDTerminalRuleCall_4_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//results+=AssuranceResult+
		public Assignment getResultsAssignment_6() { return cResultsAssignment_6; }

		//AssuranceResult
		public RuleCall getResultsAssuranceResultParserRuleCall_6_0() { return cResultsAssuranceResultParserRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class VerificationResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cResultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVerificationActivityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVerificationActivityVerificationActivityCrossReference_4_0 = (CrossReference)cVerificationActivityAssignment_4.eContents().get(0);
		private final RuleCall cVerificationActivityVerificationActivityIDTerminalRuleCall_4_0_1 = (RuleCall)cVerificationActivityVerificationActivityCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cUnorderedGroup_6.eContents().get(0);
		private final Keyword cOutputKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cTitleAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_6_0_1_0 = (RuleCall)cTitleAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cUnorderedGroup_6.eContents().get(1);
		private final Keyword cLogfileKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_1_1_0 = (RuleCall)cDescriptionAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cUnorderedGroup_6.eContents().get(2);
		private final Keyword cDateKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cMethodAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cMethodSTRINGTerminalRuleCall_6_2_1_0 = (RuleCall)cMethodAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cUnorderedGroup_6.eContents().get(3);
		private final Keyword cStateKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cStateAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cStateVerificationResultStateEnumRuleCall_6_3_1_0 = (RuleCall)cStateAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cUnorderedGroup_6.eContents().get(4);
		private final Keyword cStatusKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cStatusAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cStatusVerificationResultStatusEnumRuleCall_6_4_1_0 = (RuleCall)cStatusAssignment_6_4_1.eContents().get(0);
		private final Assignment cAssumptionVerificationResultAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAssumptionVerificationResultVerificationResultParserRuleCall_7_0 = (RuleCall)cAssumptionVerificationResultAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//VerificationResult:
		//	"verification" "result" name=ID "of" verificationActivity=[Verify::VerificationActivity] "[" (("output"
		//	title=STRING)? & ("logfile" description=STRING)? & ("date" method=STRING)? & ("state" state=VerificationResultState)?
		//	& ("status" status=VerificationResultStatus)?) assumptionVerificationResult+=VerificationResult* "]";
		public ParserRule getRule() { return rule; }

		//"verification" "result" name=ID "of" verificationActivity=[Verify::VerificationActivity] "[" (("output" title=STRING)? &
		//("logfile" description=STRING)? & ("date" method=STRING)? & ("state" state=VerificationResultState)? & ("status"
		//status=VerificationResultStatus)?) assumptionVerificationResult+=VerificationResult* "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"result"
		public Keyword getResultKeyword_1() { return cResultKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"of"
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }

		//verificationActivity=[Verify::VerificationActivity]
		public Assignment getVerificationActivityAssignment_4() { return cVerificationActivityAssignment_4; }

		//[Verify::VerificationActivity]
		public CrossReference getVerificationActivityVerificationActivityCrossReference_4_0() { return cVerificationActivityVerificationActivityCrossReference_4_0; }

		//ID
		public RuleCall getVerificationActivityVerificationActivityIDTerminalRuleCall_4_0_1() { return cVerificationActivityVerificationActivityIDTerminalRuleCall_4_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//("output" title=STRING)? & ("logfile" description=STRING)? & ("date" method=STRING)? & ("state"
		//state=VerificationResultState)? & ("status" status=VerificationResultStatus)?
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }

		//("output" title=STRING)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"output"
		public Keyword getOutputKeyword_6_0_0() { return cOutputKeyword_6_0_0; }

		//title=STRING
		public Assignment getTitleAssignment_6_0_1() { return cTitleAssignment_6_0_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_6_0_1_0() { return cTitleSTRINGTerminalRuleCall_6_0_1_0; }

		//("logfile" description=STRING)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"logfile"
		public Keyword getLogfileKeyword_6_1_0() { return cLogfileKeyword_6_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_6_1_1() { return cDescriptionAssignment_6_1_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_1_1_0() { return cDescriptionSTRINGTerminalRuleCall_6_1_1_0; }

		//("date" method=STRING)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//"date"
		public Keyword getDateKeyword_6_2_0() { return cDateKeyword_6_2_0; }

		//method=STRING
		public Assignment getMethodAssignment_6_2_1() { return cMethodAssignment_6_2_1; }

		//STRING
		public RuleCall getMethodSTRINGTerminalRuleCall_6_2_1_0() { return cMethodSTRINGTerminalRuleCall_6_2_1_0; }

		//("state" state=VerificationResultState)?
		public Group getGroup_6_3() { return cGroup_6_3; }

		//"state"
		public Keyword getStateKeyword_6_3_0() { return cStateKeyword_6_3_0; }

		//state=VerificationResultState
		public Assignment getStateAssignment_6_3_1() { return cStateAssignment_6_3_1; }

		//VerificationResultState
		public RuleCall getStateVerificationResultStateEnumRuleCall_6_3_1_0() { return cStateVerificationResultStateEnumRuleCall_6_3_1_0; }

		//("status" status=VerificationResultStatus)?
		public Group getGroup_6_4() { return cGroup_6_4; }

		//"status"
		public Keyword getStatusKeyword_6_4_0() { return cStatusKeyword_6_4_0; }

		//status=VerificationResultStatus
		public Assignment getStatusAssignment_6_4_1() { return cStatusAssignment_6_4_1; }

		//VerificationResultStatus
		public RuleCall getStatusVerificationResultStatusEnumRuleCall_6_4_1_0() { return cStatusVerificationResultStatusEnumRuleCall_6_4_1_0; }

		//assumptionVerificationResult+=VerificationResult*
		public Assignment getAssumptionVerificationResultAssignment_7() { return cAssumptionVerificationResultAssignment_7; }

		//VerificationResult
		public RuleCall getAssumptionVerificationResultVerificationResultParserRuleCall_7_0() { return cAssumptionVerificationResultVerificationResultParserRuleCall_7_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class ClaimResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClaimResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cResultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequirementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRequirementRequirementCrossReference_4_0 = (CrossReference)cRequirementAssignment_4.eContents().get(0);
		private final RuleCall cRequirementRequirementIDTerminalRuleCall_4_0_1 = (RuleCall)cRequirementRequirementCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPassKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPassCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPassCountINTTerminalRuleCall_6_1_0 = (RuleCall)cPassCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFailKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFailCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_7_1_0 = (RuleCall)cFailCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cNeutralKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cNeutralCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNeutralCountINTTerminalRuleCall_8_1_0 = (RuleCall)cNeutralCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cUnknownKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cUnknownCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cUnknownCountINTTerminalRuleCall_9_1_0 = (RuleCall)cUnknownCountAssignment_9_1.eContents().get(0);
		private final Assignment cSubClaimResultAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSubClaimResultClaimResultParserRuleCall_10_0 = (RuleCall)cSubClaimResultAssignment_10.eContents().get(0);
		private final Assignment cSubVAResultAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cSubVAResultVerificationResultParserRuleCall_11_0 = (RuleCall)cSubVAResultAssignment_11.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//ClaimResult:
		//	"claim" "result" name=ID "of" requirement=[ReqSpec::Requirement] "[" ("pass" passCount=INT) ("fail" failCount=INT)
		//	("neutral" neutralCount=INT) ("unknown" unknownCount=INT) subClaimResult+=ClaimResult*
		//	subVAResult+=VerificationResult* "]";
		public ParserRule getRule() { return rule; }

		//"claim" "result" name=ID "of" requirement=[ReqSpec::Requirement] "[" ("pass" passCount=INT) ("fail" failCount=INT)
		//("neutral" neutralCount=INT) ("unknown" unknownCount=INT) subClaimResult+=ClaimResult*
		//subVAResult+=VerificationResult* "]"
		public Group getGroup() { return cGroup; }

		//"claim"
		public Keyword getClaimKeyword_0() { return cClaimKeyword_0; }

		//"result"
		public Keyword getResultKeyword_1() { return cResultKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"of"
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }

		//requirement=[ReqSpec::Requirement]
		public Assignment getRequirementAssignment_4() { return cRequirementAssignment_4; }

		//[ReqSpec::Requirement]
		public CrossReference getRequirementRequirementCrossReference_4_0() { return cRequirementRequirementCrossReference_4_0; }

		//ID
		public RuleCall getRequirementRequirementIDTerminalRuleCall_4_0_1() { return cRequirementRequirementIDTerminalRuleCall_4_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//"pass" passCount=INT
		public Group getGroup_6() { return cGroup_6; }

		//"pass"
		public Keyword getPassKeyword_6_0() { return cPassKeyword_6_0; }

		//passCount=INT
		public Assignment getPassCountAssignment_6_1() { return cPassCountAssignment_6_1; }

		//INT
		public RuleCall getPassCountINTTerminalRuleCall_6_1_0() { return cPassCountINTTerminalRuleCall_6_1_0; }

		//"fail" failCount=INT
		public Group getGroup_7() { return cGroup_7; }

		//"fail"
		public Keyword getFailKeyword_7_0() { return cFailKeyword_7_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_7_1() { return cFailCountAssignment_7_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_7_1_0() { return cFailCountINTTerminalRuleCall_7_1_0; }

		//"neutral" neutralCount=INT
		public Group getGroup_8() { return cGroup_8; }

		//"neutral"
		public Keyword getNeutralKeyword_8_0() { return cNeutralKeyword_8_0; }

		//neutralCount=INT
		public Assignment getNeutralCountAssignment_8_1() { return cNeutralCountAssignment_8_1; }

		//INT
		public RuleCall getNeutralCountINTTerminalRuleCall_8_1_0() { return cNeutralCountINTTerminalRuleCall_8_1_0; }

		//"unknown" unknownCount=INT
		public Group getGroup_9() { return cGroup_9; }

		//"unknown"
		public Keyword getUnknownKeyword_9_0() { return cUnknownKeyword_9_0; }

		//unknownCount=INT
		public Assignment getUnknownCountAssignment_9_1() { return cUnknownCountAssignment_9_1; }

		//INT
		public RuleCall getUnknownCountINTTerminalRuleCall_9_1_0() { return cUnknownCountINTTerminalRuleCall_9_1_0; }

		//subClaimResult+=ClaimResult*
		public Assignment getSubClaimResultAssignment_10() { return cSubClaimResultAssignment_10; }

		//ClaimResult
		public RuleCall getSubClaimResultClaimResultParserRuleCall_10_0() { return cSubClaimResultClaimResultParserRuleCall_10_0; }

		//subVAResult+=VerificationResult*
		public Assignment getSubVAResultAssignment_11() { return cSubVAResultAssignment_11; }

		//VerificationResult
		public RuleCall getSubVAResultVerificationResultParserRuleCall_11_0() { return cSubVAResultVerificationResultParserRuleCall_11_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_12() { return cRightSquareBracketKeyword_12; }
	}

	public class AssuranceResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssuranceResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerificationResultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClaimResultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssuranceResult:
		//	VerificationResult | ClaimResult;
		public ParserRule getRule() { return rule; }

		//VerificationResult | ClaimResult
		public Alternatives getAlternatives() { return cAlternatives; }

		//VerificationResult
		public RuleCall getVerificationResultParserRuleCall_0() { return cVerificationResultParserRuleCall_0; }

		//ClaimResult
		public RuleCall getClaimResultParserRuleCall_1() { return cClaimResultParserRuleCall_1; }
	}
	
	
	public class VerificationResultStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationResultState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPERFORMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPERFORMPerformKeyword_0_0 = (Keyword)cPERFORMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINPROGRESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINPROGRESSInprogressKeyword_1_0 = (Keyword)cINPROGRESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREDOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREDORedoKeyword_2_0 = (Keyword)cREDOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPLETEDCompletedKeyword_3_0 = (Keyword)cCOMPLETEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VerificationResultState:
		//	PERFORM= // verification to be performed
		//	"perform" | INPROGRESS= // verification in progress (background processing)
		//	"inprogress" | REDO= // invalidated while in progress. redo verification.
		//	"redo" | COMPLETED= // completed. verification result is valid
		//	"completed";
		public EnumRule getRule() { return rule; }

		//PERFORM= // verification to be performed
		//"perform" | INPROGRESS= // verification in progress (background processing)
		//"inprogress" | REDO= // invalidated while in progress. redo verification.
		//"redo" | COMPLETED= // completed. verification result is valid
		//"completed"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PERFORM= // verification to be performed
		//"perform"
		public EnumLiteralDeclaration getPERFORMEnumLiteralDeclaration_0() { return cPERFORMEnumLiteralDeclaration_0; }

		//// verification to be performed
		//"perform"
		public Keyword getPERFORMPerformKeyword_0_0() { return cPERFORMPerformKeyword_0_0; }

		//INPROGRESS= // verification in progress (background processing)
		//"inprogress"
		public EnumLiteralDeclaration getINPROGRESSEnumLiteralDeclaration_1() { return cINPROGRESSEnumLiteralDeclaration_1; }

		//// verification in progress (background processing)
		//"inprogress"
		public Keyword getINPROGRESSInprogressKeyword_1_0() { return cINPROGRESSInprogressKeyword_1_0; }

		//REDO= // invalidated while in progress. redo verification.
		//"redo"
		public EnumLiteralDeclaration getREDOEnumLiteralDeclaration_2() { return cREDOEnumLiteralDeclaration_2; }

		//// invalidated while in progress. redo verification.
		//"redo"
		public Keyword getREDORedoKeyword_2_0() { return cREDORedoKeyword_2_0; }

		//COMPLETED= // completed. verification result is valid
		//"completed"
		public EnumLiteralDeclaration getCOMPLETEDEnumLiteralDeclaration_3() { return cCOMPLETEDEnumLiteralDeclaration_3; }

		//// completed. verification result is valid
		//"completed"
		public Keyword getCOMPLETEDCompletedKeyword_3_0() { return cCOMPLETEDCompletedKeyword_3_0; }
	}

	public class VerificationResultStatusElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationResultStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNKNOWNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNKNOWNUnknownKeyword_0_0 = (Keyword)cUNKNOWNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPASSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPASSPassKeyword_1_0 = (Keyword)cPASSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFAILEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFAILFailKeyword_2_0 = (Keyword)cFAILEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNEUTRALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNEUTRALNeutralKeyword_3_0 = (Keyword)cNEUTRALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VerificationResultStatus:
		//	UNKNOWN="unknown" | PASS="pass" | FAIL="fail" | NEUTRAL="neutral";
		public EnumRule getRule() { return rule; }

		//UNKNOWN="unknown" | PASS="pass" | FAIL="fail" | NEUTRAL="neutral"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNKNOWN="unknown"
		public EnumLiteralDeclaration getUNKNOWNEnumLiteralDeclaration_0() { return cUNKNOWNEnumLiteralDeclaration_0; }

		//"unknown"
		public Keyword getUNKNOWNUnknownKeyword_0_0() { return cUNKNOWNUnknownKeyword_0_0; }

		//PASS="pass"
		public EnumLiteralDeclaration getPASSEnumLiteralDeclaration_1() { return cPASSEnumLiteralDeclaration_1; }

		//"pass"
		public Keyword getPASSPassKeyword_1_0() { return cPASSPassKeyword_1_0; }

		//FAIL="fail"
		public EnumLiteralDeclaration getFAILEnumLiteralDeclaration_2() { return cFAILEnumLiteralDeclaration_2; }

		//"fail"
		public Keyword getFAILFailKeyword_2_0() { return cFAILFailKeyword_2_0; }

		//NEUTRAL="neutral"
		public EnumLiteralDeclaration getNEUTRALEnumLiteralDeclaration_3() { return cNEUTRALEnumLiteralDeclaration_3; }

		//"neutral"
		public Keyword getNEUTRALNeutralKeyword_3_0() { return cNEUTRALNeutralKeyword_3_0; }
	}
	
	private final AssuranceCaseElements pAssuranceCase;
	private final VerificationResultElements pVerificationResult;
	private final ClaimResultElements pClaimResult;
	private final AssuranceResultElements pAssuranceResult;
	private final VerificationResultStateElements unknownRuleVerificationResultState;
	private final VerificationResultStatusElements unknownRuleVerificationResultStatus;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AssureGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAssuranceCase = new AssuranceCaseElements();
		this.pVerificationResult = new VerificationResultElements();
		this.pClaimResult = new ClaimResultElements();
		this.pAssuranceResult = new AssuranceResultElements();
		this.unknownRuleVerificationResultState = new VerificationResultStateElements();
		this.unknownRuleVerificationResultStatus = new VerificationResultStatusElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.assure.Assure".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AssuranceCase:
	//	"assurance" "case" name=ID "for" target=[instance::SystemInstance] "[" results+=AssuranceResult+ "]";
	public AssuranceCaseElements getAssuranceCaseAccess() {
		return pAssuranceCase;
	}
	
	public ParserRule getAssuranceCaseRule() {
		return getAssuranceCaseAccess().getRule();
	}

	//VerificationResult:
	//	"verification" "result" name=ID "of" verificationActivity=[Verify::VerificationActivity] "[" (("output"
	//	title=STRING)? & ("logfile" description=STRING)? & ("date" method=STRING)? & ("state" state=VerificationResultState)?
	//	& ("status" status=VerificationResultStatus)?) assumptionVerificationResult+=VerificationResult* "]";
	public VerificationResultElements getVerificationResultAccess() {
		return pVerificationResult;
	}
	
	public ParserRule getVerificationResultRule() {
		return getVerificationResultAccess().getRule();
	}

	//ClaimResult:
	//	"claim" "result" name=ID "of" requirement=[ReqSpec::Requirement] "[" ("pass" passCount=INT) ("fail" failCount=INT)
	//	("neutral" neutralCount=INT) ("unknown" unknownCount=INT) subClaimResult+=ClaimResult*
	//	subVAResult+=VerificationResult* "]";
	public ClaimResultElements getClaimResultAccess() {
		return pClaimResult;
	}
	
	public ParserRule getClaimResultRule() {
		return getClaimResultAccess().getRule();
	}

	//AssuranceResult:
	//	VerificationResult | ClaimResult;
	public AssuranceResultElements getAssuranceResultAccess() {
		return pAssuranceResult;
	}
	
	public ParserRule getAssuranceResultRule() {
		return getAssuranceResultAccess().getRule();
	}

	//enum VerificationResultState:
	//	PERFORM= // verification to be performed
	//	"perform" | INPROGRESS= // verification in progress (background processing)
	//	"inprogress" | REDO= // invalidated while in progress. redo verification.
	//	"redo" | COMPLETED= // completed. verification result is valid
	//	"completed";
	public VerificationResultStateElements getVerificationResultStateAccess() {
		return unknownRuleVerificationResultState;
	}
	
	public EnumRule getVerificationResultStateRule() {
		return getVerificationResultStateAccess().getRule();
	}

	//enum VerificationResultStatus:
	//	UNKNOWN="unknown" | PASS="pass" | FAIL="fail" | NEUTRAL="neutral";
	public VerificationResultStatusElements getVerificationResultStatusAccess() {
		return unknownRuleVerificationResultStatus;
	}
	
	public EnumRule getVerificationResultStatusRule() {
		return getVerificationResultStatusAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
