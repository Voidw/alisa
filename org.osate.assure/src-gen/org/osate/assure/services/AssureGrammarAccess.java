/*
* generated by Xtext
*/
package org.osate.assure.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.alisa.common.services.CommonGrammarAccess;

@Singleton
public class AssureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CaseResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetClassifierCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetClassifierAadlClassifierReferenceParserRuleCall_3_0_1 = (RuleCall)cTargetClassifierCrossReference_3_0.eContents().get(1);
		private final Keyword cInstanceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstanceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInstanceInstanceObjectCrossReference_5_0 = (CrossReference)cInstanceAssignment_5.eContents().get(0);
		private final RuleCall cInstanceInstanceObjectURIIDParserRuleCall_5_0_1 = (RuleCall)cInstanceInstanceObjectCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSuccesscountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSuccessCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_7_1_0 = (RuleCall)cSuccessCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFailcountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFailCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_8_1_0 = (RuleCall)cFailCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cErrorcountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cErrorCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_9_1_0 = (RuleCall)cErrorCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cFailthencountKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFailthenCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_10_1_0 = (RuleCall)cFailthenCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAndthencountKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAndthenCountAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_11_1_0 = (RuleCall)cAndthenCountAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cTbdKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cTbdCountAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_12_1_0 = (RuleCall)cTbdCountAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cWeightKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cWeightAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_13_1_0 = (RuleCall)cWeightAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cMessageKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cSucessMsgAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cSucessMsgSTRINGTerminalRuleCall_14_1_0 = (RuleCall)cSucessMsgAssignment_14_1.eContents().get(0);
		private final Assignment cSubCaseResultAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cSubCaseResultCaseResultParserRuleCall_15_0 = (RuleCall)cSubCaseResultAssignment_15.eContents().get(0);
		private final Assignment cClaimResultAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cClaimResultClaimResultParserRuleCall_16_0 = (RuleCall)cClaimResultAssignment_16.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//// We assume that conditional selection has occurred during instantiation
		//// result for a system in the architecture hierarchy
		//CaseResult:
		//	"case" name=ID "for" target=[aadl2::Classifier|AadlClassifierReference] "instance"
		//	instance=[instance::InstanceObject|URIID] "[" ("successcount" successCount=INT)? ("failcount" failCount=INT)?
		//	("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd"
		//	tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)? subCaseResult+=CaseResult*
		//	claimResult+=ClaimResult* "]";
		public ParserRule getRule() { return rule; }

		//"case" name=ID "for" target=[aadl2::Classifier|AadlClassifierReference] "instance"
		//instance=[instance::InstanceObject|URIID] "[" ("successcount" successCount=INT)? ("failcount" failCount=INT)?
		//("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd"
		//tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)? subCaseResult+=CaseResult*
		//claimResult+=ClaimResult* "]"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//target=[aadl2::Classifier|AadlClassifierReference]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[aadl2::Classifier|AadlClassifierReference]
		public CrossReference getTargetClassifierCrossReference_3_0() { return cTargetClassifierCrossReference_3_0; }

		//AadlClassifierReference
		public RuleCall getTargetClassifierAadlClassifierReferenceParserRuleCall_3_0_1() { return cTargetClassifierAadlClassifierReferenceParserRuleCall_3_0_1; }

		//"instance"
		public Keyword getInstanceKeyword_4() { return cInstanceKeyword_4; }

		//instance=[instance::InstanceObject|URIID]
		public Assignment getInstanceAssignment_5() { return cInstanceAssignment_5; }

		//[instance::InstanceObject|URIID]
		public CrossReference getInstanceInstanceObjectCrossReference_5_0() { return cInstanceInstanceObjectCrossReference_5_0; }

		//URIID
		public RuleCall getInstanceInstanceObjectURIIDParserRuleCall_5_0_1() { return cInstanceInstanceObjectURIIDParserRuleCall_5_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//("successcount" successCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"successcount"
		public Keyword getSuccesscountKeyword_7_0() { return cSuccesscountKeyword_7_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_7_1() { return cSuccessCountAssignment_7_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_7_1_0() { return cSuccessCountINTTerminalRuleCall_7_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"failcount"
		public Keyword getFailcountKeyword_8_0() { return cFailcountKeyword_8_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_8_1() { return cFailCountAssignment_8_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_8_1_0() { return cFailCountINTTerminalRuleCall_8_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"errorcount"
		public Keyword getErrorcountKeyword_9_0() { return cErrorcountKeyword_9_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_9_1() { return cErrorCountAssignment_9_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_9_1_0() { return cErrorCountINTTerminalRuleCall_9_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"failthencount"
		public Keyword getFailthencountKeyword_10_0() { return cFailthencountKeyword_10_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_10_1() { return cFailthenCountAssignment_10_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_10_1_0() { return cFailthenCountINTTerminalRuleCall_10_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"andthencount"
		public Keyword getAndthencountKeyword_11_0() { return cAndthencountKeyword_11_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_11_1() { return cAndthenCountAssignment_11_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_11_1_0() { return cAndthenCountINTTerminalRuleCall_11_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_12() { return cGroup_12; }

		//"tbd"
		public Keyword getTbdKeyword_12_0() { return cTbdKeyword_12_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_12_1() { return cTbdCountAssignment_12_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_12_1_0() { return cTbdCountINTTerminalRuleCall_12_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_13() { return cGroup_13; }

		//"weight"
		public Keyword getWeightKeyword_13_0() { return cWeightKeyword_13_0; }

		//weight=INT
		public Assignment getWeightAssignment_13_1() { return cWeightAssignment_13_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_13_1_0() { return cWeightINTTerminalRuleCall_13_1_0; }

		//("message" sucessMsg=STRING)?
		public Group getGroup_14() { return cGroup_14; }

		//"message"
		public Keyword getMessageKeyword_14_0() { return cMessageKeyword_14_0; }

		//sucessMsg=STRING
		public Assignment getSucessMsgAssignment_14_1() { return cSucessMsgAssignment_14_1; }

		//STRING
		public RuleCall getSucessMsgSTRINGTerminalRuleCall_14_1_0() { return cSucessMsgSTRINGTerminalRuleCall_14_1_0; }

		//subCaseResult+=CaseResult*
		public Assignment getSubCaseResultAssignment_15() { return cSubCaseResultAssignment_15; }

		//CaseResult
		public RuleCall getSubCaseResultCaseResultParserRuleCall_15_0() { return cSubCaseResultCaseResultParserRuleCall_15_0; }

		//claimResult+=ClaimResult*
		public Assignment getClaimResultAssignment_16() { return cClaimResultAssignment_16; }

		//ClaimResult
		public RuleCall getClaimResultClaimResultParserRuleCall_16_0() { return cClaimResultClaimResultParserRuleCall_16_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_17() { return cRightSquareBracketKeyword_17; }
	}

	public class ClaimResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClaimResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetRequirementCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetRequirementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTargetRequirementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInstanceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInstanceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInstanceInstanceObjectCrossReference_4_1_0 = (CrossReference)cInstanceAssignment_4_1.eContents().get(0);
		private final RuleCall cInstanceInstanceObjectURIIDParserRuleCall_4_1_0_1 = (RuleCall)cInstanceInstanceObjectCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSuccesscountKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSuccessCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_6_1_0 = (RuleCall)cSuccessCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFailcountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFailCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_7_1_0 = (RuleCall)cFailCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cErrorcountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cErrorCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_8_1_0 = (RuleCall)cErrorCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cFailthencountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFailthenCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_9_1_0 = (RuleCall)cFailthenCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAndthencountKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAndthenCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_10_1_0 = (RuleCall)cAndthenCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cTbdKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTbdCountAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_11_1_0 = (RuleCall)cTbdCountAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cWeightKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cWeightAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_12_1_0 = (RuleCall)cWeightAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cSuccessMsgKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cSucessMsgAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cSucessMsgSTRINGTerminalRuleCall_13_1_0 = (RuleCall)cSucessMsgAssignment_13_1.eContents().get(0);
		private final Assignment cSubClaimResultAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cSubClaimResultClaimResultParserRuleCall_14_0 = (RuleCall)cSubClaimResultAssignment_14.eContents().get(0);
		private final Assignment cVerificationActivityResultAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cVerificationActivityResultVerificationExprParserRuleCall_15_0 = (RuleCall)cVerificationActivityResultAssignment_15.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//// Result of meeting a requirement
		//ClaimResult:
		//	"claim" name=ID "for" target=[ReqSpec::Requirement|QualifiedName] ("instance"
		//	instance=[instance::InstanceObject|URIID])? // if the requirement is for an element of the component instance
		//	"[" ("successcount" successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount"
		//	failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("successMsg"
		//	sucessMsg=STRING)? subClaimResult+=ClaimResult* verificationActivityResult+=VerificationExpr* "]";
		public ParserRule getRule() { return rule; }

		//"claim" name=ID "for" target=[ReqSpec::Requirement|QualifiedName] ("instance"
		//instance=[instance::InstanceObject|URIID])? // if the requirement is for an element of the component instance
		//"[" ("successcount" successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount"
		//failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("successMsg"
		//sucessMsg=STRING)? subClaimResult+=ClaimResult* verificationActivityResult+=VerificationExpr* "]"
		public Group getGroup() { return cGroup; }

		//"claim"
		public Keyword getClaimKeyword_0() { return cClaimKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//target=[ReqSpec::Requirement|QualifiedName]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[ReqSpec::Requirement|QualifiedName]
		public CrossReference getTargetRequirementCrossReference_3_0() { return cTargetRequirementCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTargetRequirementQualifiedNameParserRuleCall_3_0_1() { return cTargetRequirementQualifiedNameParserRuleCall_3_0_1; }

		//("instance" instance=[instance::InstanceObject|URIID])?
		public Group getGroup_4() { return cGroup_4; }

		//"instance"
		public Keyword getInstanceKeyword_4_0() { return cInstanceKeyword_4_0; }

		//instance=[instance::InstanceObject|URIID]
		public Assignment getInstanceAssignment_4_1() { return cInstanceAssignment_4_1; }

		//[instance::InstanceObject|URIID]
		public CrossReference getInstanceInstanceObjectCrossReference_4_1_0() { return cInstanceInstanceObjectCrossReference_4_1_0; }

		//URIID
		public RuleCall getInstanceInstanceObjectURIIDParserRuleCall_4_1_0_1() { return cInstanceInstanceObjectURIIDParserRuleCall_4_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//("successcount" successCount=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"successcount"
		public Keyword getSuccesscountKeyword_6_0() { return cSuccesscountKeyword_6_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_6_1() { return cSuccessCountAssignment_6_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_6_1_0() { return cSuccessCountINTTerminalRuleCall_6_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"failcount"
		public Keyword getFailcountKeyword_7_0() { return cFailcountKeyword_7_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_7_1() { return cFailCountAssignment_7_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_7_1_0() { return cFailCountINTTerminalRuleCall_7_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"errorcount"
		public Keyword getErrorcountKeyword_8_0() { return cErrorcountKeyword_8_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_8_1() { return cErrorCountAssignment_8_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_8_1_0() { return cErrorCountINTTerminalRuleCall_8_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"failthencount"
		public Keyword getFailthencountKeyword_9_0() { return cFailthencountKeyword_9_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_9_1() { return cFailthenCountAssignment_9_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_9_1_0() { return cFailthenCountINTTerminalRuleCall_9_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"andthencount"
		public Keyword getAndthencountKeyword_10_0() { return cAndthencountKeyword_10_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_10_1() { return cAndthenCountAssignment_10_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_10_1_0() { return cAndthenCountINTTerminalRuleCall_10_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"tbd"
		public Keyword getTbdKeyword_11_0() { return cTbdKeyword_11_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_11_1() { return cTbdCountAssignment_11_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_11_1_0() { return cTbdCountINTTerminalRuleCall_11_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_12() { return cGroup_12; }

		//"weight"
		public Keyword getWeightKeyword_12_0() { return cWeightKeyword_12_0; }

		//weight=INT
		public Assignment getWeightAssignment_12_1() { return cWeightAssignment_12_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_12_1_0() { return cWeightINTTerminalRuleCall_12_1_0; }

		//("successMsg" sucessMsg=STRING)?
		public Group getGroup_13() { return cGroup_13; }

		//"successMsg"
		public Keyword getSuccessMsgKeyword_13_0() { return cSuccessMsgKeyword_13_0; }

		//sucessMsg=STRING
		public Assignment getSucessMsgAssignment_13_1() { return cSucessMsgAssignment_13_1; }

		//STRING
		public RuleCall getSucessMsgSTRINGTerminalRuleCall_13_1_0() { return cSucessMsgSTRINGTerminalRuleCall_13_1_0; }

		//subClaimResult+=ClaimResult*
		public Assignment getSubClaimResultAssignment_14() { return cSubClaimResultAssignment_14; }

		//ClaimResult
		public RuleCall getSubClaimResultClaimResultParserRuleCall_14_0() { return cSubClaimResultClaimResultParserRuleCall_14_0; }

		//verificationActivityResult+=VerificationExpr*
		public Assignment getVerificationActivityResultAssignment_15() { return cVerificationActivityResultAssignment_15; }

		//VerificationExpr
		public RuleCall getVerificationActivityResultVerificationExprParserRuleCall_15_0() { return cVerificationActivityResultVerificationExprParserRuleCall_15_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_16() { return cRightSquareBracketKeyword_16; }
	}

	public class AssumptionResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssumptionResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssumptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetVerificationAssumptionCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetVerificationAssumptionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTargetVerificationAssumptionCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSuccesscountKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuccessCountAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_5_1_0 = (RuleCall)cSuccessCountAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFailcountKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFailCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_6_1_0 = (RuleCall)cFailCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cErrorcountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cErrorCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_7_1_0 = (RuleCall)cErrorCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFailthencountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFailthenCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_8_1_0 = (RuleCall)cFailthenCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAndthencountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cAndthenCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_9_1_0 = (RuleCall)cAndthenCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cTbdKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTbdCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_10_1_0 = (RuleCall)cTbdCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cWeightKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cWeightAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_11_1_0 = (RuleCall)cWeightAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cMessageKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cSucessMsgAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cSucessMsgSTRINGTerminalRuleCall_12_1_0 = (RuleCall)cSucessMsgAssignment_12_1.eContents().get(0);
		private final Assignment cVerificationActivityResultAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cVerificationActivityResultVerificationExprParserRuleCall_13_0 = (RuleCall)cVerificationActivityResultAssignment_13.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//AssumptionResult:
		//	"assumption" name=ID "for" target=[Verify::VerificationAssumption|QualifiedName] "[" ("successcount"
		//	successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
		//	("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
		//	verificationActivityResult+=VerificationExpr* "]";
		public ParserRule getRule() { return rule; }

		//"assumption" name=ID "for" target=[Verify::VerificationAssumption|QualifiedName] "[" ("successcount" successCount=INT)?
		//("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount"
		//andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
		//verificationActivityResult+=VerificationExpr* "]"
		public Group getGroup() { return cGroup; }

		//"assumption"
		public Keyword getAssumptionKeyword_0() { return cAssumptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//target=[Verify::VerificationAssumption|QualifiedName]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[Verify::VerificationAssumption|QualifiedName]
		public CrossReference getTargetVerificationAssumptionCrossReference_3_0() { return cTargetVerificationAssumptionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTargetVerificationAssumptionQualifiedNameParserRuleCall_3_0_1() { return cTargetVerificationAssumptionQualifiedNameParserRuleCall_3_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//("successcount" successCount=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"successcount"
		public Keyword getSuccesscountKeyword_5_0() { return cSuccesscountKeyword_5_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_5_1() { return cSuccessCountAssignment_5_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_5_1_0() { return cSuccessCountINTTerminalRuleCall_5_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"failcount"
		public Keyword getFailcountKeyword_6_0() { return cFailcountKeyword_6_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_6_1() { return cFailCountAssignment_6_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_6_1_0() { return cFailCountINTTerminalRuleCall_6_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"errorcount"
		public Keyword getErrorcountKeyword_7_0() { return cErrorcountKeyword_7_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_7_1() { return cErrorCountAssignment_7_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_7_1_0() { return cErrorCountINTTerminalRuleCall_7_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"failthencount"
		public Keyword getFailthencountKeyword_8_0() { return cFailthencountKeyword_8_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_8_1() { return cFailthenCountAssignment_8_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_8_1_0() { return cFailthenCountINTTerminalRuleCall_8_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"andthencount"
		public Keyword getAndthencountKeyword_9_0() { return cAndthencountKeyword_9_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_9_1() { return cAndthenCountAssignment_9_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_9_1_0() { return cAndthenCountINTTerminalRuleCall_9_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"tbd"
		public Keyword getTbdKeyword_10_0() { return cTbdKeyword_10_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_10_1() { return cTbdCountAssignment_10_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_10_1_0() { return cTbdCountINTTerminalRuleCall_10_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"weight"
		public Keyword getWeightKeyword_11_0() { return cWeightKeyword_11_0; }

		//weight=INT
		public Assignment getWeightAssignment_11_1() { return cWeightAssignment_11_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_11_1_0() { return cWeightINTTerminalRuleCall_11_1_0; }

		//("message" sucessMsg=STRING)?
		public Group getGroup_12() { return cGroup_12; }

		//"message"
		public Keyword getMessageKeyword_12_0() { return cMessageKeyword_12_0; }

		//sucessMsg=STRING
		public Assignment getSucessMsgAssignment_12_1() { return cSucessMsgAssignment_12_1; }

		//STRING
		public RuleCall getSucessMsgSTRINGTerminalRuleCall_12_1_0() { return cSucessMsgSTRINGTerminalRuleCall_12_1_0; }

		//verificationActivityResult+=VerificationExpr*
		public Assignment getVerificationActivityResultAssignment_13() { return cVerificationActivityResultAssignment_13; }

		//VerificationExpr
		public RuleCall getVerificationActivityResultVerificationExprParserRuleCall_13_0() { return cVerificationActivityResultVerificationExprParserRuleCall_13_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_14() { return cRightSquareBracketKeyword_14; }
	}

	public class PreconditionResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreconditionResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetVerificationPreconditionCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetVerificationPreconditionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTargetVerificationPreconditionCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSuccesscountKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuccessCountAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_5_1_0 = (RuleCall)cSuccessCountAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFailcountKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFailCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_6_1_0 = (RuleCall)cFailCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cErrorcountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cErrorCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_7_1_0 = (RuleCall)cErrorCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFailthencountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFailthenCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_8_1_0 = (RuleCall)cFailthenCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAndthencountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cAndthenCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_9_1_0 = (RuleCall)cAndthenCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cTbdKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTbdCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_10_1_0 = (RuleCall)cTbdCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cWeightKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cWeightAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_11_1_0 = (RuleCall)cWeightAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cMessageKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cSucessMsgAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cSucessMsgSTRINGTerminalRuleCall_12_1_0 = (RuleCall)cSucessMsgAssignment_12_1.eContents().get(0);
		private final Assignment cVerificationActivityResultAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cVerificationActivityResultVerificationExprParserRuleCall_13_0 = (RuleCall)cVerificationActivityResultAssignment_13.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//PreconditionResult:
		//	"precondition" name=ID "for" target=[Verify::VerificationPrecondition|QualifiedName] "[" ("successcount"
		//	successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
		//	("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
		//	verificationActivityResult+=VerificationExpr* "]";
		public ParserRule getRule() { return rule; }

		//"precondition" name=ID "for" target=[Verify::VerificationPrecondition|QualifiedName] "[" ("successcount"
		//successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
		//("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
		//verificationActivityResult+=VerificationExpr* "]"
		public Group getGroup() { return cGroup; }

		//"precondition"
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//target=[Verify::VerificationPrecondition|QualifiedName]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[Verify::VerificationPrecondition|QualifiedName]
		public CrossReference getTargetVerificationPreconditionCrossReference_3_0() { return cTargetVerificationPreconditionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTargetVerificationPreconditionQualifiedNameParserRuleCall_3_0_1() { return cTargetVerificationPreconditionQualifiedNameParserRuleCall_3_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//("successcount" successCount=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"successcount"
		public Keyword getSuccesscountKeyword_5_0() { return cSuccesscountKeyword_5_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_5_1() { return cSuccessCountAssignment_5_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_5_1_0() { return cSuccessCountINTTerminalRuleCall_5_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"failcount"
		public Keyword getFailcountKeyword_6_0() { return cFailcountKeyword_6_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_6_1() { return cFailCountAssignment_6_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_6_1_0() { return cFailCountINTTerminalRuleCall_6_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"errorcount"
		public Keyword getErrorcountKeyword_7_0() { return cErrorcountKeyword_7_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_7_1() { return cErrorCountAssignment_7_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_7_1_0() { return cErrorCountINTTerminalRuleCall_7_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"failthencount"
		public Keyword getFailthencountKeyword_8_0() { return cFailthencountKeyword_8_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_8_1() { return cFailthenCountAssignment_8_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_8_1_0() { return cFailthenCountINTTerminalRuleCall_8_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"andthencount"
		public Keyword getAndthencountKeyword_9_0() { return cAndthencountKeyword_9_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_9_1() { return cAndthenCountAssignment_9_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_9_1_0() { return cAndthenCountINTTerminalRuleCall_9_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"tbd"
		public Keyword getTbdKeyword_10_0() { return cTbdKeyword_10_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_10_1() { return cTbdCountAssignment_10_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_10_1_0() { return cTbdCountINTTerminalRuleCall_10_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"weight"
		public Keyword getWeightKeyword_11_0() { return cWeightKeyword_11_0; }

		//weight=INT
		public Assignment getWeightAssignment_11_1() { return cWeightAssignment_11_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_11_1_0() { return cWeightINTTerminalRuleCall_11_1_0; }

		//("message" sucessMsg=STRING)?
		public Group getGroup_12() { return cGroup_12; }

		//"message"
		public Keyword getMessageKeyword_12_0() { return cMessageKeyword_12_0; }

		//sucessMsg=STRING
		public Assignment getSucessMsgAssignment_12_1() { return cSucessMsgAssignment_12_1; }

		//STRING
		public RuleCall getSucessMsgSTRINGTerminalRuleCall_12_1_0() { return cSucessMsgSTRINGTerminalRuleCall_12_1_0; }

		//verificationActivityResult+=VerificationExpr*
		public Assignment getVerificationActivityResultAssignment_13() { return cVerificationActivityResultAssignment_13; }

		//VerificationExpr
		public RuleCall getVerificationActivityResultVerificationExprParserRuleCall_13_0() { return cVerificationActivityResultVerificationExprParserRuleCall_13_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_14() { return cRightSquareBracketKeyword_14; }
	}

	public class VerificationActivityResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationActivityResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetVerificationActivityCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetVerificationActivityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTargetVerificationActivityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExecutionstateKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExecutionStateAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExecutionStateVerificationExecutionStateEnumRuleCall_5_1_0 = (RuleCall)cExecutionStateAssignment_5_1.eContents().get(0);
		private final Assignment cResultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultVerificationResultParserRuleCall_6_0 = (RuleCall)cResultAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSuccesscountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSuccessCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_7_1_0 = (RuleCall)cSuccessCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFailcountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFailCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_8_1_0 = (RuleCall)cFailCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cErrorcountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cErrorCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_9_1_0 = (RuleCall)cErrorCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cFailthencountKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFailthenCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_10_1_0 = (RuleCall)cFailthenCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAndthencountKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAndthenCountAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_11_1_0 = (RuleCall)cAndthenCountAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cTbdKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cTbdCountAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_12_1_0 = (RuleCall)cTbdCountAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cWeightKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cWeightAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_13_1_0 = (RuleCall)cWeightAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cMessageKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cSucessMsgAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cSucessMsgSTRINGTerminalRuleCall_14_1_0 = (RuleCall)cSucessMsgAssignment_14_1.eContents().get(0);
		private final Assignment cAssumptionResultAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cAssumptionResultAssumptionResultParserRuleCall_15_0 = (RuleCall)cAssumptionResultAssignment_15.eContents().get(0);
		private final Assignment cPreconditionResultAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cPreconditionResultPreconditionResultParserRuleCall_16_0 = (RuleCall)cPreconditionResultAssignment_16.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//// result of executing a verification activity
		//VerificationActivityResult:
		//	"verification" name=ID "for" target=[Verify::VerificationActivity|QualifiedName] "[" ("executionstate"
		//	executionState=VerificationExecutionState) result=VerificationResult ("successcount" successCount=INT)? ("failcount"
		//	failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount"
		//	andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
		//	assumptionResult+=AssumptionResult* preconditionResult+=PreconditionResult* "]";
		public ParserRule getRule() { return rule; }

		//"verification" name=ID "for" target=[Verify::VerificationActivity|QualifiedName] "[" ("executionstate"
		//executionState=VerificationExecutionState) result=VerificationResult ("successcount" successCount=INT)? ("failcount"
		//failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount" andthenCount=INT)?
		//("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)? assumptionResult+=AssumptionResult*
		//preconditionResult+=PreconditionResult* "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//target=[Verify::VerificationActivity|QualifiedName]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[Verify::VerificationActivity|QualifiedName]
		public CrossReference getTargetVerificationActivityCrossReference_3_0() { return cTargetVerificationActivityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTargetVerificationActivityQualifiedNameParserRuleCall_3_0_1() { return cTargetVerificationActivityQualifiedNameParserRuleCall_3_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//"executionstate" executionState=VerificationExecutionState
		public Group getGroup_5() { return cGroup_5; }

		//"executionstate"
		public Keyword getExecutionstateKeyword_5_0() { return cExecutionstateKeyword_5_0; }

		//executionState=VerificationExecutionState
		public Assignment getExecutionStateAssignment_5_1() { return cExecutionStateAssignment_5_1; }

		//VerificationExecutionState
		public RuleCall getExecutionStateVerificationExecutionStateEnumRuleCall_5_1_0() { return cExecutionStateVerificationExecutionStateEnumRuleCall_5_1_0; }

		//result=VerificationResult
		public Assignment getResultAssignment_6() { return cResultAssignment_6; }

		//VerificationResult
		public RuleCall getResultVerificationResultParserRuleCall_6_0() { return cResultVerificationResultParserRuleCall_6_0; }

		//("successcount" successCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"successcount"
		public Keyword getSuccesscountKeyword_7_0() { return cSuccesscountKeyword_7_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_7_1() { return cSuccessCountAssignment_7_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_7_1_0() { return cSuccessCountINTTerminalRuleCall_7_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"failcount"
		public Keyword getFailcountKeyword_8_0() { return cFailcountKeyword_8_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_8_1() { return cFailCountAssignment_8_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_8_1_0() { return cFailCountINTTerminalRuleCall_8_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"errorcount"
		public Keyword getErrorcountKeyword_9_0() { return cErrorcountKeyword_9_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_9_1() { return cErrorCountAssignment_9_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_9_1_0() { return cErrorCountINTTerminalRuleCall_9_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"failthencount"
		public Keyword getFailthencountKeyword_10_0() { return cFailthencountKeyword_10_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_10_1() { return cFailthenCountAssignment_10_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_10_1_0() { return cFailthenCountINTTerminalRuleCall_10_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"andthencount"
		public Keyword getAndthencountKeyword_11_0() { return cAndthencountKeyword_11_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_11_1() { return cAndthenCountAssignment_11_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_11_1_0() { return cAndthenCountINTTerminalRuleCall_11_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_12() { return cGroup_12; }

		//"tbd"
		public Keyword getTbdKeyword_12_0() { return cTbdKeyword_12_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_12_1() { return cTbdCountAssignment_12_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_12_1_0() { return cTbdCountINTTerminalRuleCall_12_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_13() { return cGroup_13; }

		//"weight"
		public Keyword getWeightKeyword_13_0() { return cWeightKeyword_13_0; }

		//weight=INT
		public Assignment getWeightAssignment_13_1() { return cWeightAssignment_13_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_13_1_0() { return cWeightINTTerminalRuleCall_13_1_0; }

		//("message" sucessMsg=STRING)?
		public Group getGroup_14() { return cGroup_14; }

		//"message"
		public Keyword getMessageKeyword_14_0() { return cMessageKeyword_14_0; }

		//sucessMsg=STRING
		public Assignment getSucessMsgAssignment_14_1() { return cSucessMsgAssignment_14_1; }

		//STRING
		public RuleCall getSucessMsgSTRINGTerminalRuleCall_14_1_0() { return cSucessMsgSTRINGTerminalRuleCall_14_1_0; }

		//assumptionResult+=AssumptionResult*
		public Assignment getAssumptionResultAssignment_15() { return cAssumptionResultAssignment_15; }

		//AssumptionResult
		public RuleCall getAssumptionResultAssumptionResultParserRuleCall_15_0() { return cAssumptionResultAssumptionResultParserRuleCall_15_0; }

		//preconditionResult+=PreconditionResult*
		public Assignment getPreconditionResultAssignment_16() { return cPreconditionResultAssignment_16; }

		//PreconditionResult
		public RuleCall getPreconditionResultPreconditionResultParserRuleCall_16_0() { return cPreconditionResultPreconditionResultParserRuleCall_16_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_17() { return cRightSquareBracketKeyword_17; }
	}

	public class AssureResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssureResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerificationExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaseResultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClaimResultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPreconditionResultParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssumptionResultParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AssureResult:
		//	VerificationExpr | CaseResult | ClaimResult | PreconditionResult | AssumptionResult;
		public ParserRule getRule() { return rule; }

		//VerificationExpr | CaseResult | ClaimResult | PreconditionResult | AssumptionResult
		public Alternatives getAlternatives() { return cAlternatives; }

		//VerificationExpr
		public RuleCall getVerificationExprParserRuleCall_0() { return cVerificationExprParserRuleCall_0; }

		//CaseResult
		public RuleCall getCaseResultParserRuleCall_1() { return cCaseResultParserRuleCall_1; }

		//ClaimResult
		public RuleCall getClaimResultParserRuleCall_2() { return cClaimResultParserRuleCall_2; }

		//PreconditionResult
		public RuleCall getPreconditionResultParserRuleCall_3() { return cPreconditionResultParserRuleCall_3; }

		//AssumptionResult
		public RuleCall getAssumptionResultParserRuleCall_4() { return cAssumptionResultParserRuleCall_4; }
	}

	public class VerificationExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerificationActivityResultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFailThenResultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndThenResultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VerificationExpr:
		//	VerificationActivityResult | FailThenResult | AndThenResult;
		public ParserRule getRule() { return rule; }

		//VerificationActivityResult | FailThenResult | AndThenResult
		public Alternatives getAlternatives() { return cAlternatives; }

		//VerificationActivityResult
		public RuleCall getVerificationActivityResultParserRuleCall_0() { return cVerificationActivityResultParserRuleCall_0; }

		//FailThenResult
		public RuleCall getFailThenResultParserRuleCall_1() { return cFailThenResultParserRuleCall_1; }

		//AndThenResult
		public RuleCall getAndThenResultParserRuleCall_2() { return cAndThenResultParserRuleCall_2; }
	}

	public class FailThenResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FailThenResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFailthenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstVerificationExprParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondVerificationExprParserRuleCall_3_0 = (RuleCall)cSecondAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDidFailThenFailAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cDidFailThenFailFailthenfailedKeyword_5_0 = (Keyword)cDidFailThenFailAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSuccesscountKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSuccessCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_6_1_0 = (RuleCall)cSuccessCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFailcountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFailCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_7_1_0 = (RuleCall)cFailCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cErrorcountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cErrorCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_8_1_0 = (RuleCall)cErrorCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cFailthencountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFailthenCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_9_1_0 = (RuleCall)cFailthenCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAndthencountKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAndthenCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_10_1_0 = (RuleCall)cAndthenCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cTbdKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTbdCountAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_11_1_0 = (RuleCall)cTbdCountAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cWeightKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cWeightAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_12_1_0 = (RuleCall)cWeightAssignment_12_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//FailThenResult:
		//	"failthen" first+=VerificationExpr "do" second+=VerificationExpr "[" didFailThenFail?="failthenfailed"?
		//	("successcount" successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount"
		//	failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? "]";
		public ParserRule getRule() { return rule; }

		//"failthen" first+=VerificationExpr "do" second+=VerificationExpr "[" didFailThenFail?="failthenfailed"? ("successcount"
		//successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
		//("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? "]"
		public Group getGroup() { return cGroup; }

		//"failthen"
		public Keyword getFailthenKeyword_0() { return cFailthenKeyword_0; }

		//first+=VerificationExpr
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//VerificationExpr
		public RuleCall getFirstVerificationExprParserRuleCall_1_0() { return cFirstVerificationExprParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//second+=VerificationExpr
		public Assignment getSecondAssignment_3() { return cSecondAssignment_3; }

		//VerificationExpr
		public RuleCall getSecondVerificationExprParserRuleCall_3_0() { return cSecondVerificationExprParserRuleCall_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//didFailThenFail?="failthenfailed"?
		public Assignment getDidFailThenFailAssignment_5() { return cDidFailThenFailAssignment_5; }

		//"failthenfailed"
		public Keyword getDidFailThenFailFailthenfailedKeyword_5_0() { return cDidFailThenFailFailthenfailedKeyword_5_0; }

		//("successcount" successCount=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"successcount"
		public Keyword getSuccesscountKeyword_6_0() { return cSuccesscountKeyword_6_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_6_1() { return cSuccessCountAssignment_6_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_6_1_0() { return cSuccessCountINTTerminalRuleCall_6_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"failcount"
		public Keyword getFailcountKeyword_7_0() { return cFailcountKeyword_7_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_7_1() { return cFailCountAssignment_7_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_7_1_0() { return cFailCountINTTerminalRuleCall_7_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"errorcount"
		public Keyword getErrorcountKeyword_8_0() { return cErrorcountKeyword_8_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_8_1() { return cErrorCountAssignment_8_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_8_1_0() { return cErrorCountINTTerminalRuleCall_8_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"failthencount"
		public Keyword getFailthencountKeyword_9_0() { return cFailthencountKeyword_9_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_9_1() { return cFailthenCountAssignment_9_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_9_1_0() { return cFailthenCountINTTerminalRuleCall_9_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"andthencount"
		public Keyword getAndthencountKeyword_10_0() { return cAndthencountKeyword_10_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_10_1() { return cAndthenCountAssignment_10_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_10_1_0() { return cAndthenCountINTTerminalRuleCall_10_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"tbd"
		public Keyword getTbdKeyword_11_0() { return cTbdKeyword_11_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_11_1() { return cTbdCountAssignment_11_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_11_1_0() { return cTbdCountINTTerminalRuleCall_11_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_12() { return cGroup_12; }

		//"weight"
		public Keyword getWeightKeyword_12_0() { return cWeightKeyword_12_0; }

		//weight=INT
		public Assignment getWeightAssignment_12_1() { return cWeightAssignment_12_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_12_1_0() { return cWeightINTTerminalRuleCall_12_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
	}

	public class AndThenResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndThenResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndthenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstVerificationExprParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondVerificationExprParserRuleCall_3_0 = (RuleCall)cSecondAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDidAndThenFailAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cDidAndThenFailAndthenfailedKeyword_5_0 = (Keyword)cDidAndThenFailAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSuccesscountKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSuccessCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_6_1_0 = (RuleCall)cSuccessCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFailcountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFailCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_7_1_0 = (RuleCall)cFailCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cErrorcountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cErrorCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_8_1_0 = (RuleCall)cErrorCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cFailthencountKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFailthenCountAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFailthenCountINTTerminalRuleCall_9_1_0 = (RuleCall)cFailthenCountAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAndthencountKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAndthenCountAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAndthenCountINTTerminalRuleCall_10_1_0 = (RuleCall)cAndthenCountAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cTbdKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTbdCountAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_11_1_0 = (RuleCall)cTbdCountAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cWeightKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cWeightAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_12_1_0 = (RuleCall)cWeightAssignment_12_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//AndThenResult:
		//	"andthen" first+=VerificationExpr "do" second+=VerificationExpr "[" didAndThenFail?="andthenfailed"? ("successcount"
		//	successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
		//	("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? "]";
		public ParserRule getRule() { return rule; }

		//"andthen" first+=VerificationExpr "do" second+=VerificationExpr "[" didAndThenFail?="andthenfailed"? ("successcount"
		//successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
		//("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? "]"
		public Group getGroup() { return cGroup; }

		//"andthen"
		public Keyword getAndthenKeyword_0() { return cAndthenKeyword_0; }

		//first+=VerificationExpr
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//VerificationExpr
		public RuleCall getFirstVerificationExprParserRuleCall_1_0() { return cFirstVerificationExprParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//second+=VerificationExpr
		public Assignment getSecondAssignment_3() { return cSecondAssignment_3; }

		//VerificationExpr
		public RuleCall getSecondVerificationExprParserRuleCall_3_0() { return cSecondVerificationExprParserRuleCall_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//didAndThenFail?="andthenfailed"?
		public Assignment getDidAndThenFailAssignment_5() { return cDidAndThenFailAssignment_5; }

		//"andthenfailed"
		public Keyword getDidAndThenFailAndthenfailedKeyword_5_0() { return cDidAndThenFailAndthenfailedKeyword_5_0; }

		//("successcount" successCount=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"successcount"
		public Keyword getSuccesscountKeyword_6_0() { return cSuccesscountKeyword_6_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_6_1() { return cSuccessCountAssignment_6_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_6_1_0() { return cSuccessCountINTTerminalRuleCall_6_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"failcount"
		public Keyword getFailcountKeyword_7_0() { return cFailcountKeyword_7_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_7_1() { return cFailCountAssignment_7_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_7_1_0() { return cFailCountINTTerminalRuleCall_7_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"errorcount"
		public Keyword getErrorcountKeyword_8_0() { return cErrorcountKeyword_8_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_8_1() { return cErrorCountAssignment_8_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_8_1_0() { return cErrorCountINTTerminalRuleCall_8_1_0; }

		//("failthencount" failthenCount=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"failthencount"
		public Keyword getFailthencountKeyword_9_0() { return cFailthencountKeyword_9_0; }

		//failthenCount=INT
		public Assignment getFailthenCountAssignment_9_1() { return cFailthenCountAssignment_9_1; }

		//INT
		public RuleCall getFailthenCountINTTerminalRuleCall_9_1_0() { return cFailthenCountINTTerminalRuleCall_9_1_0; }

		//("andthencount" andthenCount=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"andthencount"
		public Keyword getAndthencountKeyword_10_0() { return cAndthencountKeyword_10_0; }

		//andthenCount=INT
		public Assignment getAndthenCountAssignment_10_1() { return cAndthenCountAssignment_10_1; }

		//INT
		public RuleCall getAndthenCountINTTerminalRuleCall_10_1_0() { return cAndthenCountINTTerminalRuleCall_10_1_0; }

		//("tbd" tbdCount=INT)?
		public Group getGroup_11() { return cGroup_11; }

		//"tbd"
		public Keyword getTbdKeyword_11_0() { return cTbdKeyword_11_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_11_1() { return cTbdCountAssignment_11_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_11_1_0() { return cTbdCountINTTerminalRuleCall_11_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_12() { return cGroup_12; }

		//"weight"
		public Keyword getWeightKeyword_12_0() { return cWeightKeyword_12_0; }

		//weight=INT
		public Assignment getWeightAssignment_12_1() { return cWeightAssignment_12_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_12_1_0() { return cWeightINTTerminalRuleCall_12_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
	}

	public class VerificationResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultstateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResultStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultStateVerificationResultStateEnumRuleCall_1_0 = (RuleCall)cResultStateAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFailtypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFailmessageKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFailMsgAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFailMsgSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFailMsgAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFailtargetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFailTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFailTargetEObjectCrossReference_4_1_0 = (CrossReference)cFailTargetAssignment_4_1.eContents().get(0);
		private final RuleCall cFailTargetEObjectQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cFailTargetEObjectCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReportKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cResultReportAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cResultReportResultReportCrossReference_5_1_0 = (CrossReference)cResultReportAssignment_5_1.eContents().get(0);
		private final RuleCall cResultReportResultReportQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cResultReportResultReportCrossReference_5_1_0.eContents().get(1);
		
		//VerificationResult:
		//	"resultstate" resultState=VerificationResultState ("failtype" type=STRING)? ("failmessage" failMsg=STRING)?
		//	("failtarget" failTarget=[ecore::EObject|QualifiedName])? ("report"
		//	resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
		//;
		public ParserRule getRule() { return rule; }

		//"resultstate" resultState=VerificationResultState ("failtype" type=STRING)? ("failmessage" failMsg=STRING)?
		//("failtarget" failTarget=[ecore::EObject|QualifiedName])? ("report"
		//resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
		public Group getGroup() { return cGroup; }

		//"resultstate"
		public Keyword getResultstateKeyword_0() { return cResultstateKeyword_0; }

		//resultState=VerificationResultState
		public Assignment getResultStateAssignment_1() { return cResultStateAssignment_1; }

		//VerificationResultState
		public RuleCall getResultStateVerificationResultStateEnumRuleCall_1_0() { return cResultStateVerificationResultStateEnumRuleCall_1_0; }

		//("failtype" type=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"failtype"
		public Keyword getFailtypeKeyword_2_0() { return cFailtypeKeyword_2_0; }

		//type=STRING
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_2_1_0() { return cTypeSTRINGTerminalRuleCall_2_1_0; }

		//("failmessage" failMsg=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"failmessage"
		public Keyword getFailmessageKeyword_3_0() { return cFailmessageKeyword_3_0; }

		//failMsg=STRING
		public Assignment getFailMsgAssignment_3_1() { return cFailMsgAssignment_3_1; }

		//STRING
		public RuleCall getFailMsgSTRINGTerminalRuleCall_3_1_0() { return cFailMsgSTRINGTerminalRuleCall_3_1_0; }

		//("failtarget" failTarget=[ecore::EObject|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"failtarget"
		public Keyword getFailtargetKeyword_4_0() { return cFailtargetKeyword_4_0; }

		//failTarget=[ecore::EObject|QualifiedName]
		public Assignment getFailTargetAssignment_4_1() { return cFailTargetAssignment_4_1; }

		//[ecore::EObject|QualifiedName]
		public CrossReference getFailTargetEObjectCrossReference_4_1_0() { return cFailTargetEObjectCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getFailTargetEObjectQualifiedNameParserRuleCall_4_1_0_1() { return cFailTargetEObjectQualifiedNameParserRuleCall_4_1_0_1; }

		//("report" resultReport=[results::ResultReport|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }

		//"report"
		public Keyword getReportKeyword_5_0() { return cReportKeyword_5_0; }

		//resultReport=[results::ResultReport|QualifiedName]
		public Assignment getResultReportAssignment_5_1() { return cResultReportAssignment_5_1; }

		//[results::ResultReport|QualifiedName]
		public CrossReference getResultReportResultReportCrossReference_5_1_0() { return cResultReportResultReportCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getResultReportResultReportQualifiedNameParserRuleCall_5_1_0_1() { return cResultReportResultReportQualifiedNameParserRuleCall_5_1_0_1; }
	}
	
	
	public class VerificationResultStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationResultState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTBDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTBDTbdKeyword_0_0 = (Keyword)cTBDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUCCESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUCCESSSuccessKeyword_1_0 = (Keyword)cSUCCESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFAILEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFAILFailKeyword_2_0 = (Keyword)cFAILEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cErrorErrorKeyword_3_0 = (Keyword)cErrorEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VerificationResultState:
		//	TBD="tbd" | SUCCESS="success" | FAIL="fail" | error;
		public EnumRule getRule() { return rule; }

		//TBD="tbd" | SUCCESS="success" | FAIL="fail" | error
		public Alternatives getAlternatives() { return cAlternatives; }

		//TBD="tbd"
		public EnumLiteralDeclaration getTBDEnumLiteralDeclaration_0() { return cTBDEnumLiteralDeclaration_0; }

		//"tbd"
		public Keyword getTBDTbdKeyword_0_0() { return cTBDTbdKeyword_0_0; }

		//SUCCESS="success"
		public EnumLiteralDeclaration getSUCCESSEnumLiteralDeclaration_1() { return cSUCCESSEnumLiteralDeclaration_1; }

		//"success"
		public Keyword getSUCCESSSuccessKeyword_1_0() { return cSUCCESSSuccessKeyword_1_0; }

		//FAIL="fail"
		public EnumLiteralDeclaration getFAILEnumLiteralDeclaration_2() { return cFAILEnumLiteralDeclaration_2; }

		//"fail"
		public Keyword getFAILFailKeyword_2_0() { return cFAILFailKeyword_2_0; }

		//error
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_3() { return cErrorEnumLiteralDeclaration_3; }

		//"error"
		public Keyword getErrorErrorKeyword_3_0() { return cErrorErrorKeyword_3_0; }
	}

	public class VerificationExecutionStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationExecutionState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTODOEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTODOTodoKeyword_0_0 = (Keyword)cTODOEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRUNNINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRUNNINGRunningKeyword_1_0 = (Keyword)cRUNNINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREDOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREDORedoKeyword_2_0 = (Keyword)cREDOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPLETEDCompletedKeyword_3_0 = (Keyword)cCOMPLETEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VerificationExecutionState:
		//	TODO= // verification to be performed
		//	"todo" | RUNNING= // verification in progress (background processing)
		//	"running" | REDO= // invalidated while in progress. redo verification.
		//	"redo" | COMPLETED= // completed. verification result is valid
		//	"completed";
		public EnumRule getRule() { return rule; }

		//TODO= // verification to be performed
		//"todo" | RUNNING= // verification in progress (background processing)
		//"running" | REDO= // invalidated while in progress. redo verification.
		//"redo" | COMPLETED= // completed. verification result is valid
		//"completed"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TODO= // verification to be performed
		//"todo"
		public EnumLiteralDeclaration getTODOEnumLiteralDeclaration_0() { return cTODOEnumLiteralDeclaration_0; }

		//// verification to be performed
		//"todo"
		public Keyword getTODOTodoKeyword_0_0() { return cTODOTodoKeyword_0_0; }

		//RUNNING= // verification in progress (background processing)
		//"running"
		public EnumLiteralDeclaration getRUNNINGEnumLiteralDeclaration_1() { return cRUNNINGEnumLiteralDeclaration_1; }

		//// verification in progress (background processing)
		//"running"
		public Keyword getRUNNINGRunningKeyword_1_0() { return cRUNNINGRunningKeyword_1_0; }

		//REDO= // invalidated while in progress. redo verification.
		//"redo"
		public EnumLiteralDeclaration getREDOEnumLiteralDeclaration_2() { return cREDOEnumLiteralDeclaration_2; }

		//// invalidated while in progress. redo verification.
		//"redo"
		public Keyword getREDORedoKeyword_2_0() { return cREDORedoKeyword_2_0; }

		//COMPLETED= // completed. verification result is valid
		//"completed"
		public EnumLiteralDeclaration getCOMPLETEDEnumLiteralDeclaration_3() { return cCOMPLETEDEnumLiteralDeclaration_3; }

		//// completed. verification result is valid
		//"completed"
		public Keyword getCOMPLETEDCompletedKeyword_3_0() { return cCOMPLETEDCompletedKeyword_3_0; }
	}
	
	private final CaseResultElements pCaseResult;
	private final ClaimResultElements pClaimResult;
	private final AssumptionResultElements pAssumptionResult;
	private final PreconditionResultElements pPreconditionResult;
	private final VerificationActivityResultElements pVerificationActivityResult;
	private final AssureResultElements pAssureResult;
	private final VerificationExprElements pVerificationExpr;
	private final FailThenResultElements pFailThenResult;
	private final AndThenResultElements pAndThenResult;
	private final VerificationResultElements pVerificationResult;
	private final VerificationResultStateElements unknownRuleVerificationResultState;
	private final VerificationExecutionStateElements unknownRuleVerificationExecutionState;
	
	private final Grammar grammar;

	private final CommonGrammarAccess gaCommon;

	@Inject
	public AssureGrammarAccess(GrammarProvider grammarProvider,
		CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pCaseResult = new CaseResultElements();
		this.pClaimResult = new ClaimResultElements();
		this.pAssumptionResult = new AssumptionResultElements();
		this.pPreconditionResult = new PreconditionResultElements();
		this.pVerificationActivityResult = new VerificationActivityResultElements();
		this.pAssureResult = new AssureResultElements();
		this.pVerificationExpr = new VerificationExprElements();
		this.pFailThenResult = new FailThenResultElements();
		this.pAndThenResult = new AndThenResultElements();
		this.pVerificationResult = new VerificationResultElements();
		this.unknownRuleVerificationResultState = new VerificationResultStateElements();
		this.unknownRuleVerificationExecutionState = new VerificationExecutionStateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.assure.Assure".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	//// We assume that conditional selection has occurred during instantiation
	//// result for a system in the architecture hierarchy
	//CaseResult:
	//	"case" name=ID "for" target=[aadl2::Classifier|AadlClassifierReference] "instance"
	//	instance=[instance::InstanceObject|URIID] "[" ("successcount" successCount=INT)? ("failcount" failCount=INT)?
	//	("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd"
	//	tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)? subCaseResult+=CaseResult*
	//	claimResult+=ClaimResult* "]";
	public CaseResultElements getCaseResultAccess() {
		return pCaseResult;
	}
	
	public ParserRule getCaseResultRule() {
		return getCaseResultAccess().getRule();
	}

	//// Result of meeting a requirement
	//ClaimResult:
	//	"claim" name=ID "for" target=[ReqSpec::Requirement|QualifiedName] ("instance"
	//	instance=[instance::InstanceObject|URIID])? // if the requirement is for an element of the component instance
	//	"[" ("successcount" successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount"
	//	failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("successMsg"
	//	sucessMsg=STRING)? subClaimResult+=ClaimResult* verificationActivityResult+=VerificationExpr* "]";
	public ClaimResultElements getClaimResultAccess() {
		return pClaimResult;
	}
	
	public ParserRule getClaimResultRule() {
		return getClaimResultAccess().getRule();
	}

	//AssumptionResult:
	//	"assumption" name=ID "for" target=[Verify::VerificationAssumption|QualifiedName] "[" ("successcount"
	//	successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
	//	("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
	//	verificationActivityResult+=VerificationExpr* "]";
	public AssumptionResultElements getAssumptionResultAccess() {
		return pAssumptionResult;
	}
	
	public ParserRule getAssumptionResultRule() {
		return getAssumptionResultAccess().getRule();
	}

	//PreconditionResult:
	//	"precondition" name=ID "for" target=[Verify::VerificationPrecondition|QualifiedName] "[" ("successcount"
	//	successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
	//	("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
	//	verificationActivityResult+=VerificationExpr* "]";
	public PreconditionResultElements getPreconditionResultAccess() {
		return pPreconditionResult;
	}
	
	public ParserRule getPreconditionResultRule() {
		return getPreconditionResultAccess().getRule();
	}

	//// result of executing a verification activity
	//VerificationActivityResult:
	//	"verification" name=ID "for" target=[Verify::VerificationActivity|QualifiedName] "[" ("executionstate"
	//	executionState=VerificationExecutionState) result=VerificationResult ("successcount" successCount=INT)? ("failcount"
	//	failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)? ("andthencount"
	//	andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? ("message" sucessMsg=STRING)?
	//	assumptionResult+=AssumptionResult* preconditionResult+=PreconditionResult* "]";
	public VerificationActivityResultElements getVerificationActivityResultAccess() {
		return pVerificationActivityResult;
	}
	
	public ParserRule getVerificationActivityResultRule() {
		return getVerificationActivityResultAccess().getRule();
	}

	//AssureResult:
	//	VerificationExpr | CaseResult | ClaimResult | PreconditionResult | AssumptionResult;
	public AssureResultElements getAssureResultAccess() {
		return pAssureResult;
	}
	
	public ParserRule getAssureResultRule() {
		return getAssureResultAccess().getRule();
	}

	//VerificationExpr:
	//	VerificationActivityResult | FailThenResult | AndThenResult;
	public VerificationExprElements getVerificationExprAccess() {
		return pVerificationExpr;
	}
	
	public ParserRule getVerificationExprRule() {
		return getVerificationExprAccess().getRule();
	}

	//FailThenResult:
	//	"failthen" first+=VerificationExpr "do" second+=VerificationExpr "[" didFailThenFail?="failthenfailed"?
	//	("successcount" successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount"
	//	failthenCount=INT)? ("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? "]";
	public FailThenResultElements getFailThenResultAccess() {
		return pFailThenResult;
	}
	
	public ParserRule getFailThenResultRule() {
		return getFailThenResultAccess().getRule();
	}

	//AndThenResult:
	//	"andthen" first+=VerificationExpr "do" second+=VerificationExpr "[" didAndThenFail?="andthenfailed"? ("successcount"
	//	successCount=INT)? ("failcount" failCount=INT)? ("errorcount" errorCount=INT)? ("failthencount" failthenCount=INT)?
	//	("andthencount" andthenCount=INT)? ("tbd" tbdCount=INT)? ("weight" weight=INT)? "]";
	public AndThenResultElements getAndThenResultAccess() {
		return pAndThenResult;
	}
	
	public ParserRule getAndThenResultRule() {
		return getAndThenResultAccess().getRule();
	}

	//VerificationResult:
	//	"resultstate" resultState=VerificationResultState ("failtype" type=STRING)? ("failmessage" failMsg=STRING)?
	//	("failtarget" failTarget=[ecore::EObject|QualifiedName])? ("report"
	//	resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	//;
	public VerificationResultElements getVerificationResultAccess() {
		return pVerificationResult;
	}
	
	public ParserRule getVerificationResultRule() {
		return getVerificationResultAccess().getRule();
	}

	//enum VerificationResultState:
	//	TBD="tbd" | SUCCESS="success" | FAIL="fail" | error;
	public VerificationResultStateElements getVerificationResultStateAccess() {
		return unknownRuleVerificationResultState;
	}
	
	public EnumRule getVerificationResultStateRule() {
		return getVerificationResultStateAccess().getRule();
	}

	//enum VerificationExecutionState:
	//	TODO= // verification to be performed
	//	"todo" | RUNNING= // verification in progress (background processing)
	//	"running" | REDO= // invalidated while in progress. redo verification.
	//	"redo" | COMPLETED= // completed. verification result is valid
	//	"completed";
	public VerificationExecutionStateElements getVerificationExecutionStateAccess() {
		return unknownRuleVerificationExecutionState;
	}
	
	public EnumRule getVerificationExecutionStateRule() {
		return getVerificationExecutionStateAccess().getRule();
	}

	//Model:
	//	content=Description;
	public CommonGrammarAccess.ModelElements getModelAccess() {
		return gaCommon.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Description:
	//	description+=DescriptionElement+;
	public CommonGrammarAccess.DescriptionElements getDescriptionAccess() {
		return gaCommon.getDescriptionAccess();
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//DescriptionElement:
	//	text=STRING | ref=[ecore::EObject] | newline?="&" | thisTarget?="this";
	public CommonGrammarAccess.DescriptionElementElements getDescriptionElementAccess() {
		return gaCommon.getDescriptionElementAccess();
	}
	
	public ParserRule getDescriptionElementRule() {
		return getDescriptionElementAccess().getRule();
	}

	//ReferencePath:
	//	ref=[ecore::EObject] ("." subpath=ReferencePath);
	public CommonGrammarAccess.ReferencePathElements getReferencePathAccess() {
		return gaCommon.getReferencePathAccess();
	}
	
	public ParserRule getReferencePathRule() {
		return getReferencePathAccess().getRule();
	}

	//// Dummy placeholder for comparison conditions
	//PredicateExpression:
	//	ID op=("=" | "!=" | "<" | "=<" | ">" | ">=") ID;
	public CommonGrammarAccess.PredicateExpressionElements getPredicateExpressionAccess() {
		return gaCommon.getPredicateExpressionAccess();
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//FinalValue:
	//	name=ID "=" value=ValueString;
	public CommonGrammarAccess.FinalValueElements getFinalValueAccess() {
		return gaCommon.getFinalValueAccess();
	}
	
	public ParserRule getFinalValueRule() {
		return getFinalValueAccess().getRule();
	}

	//MultiLineString:
	//	description+=TextElement+;
	public CommonGrammarAccess.MultiLineStringElements getMultiLineStringAccess() {
		return gaCommon.getMultiLineStringAccess();
	}
	
	public ParserRule getMultiLineStringRule() {
		return getMultiLineStringAccess().getRule();
	}

	//TextElement:
	//	text=STRING | newline?="&";
	public CommonGrammarAccess.TextElementElements getTextElementAccess() {
		return gaCommon.getTextElementAccess();
	}
	
	public ParserRule getTextElementRule() {
		return getTextElementAccess().getRule();
	}

	//ValueString: // remove quotes from string in ValueConverter 
	//	STRING;
	public CommonGrammarAccess.ValueStringElements getValueStringAccess() {
		return gaCommon.getValueStringAccess();
	}
	
	public ParserRule getValueStringRule() {
		return getValueStringAccess().getRule();
	}

	//// Qualified classifier reference
	//AadlClassifierReference:
	//	(ID "::")* ID ("." ID)?;
	public CommonGrammarAccess.AadlClassifierReferenceElements getAadlClassifierReferenceAccess() {
		return gaCommon.getAadlClassifierReferenceAccess();
	}
	
	public ParserRule getAadlClassifierReferenceRule() {
		return getAadlClassifierReferenceAccess().getRule();
	}

	//// Category reference. Currently it is only a single ID
	//CatRef: //('.' ID)?
	//	ID;
	public CommonGrammarAccess.CatRefElements getCatRefAccess() {
		return gaCommon.getCatRefAccess();
	}
	
	public ParserRule getCatRefRule() {
		return getCatRefAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public CommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//URIID:
	//	STRING;
	public CommonGrammarAccess.URIIDElements getURIIDAccess() {
		return gaCommon.getURIIDAccess();
	}
	
	public ParserRule getURIIDRule() {
		return getURIIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaCommon.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCommon.getANY_OTHERRule();
	} 
}
