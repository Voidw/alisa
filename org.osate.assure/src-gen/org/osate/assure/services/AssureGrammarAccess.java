/*
 * generated by Xtext
 */
package org.osate.assure.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AssureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AssuranceCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssuranceCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTargetAssurancePlanCrossReference_2_1_0 = (CrossReference)cTargetAssignment_2_1.eContents().get(0);
		private final RuleCall cTargetAssurancePlanQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cTargetAssurancePlanCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSystemKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTargetSystemAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTargetSystemIDTerminalRuleCall_3_1_0 = (RuleCall)cTargetSystemAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetricsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetricsMetricsParserRuleCall_5_0 = (RuleCall)cMetricsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMessageKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMessageAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cMessageAssignment_6_1.eContents().get(0);
		private final Assignment cClaimResultAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cClaimResultClaimResultParserRuleCall_7_0 = (RuleCall)cClaimResultAssignment_7.eContents().get(0);
		private final Assignment cSubAssuranceCaseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSubAssuranceCaseAssuranceCaseParserRuleCall_8_0 = (RuleCall)cSubAssuranceCaseAssignment_8.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// result for a system in the architecture hierarchy
		//AssuranceCase:
		//	"case" name=QualifiedName ("for" target=[Alisa::AssurancePlan|QualifiedName])? ("system" targetSystem=ID)? "["
		//	metrics=Metrics ("message" message=STRING)? claimResult+=ClaimResult* subAssuranceCase+=AssuranceCase* "]";
		@Override public ParserRule getRule() { return rule; }

		//"case" name=QualifiedName ("for" target=[Alisa::AssurancePlan|QualifiedName])? ("system" targetSystem=ID)? "["
		//metrics=Metrics ("message" message=STRING)? claimResult+=ClaimResult* subAssuranceCase+=AssuranceCase* "]"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("for" target=[Alisa::AssurancePlan|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//target=[Alisa::AssurancePlan|QualifiedName]
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }

		//[Alisa::AssurancePlan|QualifiedName]
		public CrossReference getTargetAssurancePlanCrossReference_2_1_0() { return cTargetAssurancePlanCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getTargetAssurancePlanQualifiedNameParserRuleCall_2_1_0_1() { return cTargetAssurancePlanQualifiedNameParserRuleCall_2_1_0_1; }

		//("system" targetSystem=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"system"
		public Keyword getSystemKeyword_3_0() { return cSystemKeyword_3_0; }

		//targetSystem=ID
		public Assignment getTargetSystemAssignment_3_1() { return cTargetSystemAssignment_3_1; }

		//ID
		public RuleCall getTargetSystemIDTerminalRuleCall_3_1_0() { return cTargetSystemIDTerminalRuleCall_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//metrics=Metrics
		public Assignment getMetricsAssignment_5() { return cMetricsAssignment_5; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_5_0() { return cMetricsMetricsParserRuleCall_5_0; }

		//("message" message=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"message"
		public Keyword getMessageKeyword_6_0() { return cMessageKeyword_6_0; }

		//message=STRING
		public Assignment getMessageAssignment_6_1() { return cMessageAssignment_6_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_6_1_0() { return cMessageSTRINGTerminalRuleCall_6_1_0; }

		//claimResult+=ClaimResult*
		public Assignment getClaimResultAssignment_7() { return cClaimResultAssignment_7; }

		//ClaimResult
		public RuleCall getClaimResultClaimResultParserRuleCall_7_0() { return cClaimResultClaimResultParserRuleCall_7_0; }

		//subAssuranceCase+=AssuranceCase*
		public Assignment getSubAssuranceCaseAssignment_8() { return cSubAssuranceCaseAssignment_8; }

		//AssuranceCase
		public RuleCall getSubAssuranceCaseAssuranceCaseParserRuleCall_8_0() { return cSubAssuranceCaseAssuranceCaseParserRuleCall_8_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
	}

	public class ClaimResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClaimResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClaimKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetRequirementCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetRequirementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetRequirementCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetricsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetricsMetricsParserRuleCall_3_0 = (RuleCall)cMetricsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMessageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMessageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cMessageAssignment_4_1.eContents().get(0);
		private final Assignment cSubClaimResultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubClaimResultClaimResultParserRuleCall_5_0 = (RuleCall)cSubClaimResultAssignment_5.eContents().get(0);
		private final Assignment cVerificationActivityResultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVerificationActivityResultVerificationExprParserRuleCall_6_0 = (RuleCall)cVerificationActivityResultAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Result of meeting a requirement
		//ClaimResult:
		//	"claim" target=[ReqSpec::Requirement|QualifiedName] "[" metrics=Metrics ("message" message=STRING)?
		//	subClaimResult+=ClaimResult* verificationActivityResult+=VerificationExpr* "]";
		@Override public ParserRule getRule() { return rule; }

		//"claim" target=[ReqSpec::Requirement|QualifiedName] "[" metrics=Metrics ("message" message=STRING)?
		//subClaimResult+=ClaimResult* verificationActivityResult+=VerificationExpr* "]"
		public Group getGroup() { return cGroup; }

		//"claim"
		public Keyword getClaimKeyword_0() { return cClaimKeyword_0; }

		//target=[ReqSpec::Requirement|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[ReqSpec::Requirement|QualifiedName]
		public CrossReference getTargetRequirementCrossReference_1_0() { return cTargetRequirementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetRequirementQualifiedNameParserRuleCall_1_0_1() { return cTargetRequirementQualifiedNameParserRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//metrics=Metrics
		public Assignment getMetricsAssignment_3() { return cMetricsAssignment_3; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_3_0() { return cMetricsMetricsParserRuleCall_3_0; }

		//("message" message=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"message"
		public Keyword getMessageKeyword_4_0() { return cMessageKeyword_4_0; }

		//message=STRING
		public Assignment getMessageAssignment_4_1() { return cMessageAssignment_4_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_4_1_0() { return cMessageSTRINGTerminalRuleCall_4_1_0; }

		//subClaimResult+=ClaimResult*
		public Assignment getSubClaimResultAssignment_5() { return cSubClaimResultAssignment_5; }

		//ClaimResult
		public RuleCall getSubClaimResultClaimResultParserRuleCall_5_0() { return cSubClaimResultClaimResultParserRuleCall_5_0; }

		//verificationActivityResult+=VerificationExpr*
		public Assignment getVerificationActivityResultAssignment_6() { return cVerificationActivityResultAssignment_6; }

		//VerificationExpr
		public RuleCall getVerificationActivityResultVerificationExprParserRuleCall_6_0() { return cVerificationActivityResultVerificationExprParserRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class ConditionResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cPreconditionKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Action cPreconditionResultAction_0_0_1 = (Action)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cValidationKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cValidationResultAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVerificationConditionCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetVerificationConditionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetVerificationConditionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExecutionstateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExecutionStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExecutionStateVerificationExecutionStateEnumRuleCall_4_0 = (RuleCall)cExecutionStateAssignment_4.eContents().get(0);
		private final Keyword cResultstateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultStateVerificationResultStateEnumRuleCall_6_0 = (RuleCall)cResultStateAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIssuesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cIssuesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cIssuesResultIssueParserRuleCall_7_2_0 = (RuleCall)cIssuesAssignment_7_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReportKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cResultReportAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cResultReportResultReportCrossReference_8_1_0 = (CrossReference)cResultReportAssignment_8_1.eContents().get(0);
		private final RuleCall cResultReportResultReportQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cResultReportResultReportCrossReference_8_1_0.eContents().get(1);
		private final Assignment cMetricsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMetricsMetricsParserRuleCall_9_0 = (RuleCall)cMetricsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cMessageKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cMessageAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cMessageAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ConditionResult returns VerificationResult:
		//	("precondition" {PreconditionResult} | "validation" {ValidationResult})
		//	target=[Verify::VerificationCondition|QualifiedName] "[" "executionstate" executionState=VerificationExecutionState
		//	"resultstate" resultState=VerificationResultState ("issues" "[" issues+=ResultIssue* "]")? ("report"
		//	resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
		//	metrics=Metrics ("message" message=STRING)? "]";
		@Override public ParserRule getRule() { return rule; }

		//("precondition" {PreconditionResult} | "validation" {ValidationResult})
		//target=[Verify::VerificationCondition|QualifiedName] "[" "executionstate" executionState=VerificationExecutionState
		//"resultstate" resultState=VerificationResultState ("issues" "[" issues+=ResultIssue* "]")? ("report"
		//resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
		//metrics=Metrics ("message" message=STRING)? "]"
		public Group getGroup() { return cGroup; }

		//"precondition" {PreconditionResult} | "validation" {ValidationResult}
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"precondition" {PreconditionResult}
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"precondition"
		public Keyword getPreconditionKeyword_0_0_0() { return cPreconditionKeyword_0_0_0; }

		//{PreconditionResult}
		public Action getPreconditionResultAction_0_0_1() { return cPreconditionResultAction_0_0_1; }

		//"validation" {ValidationResult}
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"validation"
		public Keyword getValidationKeyword_0_1_0() { return cValidationKeyword_0_1_0; }

		//{ValidationResult}
		public Action getValidationResultAction_0_1_1() { return cValidationResultAction_0_1_1; }

		//target=[Verify::VerificationCondition|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[Verify::VerificationCondition|QualifiedName]
		public CrossReference getTargetVerificationConditionCrossReference_1_0() { return cTargetVerificationConditionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTargetVerificationConditionQualifiedNameParserRuleCall_1_0_1() { return cTargetVerificationConditionQualifiedNameParserRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//"executionstate"
		public Keyword getExecutionstateKeyword_3() { return cExecutionstateKeyword_3; }

		//executionState=VerificationExecutionState
		public Assignment getExecutionStateAssignment_4() { return cExecutionStateAssignment_4; }

		//VerificationExecutionState
		public RuleCall getExecutionStateVerificationExecutionStateEnumRuleCall_4_0() { return cExecutionStateVerificationExecutionStateEnumRuleCall_4_0; }

		//"resultstate"
		public Keyword getResultstateKeyword_5() { return cResultstateKeyword_5; }

		//resultState=VerificationResultState
		public Assignment getResultStateAssignment_6() { return cResultStateAssignment_6; }

		//VerificationResultState
		public RuleCall getResultStateVerificationResultStateEnumRuleCall_6_0() { return cResultStateVerificationResultStateEnumRuleCall_6_0; }

		//("issues" "[" issues+=ResultIssue* "]")?
		public Group getGroup_7() { return cGroup_7; }

		//"issues"
		public Keyword getIssuesKeyword_7_0() { return cIssuesKeyword_7_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }

		//issues+=ResultIssue*
		public Assignment getIssuesAssignment_7_2() { return cIssuesAssignment_7_2; }

		//ResultIssue
		public RuleCall getIssuesResultIssueParserRuleCall_7_2_0() { return cIssuesResultIssueParserRuleCall_7_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }

		//("report" resultReport=[results::ResultReport|QualifiedName])?
		public Group getGroup_8() { return cGroup_8; }

		//"report"
		public Keyword getReportKeyword_8_0() { return cReportKeyword_8_0; }

		//resultReport=[results::ResultReport|QualifiedName]
		public Assignment getResultReportAssignment_8_1() { return cResultReportAssignment_8_1; }

		//[results::ResultReport|QualifiedName]
		public CrossReference getResultReportResultReportCrossReference_8_1_0() { return cResultReportResultReportCrossReference_8_1_0; }

		//QualifiedName
		public RuleCall getResultReportResultReportQualifiedNameParserRuleCall_8_1_0_1() { return cResultReportResultReportQualifiedNameParserRuleCall_8_1_0_1; }

		//metrics=Metrics
		public Assignment getMetricsAssignment_9() { return cMetricsAssignment_9; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_9_0() { return cMetricsMetricsParserRuleCall_9_0; }

		//("message" message=STRING)?
		public Group getGroup_10() { return cGroup_10; }

		//"message"
		public Keyword getMessageKeyword_10_0() { return cMessageKeyword_10_0; }

		//message=STRING
		public Assignment getMessageAssignment_10_1() { return cMessageAssignment_10_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_10_1_0() { return cMessageSTRINGTerminalRuleCall_10_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
	}

	public class VerificationActivityResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationActivityResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVerificationActivityResultAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetVerificationActivityCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetVerificationActivityQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTargetVerificationActivityCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cExecutionstateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExecutionStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExecutionStateVerificationExecutionStateEnumRuleCall_5_0 = (RuleCall)cExecutionStateAssignment_5.eContents().get(0);
		private final Keyword cResultstateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cResultStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cResultStateVerificationResultStateEnumRuleCall_7_0 = (RuleCall)cResultStateAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIssuesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cIssuesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cIssuesResultIssueParserRuleCall_8_2_0 = (RuleCall)cIssuesAssignment_8_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cReportKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cResultReportAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cResultReportResultReportCrossReference_9_1_0 = (CrossReference)cResultReportAssignment_9_1.eContents().get(0);
		private final RuleCall cResultReportResultReportQualifiedNameParserRuleCall_9_1_0_1 = (RuleCall)cResultReportResultReportCrossReference_9_1_0.eContents().get(1);
		private final Assignment cMetricsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMetricsMetricsParserRuleCall_10_0 = (RuleCall)cMetricsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cMessageKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cMessageAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_11_1_0 = (RuleCall)cMessageAssignment_11_1.eContents().get(0);
		private final Assignment cConditionResultAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cConditionResultConditionResultParserRuleCall_12_0 = (RuleCall)cConditionResultAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//// result of executing a verification activity
		//VerificationActivityResult returns VerificationResult:
		//	"verification" {VerificationActivityResult} target=[Verify::VerificationActivity|QualifiedName] //	('instance' instance= [instance::InstanceObject|URIID])?
		//	"[" "executionstate" executionState=VerificationExecutionState "resultstate" resultState=VerificationResultState
		//	("issues" "[" issues+=ResultIssue* "]")? ("report" resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
		//	metrics=Metrics ("message" message=STRING)? conditionResult=ConditionResult? "]";
		@Override public ParserRule getRule() { return rule; }

		//"verification" {VerificationActivityResult} target=[Verify::VerificationActivity|QualifiedName] //	('instance' instance= [instance::InstanceObject|URIID])?
		//"[" "executionstate" executionState=VerificationExecutionState "resultstate" resultState=VerificationResultState
		//("issues" "[" issues+=ResultIssue* "]")? ("report" resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
		//metrics=Metrics ("message" message=STRING)? conditionResult=ConditionResult? "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//{VerificationActivityResult}
		public Action getVerificationActivityResultAction_1() { return cVerificationActivityResultAction_1; }

		//target=[Verify::VerificationActivity|QualifiedName]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[Verify::VerificationActivity|QualifiedName]
		public CrossReference getTargetVerificationActivityCrossReference_2_0() { return cTargetVerificationActivityCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTargetVerificationActivityQualifiedNameParserRuleCall_2_0_1() { return cTargetVerificationActivityQualifiedNameParserRuleCall_2_0_1; }

		////	('instance' instance= [instance::InstanceObject|URIID])?
		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//"executionstate"
		public Keyword getExecutionstateKeyword_4() { return cExecutionstateKeyword_4; }

		//executionState=VerificationExecutionState
		public Assignment getExecutionStateAssignment_5() { return cExecutionStateAssignment_5; }

		//VerificationExecutionState
		public RuleCall getExecutionStateVerificationExecutionStateEnumRuleCall_5_0() { return cExecutionStateVerificationExecutionStateEnumRuleCall_5_0; }

		//"resultstate"
		public Keyword getResultstateKeyword_6() { return cResultstateKeyword_6; }

		//resultState=VerificationResultState
		public Assignment getResultStateAssignment_7() { return cResultStateAssignment_7; }

		//VerificationResultState
		public RuleCall getResultStateVerificationResultStateEnumRuleCall_7_0() { return cResultStateVerificationResultStateEnumRuleCall_7_0; }

		//("issues" "[" issues+=ResultIssue* "]")?
		public Group getGroup_8() { return cGroup_8; }

		//"issues"
		public Keyword getIssuesKeyword_8_0() { return cIssuesKeyword_8_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }

		//issues+=ResultIssue*
		public Assignment getIssuesAssignment_8_2() { return cIssuesAssignment_8_2; }

		//ResultIssue
		public RuleCall getIssuesResultIssueParserRuleCall_8_2_0() { return cIssuesResultIssueParserRuleCall_8_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8_3() { return cRightSquareBracketKeyword_8_3; }

		//("report" resultReport=[results::ResultReport|QualifiedName])?
		public Group getGroup_9() { return cGroup_9; }

		//"report"
		public Keyword getReportKeyword_9_0() { return cReportKeyword_9_0; }

		//resultReport=[results::ResultReport|QualifiedName]
		public Assignment getResultReportAssignment_9_1() { return cResultReportAssignment_9_1; }

		//[results::ResultReport|QualifiedName]
		public CrossReference getResultReportResultReportCrossReference_9_1_0() { return cResultReportResultReportCrossReference_9_1_0; }

		//QualifiedName
		public RuleCall getResultReportResultReportQualifiedNameParserRuleCall_9_1_0_1() { return cResultReportResultReportQualifiedNameParserRuleCall_9_1_0_1; }

		//metrics=Metrics
		public Assignment getMetricsAssignment_10() { return cMetricsAssignment_10; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_10_0() { return cMetricsMetricsParserRuleCall_10_0; }

		//("message" message=STRING)?
		public Group getGroup_11() { return cGroup_11; }

		//"message"
		public Keyword getMessageKeyword_11_0() { return cMessageKeyword_11_0; }

		//message=STRING
		public Assignment getMessageAssignment_11_1() { return cMessageAssignment_11_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_11_1_0() { return cMessageSTRINGTerminalRuleCall_11_1_0; }

		//conditionResult=ConditionResult?
		public Assignment getConditionResultAssignment_12() { return cConditionResultAssignment_12; }

		//ConditionResult
		public RuleCall getConditionResultConditionResultParserRuleCall_12_0() { return cConditionResultConditionResultParserRuleCall_12_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
	}

	public class AssureResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssureResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerificationExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssuranceCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClaimResultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionResultParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AssureResult:
		//	VerificationExpr | AssuranceCase | ClaimResult | ConditionResult;
		@Override public ParserRule getRule() { return rule; }

		//VerificationExpr | AssuranceCase | ClaimResult | ConditionResult
		public Alternatives getAlternatives() { return cAlternatives; }

		//VerificationExpr
		public RuleCall getVerificationExprParserRuleCall_0() { return cVerificationExprParserRuleCall_0; }

		//AssuranceCase
		public RuleCall getAssuranceCaseParserRuleCall_1() { return cAssuranceCaseParserRuleCall_1; }

		//ClaimResult
		public RuleCall getClaimResultParserRuleCall_2() { return cClaimResultParserRuleCall_2; }

		//ConditionResult
		public RuleCall getConditionResultParserRuleCall_3() { return cConditionResultParserRuleCall_3; }
	}

	public class VerificationExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVerificationActivityResultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElseResultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenResultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VerificationExpr:
		//	VerificationActivityResult | ElseResult | ThenResult;
		@Override public ParserRule getRule() { return rule; }

		//VerificationActivityResult | ElseResult | ThenResult
		public Alternatives getAlternatives() { return cAlternatives; }

		//VerificationActivityResult
		public RuleCall getVerificationActivityResultParserRuleCall_0() { return cVerificationActivityResultParserRuleCall_0; }

		//ElseResult
		public RuleCall getElseResultParserRuleCall_1() { return cElseResultParserRuleCall_1; }

		//ThenResult
		public RuleCall getThenResultParserRuleCall_2() { return cThenResultParserRuleCall_2; }
	}

	public class ElseResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstVerificationExprParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cErrorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cErrorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cErrorVerificationExprParserRuleCall_2_1_0 = (RuleCall)cErrorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFailKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFailAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFailVerificationExprParserRuleCall_3_1_0 = (RuleCall)cFailAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTimeoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTimeoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTimeoutVerificationExprParserRuleCall_4_1_0 = (RuleCall)cTimeoutAssignment_4_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDidFailAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDidFailElseTypeEnumRuleCall_6_0 = (RuleCall)cDidFailAssignment_6.eContents().get(0);
		private final Assignment cMetricsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMetricsMetricsParserRuleCall_7_0 = (RuleCall)cMetricsAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ElseResult:
		//	"else" first+=VerificationExpr+ ("error" error+=VerificationExpr+)? ("fail" fail+=VerificationExpr+)? ("timeout"
		//	timeout+=VerificationExpr+)? "[" didFail=ElseType? metrics=Metrics "]";
		@Override public ParserRule getRule() { return rule; }

		//"else" first+=VerificationExpr+ ("error" error+=VerificationExpr+)? ("fail" fail+=VerificationExpr+)? ("timeout"
		//timeout+=VerificationExpr+)? "[" didFail=ElseType? metrics=Metrics "]"
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//first+=VerificationExpr+
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//VerificationExpr
		public RuleCall getFirstVerificationExprParserRuleCall_1_0() { return cFirstVerificationExprParserRuleCall_1_0; }

		//("error" error+=VerificationExpr+)?
		public Group getGroup_2() { return cGroup_2; }

		//"error"
		public Keyword getErrorKeyword_2_0() { return cErrorKeyword_2_0; }

		//error+=VerificationExpr+
		public Assignment getErrorAssignment_2_1() { return cErrorAssignment_2_1; }

		//VerificationExpr
		public RuleCall getErrorVerificationExprParserRuleCall_2_1_0() { return cErrorVerificationExprParserRuleCall_2_1_0; }

		//("fail" fail+=VerificationExpr+)?
		public Group getGroup_3() { return cGroup_3; }

		//"fail"
		public Keyword getFailKeyword_3_0() { return cFailKeyword_3_0; }

		//fail+=VerificationExpr+
		public Assignment getFailAssignment_3_1() { return cFailAssignment_3_1; }

		//VerificationExpr
		public RuleCall getFailVerificationExprParserRuleCall_3_1_0() { return cFailVerificationExprParserRuleCall_3_1_0; }

		//("timeout" timeout+=VerificationExpr+)?
		public Group getGroup_4() { return cGroup_4; }

		//"timeout"
		public Keyword getTimeoutKeyword_4_0() { return cTimeoutKeyword_4_0; }

		//timeout+=VerificationExpr+
		public Assignment getTimeoutAssignment_4_1() { return cTimeoutAssignment_4_1; }

		//VerificationExpr
		public RuleCall getTimeoutVerificationExprParserRuleCall_4_1_0() { return cTimeoutVerificationExprParserRuleCall_4_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//didFail=ElseType?
		public Assignment getDidFailAssignment_6() { return cDidFailAssignment_6; }

		//ElseType
		public RuleCall getDidFailElseTypeEnumRuleCall_6_0() { return cDidFailElseTypeEnumRuleCall_6_0; }

		//metrics=Metrics
		public Assignment getMetricsAssignment_7() { return cMetricsAssignment_7; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_7_0() { return cMetricsMetricsParserRuleCall_7_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class ThenResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThenResult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstVerificationExprParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondVerificationExprParserRuleCall_3_0 = (RuleCall)cSecondAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDidThenFailAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cDidThenFailThenfailedKeyword_5_0 = (Keyword)cDidThenFailAssignment_5.eContents().get(0);
		private final Assignment cMetricsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMetricsMetricsParserRuleCall_6_0 = (RuleCall)cMetricsAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ThenResult:
		//	"then" first+=VerificationExpr+ "do" second+=VerificationExpr+ "[" didThenFail?="thenfailed"? metrics=Metrics "]";
		@Override public ParserRule getRule() { return rule; }

		//"then" first+=VerificationExpr+ "do" second+=VerificationExpr+ "[" didThenFail?="thenfailed"? metrics=Metrics "]"
		public Group getGroup() { return cGroup; }

		//"then"
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }

		//first+=VerificationExpr+
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//VerificationExpr
		public RuleCall getFirstVerificationExprParserRuleCall_1_0() { return cFirstVerificationExprParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//second+=VerificationExpr+
		public Assignment getSecondAssignment_3() { return cSecondAssignment_3; }

		//VerificationExpr
		public RuleCall getSecondVerificationExprParserRuleCall_3_0() { return cSecondVerificationExprParserRuleCall_3_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//didThenFail?="thenfailed"?
		public Assignment getDidThenFailAssignment_5() { return cDidThenFailAssignment_5; }

		//"thenfailed"
		public Keyword getDidThenFailThenfailedKeyword_5_0() { return cDidThenFailThenfailedKeyword_5_0; }

		//metrics=Metrics
		public Assignment getMetricsAssignment_6() { return cMetricsAssignment_6; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_6_0() { return cMetricsMetricsParserRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class MetricsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metrics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTbdcountKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTbdCountAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTbdCountINTTerminalRuleCall_0_1_0 = (RuleCall)cTbdCountAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSuccesscountKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuccessCountAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuccessCountINTTerminalRuleCall_1_1_0 = (RuleCall)cSuccessCountAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFailcountKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFailCountAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFailCountINTTerminalRuleCall_2_1_0 = (RuleCall)cFailCountAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTimeoutcountKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeoutCountAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeoutCountINTTerminalRuleCall_3_1_0 = (RuleCall)cTimeoutCountAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cErrorcountKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cErrorCountAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cErrorCountINTTerminalRuleCall_4_1_0 = (RuleCall)cErrorCountAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDidelsecountKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDidelseCountAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDidelseCountINTTerminalRuleCall_5_1_0 = (RuleCall)cDidelseCountAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cThenskipcountKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cThenskipCountAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cThenskipCountINTTerminalRuleCall_6_1_0 = (RuleCall)cThenskipCountAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPrefailcountKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPreconditionfailCountAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPreconditionfailCountINTTerminalRuleCall_7_1_0 = (RuleCall)cPreconditionfailCountAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cValidfailcountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cValidationfailCountAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValidationfailCountINTTerminalRuleCall_8_1_0 = (RuleCall)cValidationfailCountAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWeightKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cWeightAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_9_1_0 = (RuleCall)cWeightAssignment_9_1.eContents().get(0);
		
		//Metrics:
		//	("tbdcount" tbdCount=INT)? ("successcount" successCount=INT)? ("failcount" failCount=INT)? ("timeoutcount"
		//	timeoutCount=INT)? ("errorcount" errorCount=INT)? ("didelsecount" didelseCount=INT)? // else branch executed
		//	("thenskipcount" thenskipCount=INT)? ("prefailcount" preconditionfailCount=INT)? ("validfailcount"
		//	validationfailCount=INT)? ("weight" weight=INT)?;
		@Override public ParserRule getRule() { return rule; }

		//("tbdcount" tbdCount=INT)? ("successcount" successCount=INT)? ("failcount" failCount=INT)? ("timeoutcount"
		//timeoutCount=INT)? ("errorcount" errorCount=INT)? ("didelsecount" didelseCount=INT)? // else branch executed
		//("thenskipcount" thenskipCount=INT)? ("prefailcount" preconditionfailCount=INT)? ("validfailcount"
		//validationfailCount=INT)? ("weight" weight=INT)?
		public Group getGroup() { return cGroup; }

		//("tbdcount" tbdCount=INT)?
		public Group getGroup_0() { return cGroup_0; }

		//"tbdcount"
		public Keyword getTbdcountKeyword_0_0() { return cTbdcountKeyword_0_0; }

		//tbdCount=INT
		public Assignment getTbdCountAssignment_0_1() { return cTbdCountAssignment_0_1; }

		//INT
		public RuleCall getTbdCountINTTerminalRuleCall_0_1_0() { return cTbdCountINTTerminalRuleCall_0_1_0; }

		//("successcount" successCount=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"successcount"
		public Keyword getSuccesscountKeyword_1_0() { return cSuccesscountKeyword_1_0; }

		//successCount=INT
		public Assignment getSuccessCountAssignment_1_1() { return cSuccessCountAssignment_1_1; }

		//INT
		public RuleCall getSuccessCountINTTerminalRuleCall_1_1_0() { return cSuccessCountINTTerminalRuleCall_1_1_0; }

		//("failcount" failCount=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"failcount"
		public Keyword getFailcountKeyword_2_0() { return cFailcountKeyword_2_0; }

		//failCount=INT
		public Assignment getFailCountAssignment_2_1() { return cFailCountAssignment_2_1; }

		//INT
		public RuleCall getFailCountINTTerminalRuleCall_2_1_0() { return cFailCountINTTerminalRuleCall_2_1_0; }

		//("timeoutcount" timeoutCount=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"timeoutcount"
		public Keyword getTimeoutcountKeyword_3_0() { return cTimeoutcountKeyword_3_0; }

		//timeoutCount=INT
		public Assignment getTimeoutCountAssignment_3_1() { return cTimeoutCountAssignment_3_1; }

		//INT
		public RuleCall getTimeoutCountINTTerminalRuleCall_3_1_0() { return cTimeoutCountINTTerminalRuleCall_3_1_0; }

		//("errorcount" errorCount=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"errorcount"
		public Keyword getErrorcountKeyword_4_0() { return cErrorcountKeyword_4_0; }

		//errorCount=INT
		public Assignment getErrorCountAssignment_4_1() { return cErrorCountAssignment_4_1; }

		//INT
		public RuleCall getErrorCountINTTerminalRuleCall_4_1_0() { return cErrorCountINTTerminalRuleCall_4_1_0; }

		//("didelsecount" didelseCount=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"didelsecount"
		public Keyword getDidelsecountKeyword_5_0() { return cDidelsecountKeyword_5_0; }

		//didelseCount=INT
		public Assignment getDidelseCountAssignment_5_1() { return cDidelseCountAssignment_5_1; }

		//INT
		public RuleCall getDidelseCountINTTerminalRuleCall_5_1_0() { return cDidelseCountINTTerminalRuleCall_5_1_0; }

		//("thenskipcount" thenskipCount=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"thenskipcount"
		public Keyword getThenskipcountKeyword_6_0() { return cThenskipcountKeyword_6_0; }

		//thenskipCount=INT
		public Assignment getThenskipCountAssignment_6_1() { return cThenskipCountAssignment_6_1; }

		//INT
		public RuleCall getThenskipCountINTTerminalRuleCall_6_1_0() { return cThenskipCountINTTerminalRuleCall_6_1_0; }

		//("prefailcount" preconditionfailCount=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"prefailcount"
		public Keyword getPrefailcountKeyword_7_0() { return cPrefailcountKeyword_7_0; }

		//preconditionfailCount=INT
		public Assignment getPreconditionfailCountAssignment_7_1() { return cPreconditionfailCountAssignment_7_1; }

		//INT
		public RuleCall getPreconditionfailCountINTTerminalRuleCall_7_1_0() { return cPreconditionfailCountINTTerminalRuleCall_7_1_0; }

		//("validfailcount" validationfailCount=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"validfailcount"
		public Keyword getValidfailcountKeyword_8_0() { return cValidfailcountKeyword_8_0; }

		//validationfailCount=INT
		public Assignment getValidationfailCountAssignment_8_1() { return cValidationfailCountAssignment_8_1; }

		//INT
		public RuleCall getValidationfailCountINTTerminalRuleCall_8_1_0() { return cValidationfailCountINTTerminalRuleCall_8_1_0; }

		//("weight" weight=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"weight"
		public Keyword getWeightKeyword_9_0() { return cWeightKeyword_9_0; }

		//weight=INT
		public Assignment getWeightAssignment_9_1() { return cWeightAssignment_9_1; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_9_1_0() { return cWeightINTTerminalRuleCall_9_1_0; }
	}

	public class ResultIssueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultIssue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIssueTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIssueTypeResultIssueTypeEnumRuleCall_0_0 = (RuleCall)cIssueTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExceptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExceptionTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExceptionTypeSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cExceptionTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTargetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTargetEObjectCrossReference_4_1_0 = (CrossReference)cTargetAssignment_4_1.eContents().get(0);
		private final RuleCall cTargetEObjectURIIDParserRuleCall_4_1_0_1 = (RuleCall)cTargetEObjectCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIssuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIssuesResultIssueParserRuleCall_5_1_0 = (RuleCall)cIssuesAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//// use it for failures, warnings and successes.
		//ResultIssue:
		//	issueType=ResultIssueType (":" name=ID)? message=STRING ("exception" exceptionType=STRING)? ("target"
		//	target=[ecore::EObject|URIID])? ("[" issues+=ResultIssue+ "]")?;
		@Override public ParserRule getRule() { return rule; }

		//issueType=ResultIssueType (":" name=ID)? message=STRING ("exception" exceptionType=STRING)? ("target"
		//target=[ecore::EObject|URIID])? ("[" issues+=ResultIssue+ "]")?
		public Group getGroup() { return cGroup; }

		//issueType=ResultIssueType
		public Assignment getIssueTypeAssignment_0() { return cIssueTypeAssignment_0; }

		//ResultIssueType
		public RuleCall getIssueTypeResultIssueTypeEnumRuleCall_0_0() { return cIssueTypeResultIssueTypeEnumRuleCall_0_0; }

		//(":" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//message=STRING
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_0() { return cMessageSTRINGTerminalRuleCall_2_0; }

		//("exception" exceptionType=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"exception"
		public Keyword getExceptionKeyword_3_0() { return cExceptionKeyword_3_0; }

		//exceptionType=STRING
		public Assignment getExceptionTypeAssignment_3_1() { return cExceptionTypeAssignment_3_1; }

		//STRING
		public RuleCall getExceptionTypeSTRINGTerminalRuleCall_3_1_0() { return cExceptionTypeSTRINGTerminalRuleCall_3_1_0; }

		//("target" target=[ecore::EObject|URIID])?
		public Group getGroup_4() { return cGroup_4; }

		//"target"
		public Keyword getTargetKeyword_4_0() { return cTargetKeyword_4_0; }

		//target=[ecore::EObject|URIID]
		public Assignment getTargetAssignment_4_1() { return cTargetAssignment_4_1; }

		//[ecore::EObject|URIID]
		public CrossReference getTargetEObjectCrossReference_4_1_0() { return cTargetEObjectCrossReference_4_1_0; }

		//URIID
		public RuleCall getTargetEObjectURIIDParserRuleCall_4_1_0_1() { return cTargetEObjectURIIDParserRuleCall_4_1_0_1; }

		//("[" issues+=ResultIssue+ "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//issues+=ResultIssue+
		public Assignment getIssuesAssignment_5_1() { return cIssuesAssignment_5_1; }

		//ResultIssue
		public RuleCall getIssuesResultIssueParserRuleCall_5_1_0() { return cIssuesResultIssueParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}

	public class URIIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URIID");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URIID:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class AadlClassifierReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AadlClassifierReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//AadlClassifierReference:
		//	ID ("::" ID)+ ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ("::" ID)+ ("." ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ElseTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ElseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFAILEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFAILFailKeyword_0_0 = (Keyword)cFAILEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTIMEOUTTimeoutKeyword_1_0 = (Keyword)cTIMEOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cERRORErrorKeyword_2_0 = (Keyword)cERROREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ElseType:
		//	FAIL="fail" | TIMEOUT="timeout" | ERROR="error";
		public EnumRule getRule() { return rule; }

		//FAIL="fail" | TIMEOUT="timeout" | ERROR="error"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FAIL="fail"
		public EnumLiteralDeclaration getFAILEnumLiteralDeclaration_0() { return cFAILEnumLiteralDeclaration_0; }

		//"fail"
		public Keyword getFAILFailKeyword_0_0() { return cFAILFailKeyword_0_0; }

		//TIMEOUT="timeout"
		public EnumLiteralDeclaration getTIMEOUTEnumLiteralDeclaration_1() { return cTIMEOUTEnumLiteralDeclaration_1; }

		//"timeout"
		public Keyword getTIMEOUTTimeoutKeyword_1_0() { return cTIMEOUTTimeoutKeyword_1_0; }

		//ERROR="error"
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_2() { return cERROREnumLiteralDeclaration_2; }

		//"error"
		public Keyword getERRORErrorKeyword_2_0() { return cERRORErrorKeyword_2_0; }
	}

	public class ResultIssueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ResultIssueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cERRORErrorKeyword_0_0 = (Keyword)cERROREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWARNINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWARNINGWarningKeyword_1_0 = (Keyword)cWARNINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUCCESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUCCESSSuccessKeyword_2_0 = (Keyword)cSUCCESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINFOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINFOInfoKeyword_3_0 = (Keyword)cINFOEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ResultIssueType:
		//	ERROR="error" | WARNING="warning" | SUCCESS="success" | INFO="info";
		public EnumRule getRule() { return rule; }

		//ERROR="error" | WARNING="warning" | SUCCESS="success" | INFO="info"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ERROR="error"
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_0() { return cERROREnumLiteralDeclaration_0; }

		//"error"
		public Keyword getERRORErrorKeyword_0_0() { return cERRORErrorKeyword_0_0; }

		//WARNING="warning"
		public EnumLiteralDeclaration getWARNINGEnumLiteralDeclaration_1() { return cWARNINGEnumLiteralDeclaration_1; }

		//"warning"
		public Keyword getWARNINGWarningKeyword_1_0() { return cWARNINGWarningKeyword_1_0; }

		//SUCCESS="success"
		public EnumLiteralDeclaration getSUCCESSEnumLiteralDeclaration_2() { return cSUCCESSEnumLiteralDeclaration_2; }

		//"success"
		public Keyword getSUCCESSSuccessKeyword_2_0() { return cSUCCESSSuccessKeyword_2_0; }

		//INFO="info"
		public EnumLiteralDeclaration getINFOEnumLiteralDeclaration_3() { return cINFOEnumLiteralDeclaration_3; }

		//"info"
		public Keyword getINFOInfoKeyword_3_0() { return cINFOInfoKeyword_3_0; }
	}

	public class VerificationResultStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationResultState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTBDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTBDTbdKeyword_0_0 = (Keyword)cTBDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUCCESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUCCESSSuccessKeyword_1_0 = (Keyword)cSUCCESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFAILEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFAILFailKeyword_2_0 = (Keyword)cFAILEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cERRORErrorKeyword_3_0 = (Keyword)cERROREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEOUTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTIMEOUTTimeoutKeyword_4_0 = (Keyword)cTIMEOUTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum VerificationResultState:
		//	TBD="tbd" | SUCCESS="success" | FAIL="fail" | ERROR="error" | TIMEOUT="timeout";
		public EnumRule getRule() { return rule; }

		//TBD="tbd" | SUCCESS="success" | FAIL="fail" | ERROR="error" | TIMEOUT="timeout"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TBD="tbd"
		public EnumLiteralDeclaration getTBDEnumLiteralDeclaration_0() { return cTBDEnumLiteralDeclaration_0; }

		//"tbd"
		public Keyword getTBDTbdKeyword_0_0() { return cTBDTbdKeyword_0_0; }

		//SUCCESS="success"
		public EnumLiteralDeclaration getSUCCESSEnumLiteralDeclaration_1() { return cSUCCESSEnumLiteralDeclaration_1; }

		//"success"
		public Keyword getSUCCESSSuccessKeyword_1_0() { return cSUCCESSSuccessKeyword_1_0; }

		//FAIL="fail"
		public EnumLiteralDeclaration getFAILEnumLiteralDeclaration_2() { return cFAILEnumLiteralDeclaration_2; }

		//"fail"
		public Keyword getFAILFailKeyword_2_0() { return cFAILFailKeyword_2_0; }

		//ERROR="error"
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_3() { return cERROREnumLiteralDeclaration_3; }

		//"error"
		public Keyword getERRORErrorKeyword_3_0() { return cERRORErrorKeyword_3_0; }

		//TIMEOUT="timeout"
		public EnumLiteralDeclaration getTIMEOUTEnumLiteralDeclaration_4() { return cTIMEOUTEnumLiteralDeclaration_4; }

		//"timeout"
		public Keyword getTIMEOUTTimeoutKeyword_4_0() { return cTIMEOUTTimeoutKeyword_4_0; }
	}

	public class VerificationExecutionStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationExecutionState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTODOEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTODOTodoKeyword_0_0 = (Keyword)cTODOEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRUNNINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRUNNINGRunningKeyword_1_0 = (Keyword)cRUNNINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREDOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREDORedoKeyword_2_0 = (Keyword)cREDOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPLETEDCompletedKeyword_3_0 = (Keyword)cCOMPLETEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VerificationExecutionState:
		//	TODO= // verification to be performed
		//	"todo" | RUNNING= // verification in progress (background processing)
		//	"running" | REDO= // invalidated while in progress. redo verification.
		//	"redo" | COMPLETED= // completed. verification result is valid
		//	"completed";
		public EnumRule getRule() { return rule; }

		//TODO= // verification to be performed
		//"todo" | RUNNING= // verification in progress (background processing)
		//"running" | REDO= // invalidated while in progress. redo verification.
		//"redo" | COMPLETED= // completed. verification result is valid
		//"completed"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TODO= // verification to be performed
		//"todo"
		public EnumLiteralDeclaration getTODOEnumLiteralDeclaration_0() { return cTODOEnumLiteralDeclaration_0; }

		//// verification to be performed
		//"todo"
		public Keyword getTODOTodoKeyword_0_0() { return cTODOTodoKeyword_0_0; }

		//RUNNING= // verification in progress (background processing)
		//"running"
		public EnumLiteralDeclaration getRUNNINGEnumLiteralDeclaration_1() { return cRUNNINGEnumLiteralDeclaration_1; }

		//// verification in progress (background processing)
		//"running"
		public Keyword getRUNNINGRunningKeyword_1_0() { return cRUNNINGRunningKeyword_1_0; }

		//REDO= // invalidated while in progress. redo verification.
		//"redo"
		public EnumLiteralDeclaration getREDOEnumLiteralDeclaration_2() { return cREDOEnumLiteralDeclaration_2; }

		//// invalidated while in progress. redo verification.
		//"redo"
		public Keyword getREDORedoKeyword_2_0() { return cREDORedoKeyword_2_0; }

		//COMPLETED= // completed. verification result is valid
		//"completed"
		public EnumLiteralDeclaration getCOMPLETEDEnumLiteralDeclaration_3() { return cCOMPLETEDEnumLiteralDeclaration_3; }

		//// completed. verification result is valid
		//"completed"
		public Keyword getCOMPLETEDCompletedKeyword_3_0() { return cCOMPLETEDCompletedKeyword_3_0; }
	}
	
	private final AssuranceCaseElements pAssuranceCase;
	private final ClaimResultElements pClaimResult;
	private final ConditionResultElements pConditionResult;
	private final VerificationActivityResultElements pVerificationActivityResult;
	private final AssureResultElements pAssureResult;
	private final ElseTypeElements unknownRuleElseType;
	private final VerificationExprElements pVerificationExpr;
	private final ElseResultElements pElseResult;
	private final ThenResultElements pThenResult;
	private final MetricsElements pMetrics;
	private final ResultIssueElements pResultIssue;
	private final ResultIssueTypeElements unknownRuleResultIssueType;
	private final VerificationResultStateElements unknownRuleVerificationResultState;
	private final VerificationExecutionStateElements unknownRuleVerificationExecutionState;
	private final URIIDElements pURIID;
	private final AadlClassifierReferenceElements pAadlClassifierReference;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AssureGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAssuranceCase = new AssuranceCaseElements();
		this.pClaimResult = new ClaimResultElements();
		this.pConditionResult = new ConditionResultElements();
		this.pVerificationActivityResult = new VerificationActivityResultElements();
		this.pAssureResult = new AssureResultElements();
		this.unknownRuleElseType = new ElseTypeElements();
		this.pVerificationExpr = new VerificationExprElements();
		this.pElseResult = new ElseResultElements();
		this.pThenResult = new ThenResultElements();
		this.pMetrics = new MetricsElements();
		this.pResultIssue = new ResultIssueElements();
		this.unknownRuleResultIssueType = new ResultIssueTypeElements();
		this.unknownRuleVerificationResultState = new VerificationResultStateElements();
		this.unknownRuleVerificationExecutionState = new VerificationExecutionStateElements();
		this.pURIID = new URIIDElements();
		this.pAadlClassifierReference = new AadlClassifierReferenceElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.assure.Assure".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// result for a system in the architecture hierarchy
	//AssuranceCase:
	//	"case" name=QualifiedName ("for" target=[Alisa::AssurancePlan|QualifiedName])? ("system" targetSystem=ID)? "["
	//	metrics=Metrics ("message" message=STRING)? claimResult+=ClaimResult* subAssuranceCase+=AssuranceCase* "]";
	public AssuranceCaseElements getAssuranceCaseAccess() {
		return pAssuranceCase;
	}
	
	public ParserRule getAssuranceCaseRule() {
		return getAssuranceCaseAccess().getRule();
	}

	//// Result of meeting a requirement
	//ClaimResult:
	//	"claim" target=[ReqSpec::Requirement|QualifiedName] "[" metrics=Metrics ("message" message=STRING)?
	//	subClaimResult+=ClaimResult* verificationActivityResult+=VerificationExpr* "]";
	public ClaimResultElements getClaimResultAccess() {
		return pClaimResult;
	}
	
	public ParserRule getClaimResultRule() {
		return getClaimResultAccess().getRule();
	}

	//ConditionResult returns VerificationResult:
	//	("precondition" {PreconditionResult} | "validation" {ValidationResult})
	//	target=[Verify::VerificationCondition|QualifiedName] "[" "executionstate" executionState=VerificationExecutionState
	//	"resultstate" resultState=VerificationResultState ("issues" "[" issues+=ResultIssue* "]")? ("report"
	//	resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	//	metrics=Metrics ("message" message=STRING)? "]";
	public ConditionResultElements getConditionResultAccess() {
		return pConditionResult;
	}
	
	public ParserRule getConditionResultRule() {
		return getConditionResultAccess().getRule();
	}

	//// result of executing a verification activity
	//VerificationActivityResult returns VerificationResult:
	//	"verification" {VerificationActivityResult} target=[Verify::VerificationActivity|QualifiedName] //	('instance' instance= [instance::InstanceObject|URIID])?
	//	"[" "executionstate" executionState=VerificationExecutionState "resultstate" resultState=VerificationResultState
	//	("issues" "[" issues+=ResultIssue* "]")? ("report" resultReport=[results::ResultReport|QualifiedName])? // pointer to separate report
	//	metrics=Metrics ("message" message=STRING)? conditionResult=ConditionResult? "]";
	public VerificationActivityResultElements getVerificationActivityResultAccess() {
		return pVerificationActivityResult;
	}
	
	public ParserRule getVerificationActivityResultRule() {
		return getVerificationActivityResultAccess().getRule();
	}

	//AssureResult:
	//	VerificationExpr | AssuranceCase | ClaimResult | ConditionResult;
	public AssureResultElements getAssureResultAccess() {
		return pAssureResult;
	}
	
	public ParserRule getAssureResultRule() {
		return getAssureResultAccess().getRule();
	}

	//enum ElseType:
	//	FAIL="fail" | TIMEOUT="timeout" | ERROR="error";
	public ElseTypeElements getElseTypeAccess() {
		return unknownRuleElseType;
	}
	
	public EnumRule getElseTypeRule() {
		return getElseTypeAccess().getRule();
	}

	//VerificationExpr:
	//	VerificationActivityResult | ElseResult | ThenResult;
	public VerificationExprElements getVerificationExprAccess() {
		return pVerificationExpr;
	}
	
	public ParserRule getVerificationExprRule() {
		return getVerificationExprAccess().getRule();
	}

	//ElseResult:
	//	"else" first+=VerificationExpr+ ("error" error+=VerificationExpr+)? ("fail" fail+=VerificationExpr+)? ("timeout"
	//	timeout+=VerificationExpr+)? "[" didFail=ElseType? metrics=Metrics "]";
	public ElseResultElements getElseResultAccess() {
		return pElseResult;
	}
	
	public ParserRule getElseResultRule() {
		return getElseResultAccess().getRule();
	}

	//ThenResult:
	//	"then" first+=VerificationExpr+ "do" second+=VerificationExpr+ "[" didThenFail?="thenfailed"? metrics=Metrics "]";
	public ThenResultElements getThenResultAccess() {
		return pThenResult;
	}
	
	public ParserRule getThenResultRule() {
		return getThenResultAccess().getRule();
	}

	//Metrics:
	//	("tbdcount" tbdCount=INT)? ("successcount" successCount=INT)? ("failcount" failCount=INT)? ("timeoutcount"
	//	timeoutCount=INT)? ("errorcount" errorCount=INT)? ("didelsecount" didelseCount=INT)? // else branch executed
	//	("thenskipcount" thenskipCount=INT)? ("prefailcount" preconditionfailCount=INT)? ("validfailcount"
	//	validationfailCount=INT)? ("weight" weight=INT)?;
	public MetricsElements getMetricsAccess() {
		return pMetrics;
	}
	
	public ParserRule getMetricsRule() {
		return getMetricsAccess().getRule();
	}

	//// use it for failures, warnings and successes.
	//ResultIssue:
	//	issueType=ResultIssueType (":" name=ID)? message=STRING ("exception" exceptionType=STRING)? ("target"
	//	target=[ecore::EObject|URIID])? ("[" issues+=ResultIssue+ "]")?;
	public ResultIssueElements getResultIssueAccess() {
		return pResultIssue;
	}
	
	public ParserRule getResultIssueRule() {
		return getResultIssueAccess().getRule();
	}

	//enum ResultIssueType:
	//	ERROR="error" | WARNING="warning" | SUCCESS="success" | INFO="info";
	public ResultIssueTypeElements getResultIssueTypeAccess() {
		return unknownRuleResultIssueType;
	}
	
	public EnumRule getResultIssueTypeRule() {
		return getResultIssueTypeAccess().getRule();
	}

	//enum VerificationResultState:
	//	TBD="tbd" | SUCCESS="success" | FAIL="fail" | ERROR="error" | TIMEOUT="timeout";
	public VerificationResultStateElements getVerificationResultStateAccess() {
		return unknownRuleVerificationResultState;
	}
	
	public EnumRule getVerificationResultStateRule() {
		return getVerificationResultStateAccess().getRule();
	}

	//enum VerificationExecutionState:
	//	TODO= // verification to be performed
	//	"todo" | RUNNING= // verification in progress (background processing)
	//	"running" | REDO= // invalidated while in progress. redo verification.
	//	"redo" | COMPLETED= // completed. verification result is valid
	//	"completed";
	public VerificationExecutionStateElements getVerificationExecutionStateAccess() {
		return unknownRuleVerificationExecutionState;
	}
	
	public EnumRule getVerificationExecutionStateRule() {
		return getVerificationExecutionStateAccess().getRule();
	}

	//URIID:
	//	STRING;
	public URIIDElements getURIIDAccess() {
		return pURIID;
	}
	
	public ParserRule getURIIDRule() {
		return getURIIDAccess().getRule();
	}

	//AadlClassifierReference:
	//	ID ("::" ID)+ ("." ID)?;
	public AadlClassifierReferenceElements getAadlClassifierReferenceAccess() {
		return pAadlClassifierReference;
	}
	
	public ParserRule getAadlClassifierReferenceRule() {
		return getAadlClassifierReferenceAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
