grammar org.osate.results.Results with org.eclipse.xtext.common.Terminals

generate results "http://www.osate.org/results/Results"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ResultReports: ResultReport | ResultReportCollection | IssuesReport;

// Collection of reports for an instance model (root), e.g., for collection of end to end flows
ResultReportCollection:
	'reports' name=ID (':' title=STRING)?
	'['
	'target' target=[ecore::EObject|URIID] // system instance or other EObject
	('description' decription=STRING)?
	content+=ResultReport*
	('issues' issues+=ReportIssue*)?
	']'
;
// one report of an analysis for one item in the instance model.
// it may be a report per SOM or per end to end flow
// result represents the result data that can be queried
ResultReport:
	'report' name=ID (':' title=STRING)?
	'['
	'target' target=[ecore::EObject|URIID] // system instance or other EObject
	('description' decription=STRING)?
	('heading' heading=STRING
	content+=ResultContributor*)?
	('results' resultData+=ResultData+)?
	('issues' issues+=ReportIssue*)?
	']'
;

IssuesReport:
	'issues' name=ID (':' title=STRING)?
	'['
	'target' target=[ecore::EObject|URIID] // system instance or other EObject
	('description' decription=STRING)?
	issues+=ReportIssue*
	']'
;

ResultIssueHolder : ResultReports | ResultContributor;

// one row to represent a contributor to the result calculation.
// this structure can be nested
// each contributor can have issues reported
// user may define a subclass of this to add analysis specific data representations
ResultContributor:
	'contributor' contributor=[ecore::EObject|URIID] // instance model element or declarative model element
	'[' 'data' cell+=STRING+ 
	('issues' issues+=ReportIssue*)?
	subcontributor+=ResultContributor*
	']'
;

// This is similar to diagnostics
ReportIssue:
	issueType=ReportIssueType
	title=STRING
	target=[ecore::EObject|URIID]
;

// default implementation of result data
// a set of name value pairs with the values expressed as strings
// user can create a subclass of this to provide a specialized representation
ResultData:
	name=ID '=' value=STRING
;

enum ReportIssueType:
	ERROR='error' |  WARNING='warning' | INFO='info' | SUCCESS='success' | FAIL='fail' | UNKNOWN = 'unknown'
;

URIID: STRING;

//terminal URIID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'#'|'@'|'/'|':')*;

