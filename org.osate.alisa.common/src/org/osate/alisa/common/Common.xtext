grammar org.osate.alisa.common.Common with org.eclipse.xtext.xbase.Xbase
//org.eclipse.xtext.common.Terminals

generate common "http://www.osate.org/alisa/common/Common"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase


	
Description : 
	( description += DescriptionElement  )+
;

DescriptionElement :
 	text = STRING | showValue = ShowValue |thisTarget?='this'
 ;


// New rule for val only
XValDeclaration returns xbase::XExpression:
	{xbase::XVariableDeclaration}
	 'val' (=> (type=JvmTypeReference name=ValidID) | name=ValidID) '=' right=XExpression
;


// New rule for val only
//ConstantDeclaration returns xbase::XExpression:
//	{xbase::XVariableDeclaration}
ConstantDeclaration returns xbase::XExpression:
	{ConstantDeclaration}
	 'constant' (=> (type=JvmTypeReference name=ValidID) | name=ValidID) '=' 
	 right=(XNumberLiteral | XStringLiteral | XBooleanLiteral)
;

ComputeDeclaration : 'compute' name=ValidID;

// Override XNumberLiteral from XBase
//Accept unit and have value converter turn it into value scaled to base unit


XNumberLiteral returns xbase::XExpression :
	{XNumberLiteralUnit} value=Number (=>  unit=[aadl2::UnitLiteral|ID])?
	;

 
// ShowValue: ref=[ConstantDecl|ID] ('%' unit=ID)?;	
 ShowValue returns ShowValue: ref=[xbase::XVariableDeclaration] ('%' unit=[aadl2::UnitLiteral|ID])?;	
 

// Qualified classifier reference
AadlClassifierReference:
	ID '::' ID ('.' ID)?;


URIID: STRING;	