/*
* generated by Xtext
*/
package org.osate.alisa.common.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CommonGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentDescriptionParserRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//Model:
		//	content=Description;
		public ParserRule getRule() { return rule; }

		//content=Description
		public Assignment getContentAssignment() { return cContentAssignment; }

		//Description
		public RuleCall getContentDescriptionParserRuleCall_0() { return cContentDescriptionParserRuleCall_0; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Assignment cDescriptionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionDescriptionElementParserRuleCall_0 = (RuleCall)cDescriptionAssignment.eContents().get(0);
		
		//Description:
		//	description+=DescriptionElement+;
		public ParserRule getRule() { return rule; }

		//description+=DescriptionElement+
		public Assignment getDescriptionAssignment() { return cDescriptionAssignment; }

		//DescriptionElement
		public RuleCall getDescriptionDescriptionElementParserRuleCall_0() { return cDescriptionDescriptionElementParserRuleCall_0; }
	}

	public class DescriptionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueShowValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cNewlineAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNewlineAmpersandKeyword_2_0 = (Keyword)cNewlineAssignment_2.eContents().get(0);
		private final Assignment cThisTargetAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cThisTargetThisKeyword_3_0 = (Keyword)cThisTargetAssignment_3.eContents().get(0);
		
		//DescriptionElement:
		//	text=STRING | value=ShowValue | newline?="&" | thisTarget?="this";
		public ParserRule getRule() { return rule; }

		//text=STRING | value=ShowValue | newline?="&" | thisTarget?="this"
		public Alternatives getAlternatives() { return cAlternatives; }

		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }

		//value=ShowValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ShowValue
		public RuleCall getValueShowValueParserRuleCall_1_0() { return cValueShowValueParserRuleCall_1_0; }

		//newline?="&"
		public Assignment getNewlineAssignment_2() { return cNewlineAssignment_2; }

		//"&"
		public Keyword getNewlineAmpersandKeyword_2_0() { return cNewlineAmpersandKeyword_2_0; }

		//thisTarget?="this"
		public Assignment getThisTargetAssignment_3() { return cThisTargetAssignment_3; }

		//"this"
		public Keyword getThisTargetThisKeyword_3_0() { return cThisTargetThisKeyword_3_0; }
	}

	public class ShowValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefConstantDeclCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefConstantDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cRefConstantDeclCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitIDTerminalRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		
		//ShowValue:
		//	ref=[ConstantDecl] ("%" unit=ID)?;
		public ParserRule getRule() { return rule; }

		//ref=[ConstantDecl] ("%" unit=ID)?
		public Group getGroup() { return cGroup; }

		//ref=[ConstantDecl]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ConstantDecl]
		public CrossReference getRefConstantDeclCrossReference_0_0() { return cRefConstantDeclCrossReference_0_0; }

		//ID
		public RuleCall getRefConstantDeclIDTerminalRuleCall_0_0_1() { return cRefConstantDeclIDTerminalRuleCall_0_0_1; }

		//("%" unit=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0() { return cPercentSignKeyword_1_0; }

		//unit=ID
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }

		//ID
		public RuleCall getUnitIDTerminalRuleCall_1_1_0() { return cUnitIDTerminalRuleCall_1_1_0; }
	}

	public class ReferencePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefEObjectCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefEObjectIDTerminalRuleCall_0_0_1 = (RuleCall)cRefEObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubpathAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubpathReferencePathParserRuleCall_1_1_0 = (RuleCall)cSubpathAssignment_1_1.eContents().get(0);
		
		//// ShowValue: ref=[ecore::EObject|ID] ('%' unit=ID)?;	
		//ReferencePath:
		//	ref=[ecore::EObject] ("." subpath=ReferencePath);
		public ParserRule getRule() { return rule; }

		//ref=[ecore::EObject] ("." subpath=ReferencePath)
		public Group getGroup() { return cGroup; }

		//ref=[ecore::EObject]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ecore::EObject]
		public CrossReference getRefEObjectCrossReference_0_0() { return cRefEObjectCrossReference_0_0; }

		//ID
		public RuleCall getRefEObjectIDTerminalRuleCall_0_0_1() { return cRefEObjectIDTerminalRuleCall_0_0_1; }

		//"." subpath=ReferencePath
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//subpath=ReferencePath
		public Assignment getSubpathAssignment_1_1() { return cSubpathAssignment_1_1; }

		//ReferencePath
		public RuleCall getSubpathReferencePathParserRuleCall_1_1_0() { return cSubpathReferencePathParserRuleCall_1_1_0; }
	}

	public class PredicateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Assignment cLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLimitConstantDeclCrossReference_2_0 = (CrossReference)cLimitAssignment_2.eContents().get(0);
		private final RuleCall cLimitConstantDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cLimitConstantDeclCrossReference_2_0.eContents().get(1);
		
		//// Dummy placeholder for comparison conditions
		//PredicateExpression:
		//	ID op=("=" | "!=" | "<" | "<=" | ">" | ">=") limit=[ConstantDecl];
		public ParserRule getRule() { return rule; }

		//ID op=("=" | "!=" | "<" | "<=" | ">" | ">=") limit=[ConstantDecl]
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//op=("=" | "!=" | "<" | "<=" | ">" | ">=")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"=" | "!=" | "<" | "<=" | ">" | ">="
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_0_0() { return cOpEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_1; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_2() { return cOpLessThanSignKeyword_1_0_2; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_3; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_4() { return cOpGreaterThanSignKeyword_1_0_4; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_5() { return cOpGreaterThanSignEqualsSignKeyword_1_0_5; }

		//limit=[ConstantDecl]
		public Assignment getLimitAssignment_2() { return cLimitAssignment_2; }

		//[ConstantDecl]
		public CrossReference getLimitConstantDeclCrossReference_2_0() { return cLimitConstantDeclCrossReference_2_0; }

		//ID
		public RuleCall getLimitConstantDeclIDTerminalRuleCall_2_0_1() { return cLimitConstantDeclIDTerminalRuleCall_2_0_1; }
	}

	public class ConstantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantvalueConstantValueParserRuleCall_2_0 = (RuleCall)cConstantvalueAssignment_2.eContents().get(0);
		
		//ConstantDecl:
		//	name=ID "=" constantvalue=ConstantValue;
		public ParserRule getRule() { return rule; }

		//name=ID "=" constantvalue=ConstantValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//constantvalue=ConstantValue
		public Assignment getConstantvalueAssignment_2() { return cConstantvalueAssignment_2; }

		//ConstantValue
		public RuleCall getConstantvalueConstantValueParserRuleCall_2_0() { return cConstantvalueConstantValueParserRuleCall_2_0; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConstantValue:
		//	StringTerm | RealTerm | IntegerTerm;
		public ParserRule getRule() { return rule; }

		//StringTerm | RealTerm | IntegerTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringTerm
		public RuleCall getStringTermParserRuleCall_0() { return cStringTermParserRuleCall_0; }

		//RealTerm
		public RuleCall getRealTermParserRuleCall_1() { return cRealTermParserRuleCall_1; }

		//IntegerTerm
		public RuleCall getIntegerTermParserRuleCall_2() { return cIntegerTermParserRuleCall_2; }
	}

	public class StringTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTerm");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringTerm:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class RealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueREALParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitIDTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//RealTerm:
		//	value=REAL unit=ID?;
		public ParserRule getRule() { return rule; }

		//value=REAL unit=ID?
		public Group getGroup() { return cGroup; }

		//value=REAL
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//REAL
		public RuleCall getValueREALParserRuleCall_0_0() { return cValueREALParserRuleCall_0_0; }

		//unit=ID?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//ID
		public RuleCall getUnitIDTerminalRuleCall_1_0() { return cUnitIDTerminalRuleCall_1_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitIDTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//IntegerTerm:
		//	value=INT unit=ID?;
		public ParserRule getRule() { return rule; }

		//value=INT unit=ID?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=ID?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//ID
		public RuleCall getUnitIDTerminalRuleCall_1_0() { return cUnitIDTerminalRuleCall_1_0; }
	}

	public class MultiLineStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiLineString");
		private final Assignment cDescriptionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionTextElementParserRuleCall_0 = (RuleCall)cDescriptionAssignment.eContents().get(0);
		
		//MultiLineString:
		//	description+=TextElement+;
		public ParserRule getRule() { return rule; }

		//description+=TextElement+
		public Assignment getDescriptionAssignment() { return cDescriptionAssignment; }

		//TextElement
		public RuleCall getDescriptionTextElementParserRuleCall_0() { return cDescriptionTextElementParserRuleCall_0; }
	}

	public class TextElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cNewlineAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNewlineAmpersandKeyword_1_0 = (Keyword)cNewlineAssignment_1.eContents().get(0);
		
		//TextElement:
		//	text=STRING | newline?="&";
		public ParserRule getRule() { return rule; }

		//text=STRING | newline?="&"
		public Alternatives getAlternatives() { return cAlternatives; }

		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }

		//newline?="&"
		public Assignment getNewlineAssignment_1() { return cNewlineAssignment_1; }

		//"&"
		public Keyword getNewlineAmpersandKeyword_1_0() { return cNewlineAmpersandKeyword_1_0; }
	}

	public class ValueStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValueString: // remove quotes from string in ValueConverter 
		//	STRING;
		public ParserRule getRule() { return rule; }

		//// remove quotes from string in ValueConverter 
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class AadlClassifierReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AadlClassifierReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//// Qualified classifier reference
		//AadlClassifierReference:
		//	(ID "::")* ID ("." ID)?;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class CatRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatRef");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Category reference. Currently it is only a single ID
		//CatRef: //('.' ID)?
		//	ID;
		public ParserRule getRule() { return rule; }

		////('.' ID)?
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class URIIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URIID");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//URIID:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final DescriptionElements pDescription;
	private final DescriptionElementElements pDescriptionElement;
	private final ShowValueElements pShowValue;
	private final ReferencePathElements pReferencePath;
	private final PredicateExpressionElements pPredicateExpression;
	private final ConstantDeclElements pConstantDecl;
	private final ConstantValueElements pConstantValue;
	private final StringTermElements pStringTerm;
	private final RealTermElements pRealTerm;
	private final REALElements pREAL;
	private final IntegerTermElements pIntegerTerm;
	private final MultiLineStringElements pMultiLineString;
	private final TextElementElements pTextElement;
	private final ValueStringElements pValueString;
	private final AadlClassifierReferenceElements pAadlClassifierReference;
	private final CatRefElements pCatRef;
	private final QualifiedNameElements pQualifiedName;
	private final URIIDElements pURIID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CommonGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDescription = new DescriptionElements();
		this.pDescriptionElement = new DescriptionElementElements();
		this.pShowValue = new ShowValueElements();
		this.pReferencePath = new ReferencePathElements();
		this.pPredicateExpression = new PredicateExpressionElements();
		this.pConstantDecl = new ConstantDeclElements();
		this.pConstantValue = new ConstantValueElements();
		this.pStringTerm = new StringTermElements();
		this.pRealTerm = new RealTermElements();
		this.pREAL = new REALElements();
		this.pIntegerTerm = new IntegerTermElements();
		this.pMultiLineString = new MultiLineStringElements();
		this.pTextElement = new TextElementElements();
		this.pValueString = new ValueStringElements();
		this.pAadlClassifierReference = new AadlClassifierReferenceElements();
		this.pCatRef = new CatRefElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pURIID = new URIIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.alisa.common.Common".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	content=Description;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Description:
	//	description+=DescriptionElement+;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//DescriptionElement:
	//	text=STRING | value=ShowValue | newline?="&" | thisTarget?="this";
	public DescriptionElementElements getDescriptionElementAccess() {
		return pDescriptionElement;
	}
	
	public ParserRule getDescriptionElementRule() {
		return getDescriptionElementAccess().getRule();
	}

	//ShowValue:
	//	ref=[ConstantDecl] ("%" unit=ID)?;
	public ShowValueElements getShowValueAccess() {
		return pShowValue;
	}
	
	public ParserRule getShowValueRule() {
		return getShowValueAccess().getRule();
	}

	//// ShowValue: ref=[ecore::EObject|ID] ('%' unit=ID)?;	
	//ReferencePath:
	//	ref=[ecore::EObject] ("." subpath=ReferencePath);
	public ReferencePathElements getReferencePathAccess() {
		return pReferencePath;
	}
	
	public ParserRule getReferencePathRule() {
		return getReferencePathAccess().getRule();
	}

	//// Dummy placeholder for comparison conditions
	//PredicateExpression:
	//	ID op=("=" | "!=" | "<" | "<=" | ">" | ">=") limit=[ConstantDecl];
	public PredicateExpressionElements getPredicateExpressionAccess() {
		return pPredicateExpression;
	}
	
	public ParserRule getPredicateExpressionRule() {
		return getPredicateExpressionAccess().getRule();
	}

	//ConstantDecl:
	//	name=ID "=" constantvalue=ConstantValue;
	public ConstantDeclElements getConstantDeclAccess() {
		return pConstantDecl;
	}
	
	public ParserRule getConstantDeclRule() {
		return getConstantDeclAccess().getRule();
	}

	//ConstantValue:
	//	StringTerm | RealTerm | IntegerTerm;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//StringTerm:
	//	value=STRING;
	public StringTermElements getStringTermAccess() {
		return pStringTerm;
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//RealTerm:
	//	value=REAL unit=ID?;
	public RealTermElements getRealTermAccess() {
		return pRealTerm;
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//REAL:
	//	INT "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//IntegerTerm:
	//	value=INT unit=ID?;
	public IntegerTermElements getIntegerTermAccess() {
		return pIntegerTerm;
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//MultiLineString:
	//	description+=TextElement+;
	public MultiLineStringElements getMultiLineStringAccess() {
		return pMultiLineString;
	}
	
	public ParserRule getMultiLineStringRule() {
		return getMultiLineStringAccess().getRule();
	}

	//TextElement:
	//	text=STRING | newline?="&";
	public TextElementElements getTextElementAccess() {
		return pTextElement;
	}
	
	public ParserRule getTextElementRule() {
		return getTextElementAccess().getRule();
	}

	//ValueString: // remove quotes from string in ValueConverter 
	//	STRING;
	public ValueStringElements getValueStringAccess() {
		return pValueString;
	}
	
	public ParserRule getValueStringRule() {
		return getValueStringAccess().getRule();
	}

	//// Qualified classifier reference
	//AadlClassifierReference:
	//	(ID "::")* ID ("." ID)?;
	public AadlClassifierReferenceElements getAadlClassifierReferenceAccess() {
		return pAadlClassifierReference;
	}
	
	public ParserRule getAadlClassifierReferenceRule() {
		return getAadlClassifierReferenceAccess().getRule();
	}

	//// Category reference. Currently it is only a single ID
	//CatRef: //('.' ID)?
	//	ID;
	public CatRefElements getCatRefAccess() {
		return pCatRef;
	}
	
	public ParserRule getCatRefRule() {
		return getCatRefAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//URIID:
	//	STRING;
	public URIIDElements getURIIDAccess() {
		return pURIID;
	}
	
	public ParserRule getURIIDRule() {
		return getURIIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
