chapter:Introduction[Introduction]

This is text for the introduction. You can e[emphasize] elements and create multiple
paragraphs by adding a newline, like this. As you can see we also have splel checking
with corrections. 

In the following the different syntactical elements are explained by example.

section:Links[References]

The following is an link[http://www.google.com][external link] 
and if you want to refer internally you can ref:Introduction[do so as well].You can even
refer to Java code like this : codeRef[java.lang.String].

section:CodeSections[Code Sections]

A code section looks like this:

code[Java][
	class HelloWorld {
		public void sayHello(String name) {
			System.out.println("Hello "+name);
		}
	}
]

Note how the code is highlighted according to the language you choose.
It is even possible to have different language configurations to get different coloring.

section:Lists[Lists and Tables]

Lists are very similar to HTML.
We've got ordered lists:

ol[
	item[First]
	item[Second]
	item[Third]
]

and unordered lists:

ul[
	item[Foo]
	item[Bar]
	item[Baz]
]

section:Tables[Tables]

table[
tr[ td[This is a table cell] td[and another one]]
tr[ td[table rows can contain many cells] td[but each row has to contain the same number of cells]]
]

section:TODO[TODO]

todo[document todo elements]

section:Images[Images]

Images are not fully supported by the new Xtend generator,
but will of course be readded soon :-)

Images are expected to be in a subfolder called images

example:

As you see the e[outputDirectory] can be specified to match the default of the Eclipse plug-in (e[xtend-gen]).
Of course you can also change the configuration in Eclipse to match the Maven default (e[generated-sources]).
To do so right-click on the project and select e[Properties] or if you prefer a global setting choose e[Eclipse->Preferences].
In the category e[Xtend/Compiler] enter the directory name (see screenshot). It is interpreted as a
relative path to the parent of the source folder, which includes the to-be-compiled Xtend file.
%%img[images/configure-compiler-in-eclipse.png][Configuring the compiler in Eclipse][][]


%%In Xtend everything is an expression and has a return type. Statements do not exist.
%%That allows you to compose your code in interesting ways. For example, you can have a
%%code[Xtend][try catch] expression on the right hand side of an assignment:
%%code[Xtend][
%%val data = try {
%%fileContentsToString('data.txt')
%%} catch (IOException e) {
%%'dummy data'
%%}
%%]
%%If code[fileContentsToString()] throws an codeRef[java.io.IOException], it is caught and the string code['dummy data'] is assigned to the value code[data].
%%Expressions can appear as ref:fields[initializers of fields], the body of constructors
%%or methods and as values in annotations. A method body can either be a ref:blocks[block expression]
%%or a ref:templates[template expression].
