
/*
 * generated by Xtext
 */
lexer grammar InternalReqSpecLexer;


@header {
package org.osate.reqspec.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




Timecriticality : 'timecriticality';

Scheduleimpact : 'scheduleimpact';

Maturityindex : 'maturityindex';

Requirements : 'requirements';

Synchronized : 'synchronized';

Description : 'description';

Development : 'development';

Familiarity : 'familiarity';

Requirement : 'requirement';

Stakeholder : 'stakeholder';

Uncertainty : 'uncertainty';

Costimpact : 'costimpact';

Decomposes : 'decomposes';

Instanceof : 'instanceof';

Volatility : 'volatility';

Conflicts : 'conflicts';

Constants : 'constants';

Extension : 'extension';

Mitigates : 'mitigates';

Predicate : 'predicate';

Rationale : 'rationale';

Riskindex : 'riskindex';

Category : 'category';

Document : 'document';

Informal : 'informal';

Compute : 'compute';

Default : 'default';

Dropped : 'dropped';

Evolves : 'evolves';

Extends : 'extends';

Finally : 'finally';

Refines : 'refines';

Section : 'section';

Import : 'import';

Issues : 'issues';

Return : 'return';

Static : 'static';

Switch : 'switch';

KW_System : 'system';

Typeof : 'typeof';

Catch : 'catch';

False : 'false';

Goals : 'goals';

Super : 'super';

Throw : 'throw';

Value : 'value';

While : 'while';

Case : 'case';

Else : 'else';

Goal : 'goal';

Null : 'null';

This : 'this';

True : 'true';

With : 'with';

ExclamationMarkEqualsSignEqualsSign : '!==';

FullStopFullStopLessThanSign : '..<';

EqualsSignEqualsSignEqualsSign : '===';

All : 'all';

For : 'for';

Img : 'img';

New : 'new';

See : 'see';

Try : 'try';

Use : 'use';

Val : 'val';

Var : 'var';

ExclamationMarkEqualsSign : '!=';

PercentSignEqualsSign : '%=';

AmpersandAmpersand : '&&';

AsteriskAsterisk : '**';

AsteriskEqualsSign : '*=';

PlusSignPlusSign : '++';

PlusSignEqualsSign : '+=';

HyphenMinusHyphenMinus : '--';

HyphenMinusEqualsSign : '-=';

HyphenMinusGreaterThanSign : '->';

FullStopFullStop : '..';

SolidusEqualsSign : '/=';

ColonColon : '::';

LessThanSignGreaterThanSign : '<>';

EqualsSignEqualsSign : '==';

EqualsSignGreaterThanSign : '=>';

GreaterThanSignEqualsSign : '>=';

QuestionMarkFullStop : '?.';

QuestionMarkColon : '?:';

As : 'as';

Do : 'do';

If : 'if';

VerticalLineVerticalLine : '||';

ExclamationMark : '!';

NumberSign : '#';

PercentSign : '%';

Ampersand : '&';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

CommercialAt : '@';

LeftSquareBracket : '[';

RightSquareBracket : ']';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';



RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



