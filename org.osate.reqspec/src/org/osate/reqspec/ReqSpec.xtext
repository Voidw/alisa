grammar org.osate.reqspec.ReqSpec with org.osate.alisa.common.Common

generate reqSpec "http://www.osate.org/reqspec/ReqSpec"

import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.aadl.info/EMV2" as emv2
import  "http://www.osate.org/categories/Categories" as categories
import  "http://www.osate.org/organization/Organization" as org
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ReqSpec: parts +=(SystemRequirements|GlobalRequirements|StakeholderGoals|ReqDocument|GlobalConstants)+  ;

ReqSpecContainer: SystemRequirements | GlobalRequirements |  StakeholderGoals | ReqDocument | DocumentSection ;

GlobalConstants: 
	'constants' name=QualifiedName '['
	constants+=ValDeclaration* ']'
;

ContractualElement: Goal | SystemRequirement  ;

ReqRoot:  StakeholderGoals | ReqDocument | SystemRequirements | GlobalRequirements;


StakeholderGoals: 'stakeholder' 'goals' name=QualifiedName (':' title=STRING)?
	( 'for' (target=[aadl2::ComponentClassifier|AadlClassifierReference] | componentCategory+=ComponentCategory+ ))
	('use' 'constants' importConstants+=[GlobalConstants|QualifiedName]+)?
	'[' 
	(	description=Description? 
		& constants+=ValDeclaration*
		&content+=Goal* 
	    &('see''document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
				)
	']'
;

ReqDocument: 'document' name=QualifiedName (':' title=STRING)?
	'[' 
	( (  description=Description)? 
	&(content+= (DocGoal | DocRequirement |  DocumentSection))*
	 &('see''document'  docReference+=ExternalDocument+)? 
	&('issues' issues+=STRING+ )?
	)
	 ']'
;
DocumentSection returns DocumentSection:
	'section' label =ID (':' title=STRING)?
	'[' (
	 (  description=Description)? 
	
	&(content+= (DocGoal | DocRequirement |  DocumentSection))*
	)
	']' 
	;

SystemRequirements returns Requirements:
	{SystemRequirements} 'system''requirements'  name =QualifiedName (':' title=STRING)? 
	'for' target=[aadl2::ComponentClassifier|AadlClassifierReference] 
	('use' 'constants' importConstants+=[GlobalConstants|QualifiedName]+)?
	'[' 
	(
	 description=Description? 
	&constants+=ValDeclaration*
	& computes+=ComputeDeclaration* 
	& content+= SystemRequirement*
	& include+= IncludeGlobalRequirement*
	 &('see''document'  docReference+=ExternalDocument+)? 
	 &('see' 'goals'  stakeholderGoals+=[ReqRoot|QualifiedName]+)? 
	&('issues' issues+=STRING+ )?
	)
	']'
	;

GlobalRequirements returns Requirements:
	{GlobalRequirements}'global''requirements'  name =QualifiedName (':' title=STRING)? 
	('use' 'constants' importConstants+=[GlobalConstants|QualifiedName]+)?
	'[' 
	(
	 description=Description? 
	&constants+=ValDeclaration*
	& computes+=ComputeDeclaration* 
	& content+= (GlobalRequirement)*
	 &('see''document'  docReference+=ExternalDocument+)? 
	 &('see' 'goals'  stakeholderGoals+=[ReqRoot|QualifiedName]+)? 
	&('issues' issues+=STRING+ )?
	)
	']'
	;


DocGoal returns Goal:
	'goal' name=ID (':'  title=STRING )? // short string for title
	( 'for' ( targetDescription=STRING | (target=[aadl2::ComponentClassifier|AadlClassifierReference] ( targetElement=[aadl2::NamedElement|ID])?  )
		)
	)?
'['  (
 	('quality'  qualityCategory+=[categories::QualityCategory|ID]+ )?
 	&('category'  userCategory+=[categories::UserCategory|ID]+ )?
	 & description=Description? 
	&constants+=ValDeclaration* 
	&(  whencondition=WhenCondition)?  // condition under which requirement applies 
	 &rationale=Rationale? 
	 &changeUncertainty=Uncertainty? 
	 &('refines' refinesReference+=[Goal|QualifiedName]+)? 
	 &('conflicts' 'with' conflictsReference+=[Goal|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('stakeholder'  stakeholderReference+=[org::Stakeholder|QualifiedName]+)?
	 &( 'see''document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	 ']';


Goal returns Goal:
	'goal' name=ID (':'  title=STRING )? // short string for title
	( 'for'  targetElement=[aadl2::NamedElement|ID]
	)?
'['  (
 	('quality'  qualityCategory+=[categories::QualityCategory|ID]+ )?
 	&('category'  userCategory+=[categories::UserCategory|ID]+ )?
	 &(  description=Description)? 
	& (  constants+=ValDeclaration* )
	&(  whencondition=WhenCondition)?  // condition under which requirement applies 
	 &(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	 &('refines' refinesReference+=[Goal|QualifiedName]+)? 
	 &('conflicts' 'with' conflictsReference+=[Goal|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('stakeholder'  stakeholderReference+=[org::Stakeholder|QualifiedName]+)?
	&('see''goal'  goalReference+=[Goal|QualifiedName]+)?
	 &('see''document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	 ']';

SystemRequirement returns Requirement:
	'requirement'  name=ID   
	(':'  title=STRING)? 
	( 'for'  (
		targetElement=[aadl2::NamedElement|ID] )
	)?
'['	(
 	('quality'  qualityCategory+=[categories::QualityCategory|ID]+ )?
 	&('category'  userCategory+=[categories::UserCategory|ID]+ )?
	&(  description=Description)? 
	& (  constants+=ValDeclaration* )
	& (  computes+=ComputeDeclaration* )
	&(  whencondition=WhenCondition)?  // condition under which requirement applies 
	&(  predicate=ReqPredicate)?  // predicate expression 
	&(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	&('mitigates'  (exception=[ecore::EObject|ID]|exceptionText=STRING))? 
	&('refines' refinesReference+=[Requirement|QualifiedName]+)? 
	&('decomposes' decomposesReference+=[Requirement|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('development' 'stakeholder'  developmentStakeholder+=[org::Stakeholder|QualifiedName]+)?
	&('see''goal'  goalReference+=[Goal|QualifiedName]+)?
	&('see''requirement'  requirementReference+=[Requirement|QualifiedName]+)?
	 &('see''document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	']';
	
GlobalRequirement returns Requirement:
	'requirement'  name=ID   
	(':'  title=STRING)? 
	( 'for'  (componentCategory+=ComponentCategory+ | connections?='connections')	)?
'['	(
 	('quality'  qualityCategory+=[categories::QualityCategory|ID]+ )?
 	&('category'  userCategory+=[categories::UserCategory|ID]+ )?
	&(  description=Description)? 
	& (  constants+=ValDeclaration* )
	& (  computes+=ComputeDeclaration* )
	&(  whencondition=WhenCondition)?  // condition under which requirement applies 
	&(  predicate=ReqPredicate)?  // predicate expression 
	&(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	&('mitigates'  (exception=[ecore::EObject|ID]|exceptionText=STRING))? 
	&('refines' refinesReference+=[Requirement|QualifiedName]+)? 
	&('decomposes' decomposesReference+=[Requirement|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('development' 'stakeholder'  developmentStakeholder+=[org::Stakeholder|QualifiedName]+)?
	&('see''goal'  goalReference+=[Goal|QualifiedName]+)?
	&('see''requirement'  requirementReference+=[Requirement|QualifiedName]+)?
	 &('see''document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	']';
	
DocRequirement returns Requirement:
	'requirement'  name=ID   
	(':'  title=STRING)? 
	( 'for'  ( targetDescription=STRING |
		(target=[aadl2::ComponentClassifier|AadlClassifierReference] ( targetElement=[aadl2::NamedElement|ID])?  ) |
		componentCategory+=ComponentCategory+)
	)?
'['	(
 	('quality'  qualityCategory+=[categories::QualityCategory|ID]+ )?
 	&('category'  userCategory+=[categories::UserCategory|ID]+ )?
	&(  description=Description)? 
	& (  constants+=ValDeclaration* )
	& (  computes+=ComputeDeclaration* )
	&(  whencondition=WhenCondition)?  // condition under which requirement applies 
	&(  predicate=ReqPredicate)?  // predicate expression 
	&(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	&('mitigates'  (exception=[ecore::EObject|ID]|exceptionText=STRING))? 
	&('refines' refinesReference+=[Requirement|QualifiedName]+)? 
	&('decomposes' decomposesReference+=[Requirement|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('development' 'stakeholder'  developmentStakeholder+=[org::Stakeholder|QualifiedName]+)?
	&('see''goal'  goalReference+=[Goal|QualifiedName]+)?
	 &('see''document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	']';

IncludeGlobalRequirement returns IncludeGlobalRequirement:
	'include' include=[ecore::EObject|QualifiedName]
	( 'for'  (componentCategory+=ComponentCategory+	| self?='self'))?
	;
	
WhenCondition:
	'when' 
	(( 'in' 'mode' inMode+=[aadl2::Mode|ID](',' inMode+=[aadl2::Mode|ID])* )
	| ( 'in' 'error' 'state' inErrorState+=[emv2::ErrorBehaviorState|ID](',' inErrorState+=[emv2::ErrorBehaviorState|ID])* )
	| (condition=AExpression)
	)
;

ReqPredicate: InformalPredicate | Predicate | ValuePredicate;// | InputAssumption | OutputGuarantee| BehaviorEquation;

InformalPredicate: 'informal' 'predicate'  description=STRING ;
Predicate: 'predicate' xpression=AExpression ;

ValuePredicate: 'value' 'predicate' xpression=AAndExpression
	(desiredValue=DesiredValue)?
;	// intended to be restricted to deal with value limits

DesiredValue: (upto?='upto' | 'downto') value=AExpression;

//InputAssumption:  'input' 'assumption' (xpression=XExpression |'as' reference=[ecore::EObject|ID]);	
//OutputGuarantee: 'output''guarantee' (xpression=XExpression |'as' reference=[ecore::EObject|ID]);	
//BehaviorEquation: 'invariant' (xpression=XExpression |'as' reference=[ecore::EObject|ID]);

ExternalDocument : 
	docReference=DOCPATH ( '#' docFragment=DOCFRAGMENT)?
;


// path to external document and its fragment
DOCPATH: ( ID '/')* ID '.' ID;

DOCFRAGMENT: ID ('.' ID)*;

	