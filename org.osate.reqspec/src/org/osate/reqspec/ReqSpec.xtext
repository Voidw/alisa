grammar org.osate.reqspec.ReqSpec with org.osate.alisa.common.Common

generate reqSpec "http://www.osate.org/reqspec/ReqSpec"

import "http://aadl.info/AADL/2.0" as aadl2
import  "http://www.osate.org/categories/Categories" as categories
import  "http://www.osate.org/organization/Organization" as org
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

ReqSpec: parts +=(SystemRequirements|StakeholderGoals|ReqDocument)+  ;
//ReqSpec: ReqSpecs|StakeholderGoals|ReqDocument  ;

ReqSpecContainer: SystemRequirements |  StakeholderGoals | ReqDocument | DocumentSection;

ContractualElement: Goal | DocGoal| Requirement |DocRequirement ;

ReqRoot:  StakeholderGoals | ReqDocument | SystemRequirements;


StakeholderGoals: 'stakeholder' 'goals' name=ID (':' title=STRING)?
	( 'for' (target=[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] |  global?='all'))
	'[' 
	(	 (  description=Description)? 
	& (  constants+=XValDeclaration* )
		&content+=( Goal )* 
	    &('see' 'document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
				)
	']'
;

ReqDocument: 'document' name=ID (':' title=STRING)?
	'[' 
	( (  description=Description)? 
	&(content+= (DocGoal | DocRequirement |  DocumentSection))*
	&('issues' issues+=STRING+ )?
	)
	 ']'
;
DocumentSection returns DocumentSection:
	'section' label =ID (':' title=STRING)?
	'[' (
	 (  description=Description)? 
	
	&(content+= (DocGoal | DocRequirement |  DocumentSection))*
	)
	']' 
	;

SystemRequirements returns SystemRequirements:
	'system' 'requirements'  name =QualifiedName (':' title=STRING)? // 'requirement' 'specification'
//	('import' importedNamespace=QualifiedNameWithWildCard)?
	( 'for' (target=[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] | global?='all'))
	'[' 
	(
	 (  description=Description)? 
	&( constants+=XValDeclaration* )
	& (  computes+=ComputeDeclaration* )
	& (content+= (Requirement))*
	 &('see' 'document'  docReference+=ExternalDocument+)? 
	&('issues' issues+=STRING+ )?
	)
	']'
	;


	

DocGoal returns Goal:
	'goal' name=ID (':'  title=STRING )? // short string for title
	( 'for' ( targetDescription=STRING | (target=[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] ( targetElement=[aadl2::NamedElement|ID])?  )
		)
	)?
'['  (
	 ('category'  category+=[categories::RequirementCategory|ID]+)?
	 &(  description=Description)? 
	& (  constants+=XValDeclaration* )
	 &(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	 &('refines' refinesReference+=[Goal|QualifiedName]+)? 
	 &('conflicts' 'with' conflictsReference+=[Goal|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('stakeholder'  stakeholderReference+=[org::Stakeholder|QualifiedName]+)?
	 &('see' 'document' 'requirement'  documentRequirement+=[ContractualElement|QualifiedName]+)?
	 &('see' 'document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	 ']';


Goal returns Goal:
	'goal' name=ID (':'  title=STRING )? // short string for title
	( 'for'  targetElement=[aadl2::NamedElement|ID]
	)?
'['  (
	 ('category'  category+=[categories::RequirementCategory|ID]+)?
	 &(  description=Description)? 
	& (  constants+=XValDeclaration* )
	 &(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	 &('refines' refinesReference+=[Goal|QualifiedName]+)? 
	 &('conflicts' 'with' conflictsReference+=[Goal|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	 &('stakeholder'  stakeholderReference+=[org::Stakeholder|QualifiedName]+)?
	 &('see' 'document' 'requirement'  documentRequirement+=[ContractualElement|QualifiedName]+)?
	 &('see' 'document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	 ']';

// requirement without target acts as a general requirement/constraint
// becomes a "global" constraint that still takes model elements that are supplied by query 	
Requirement returns Requirement:
	'requirement'  name=ID   
	(':'  title=STRING)? 
	( 'for'  targetElement=[aadl2::NamedElement|ID]
	)?
'['	(
 	('category'  category+=[categories::RequirementCategory|ID]+ )?
	&(  description=Description)? 
	& (  constants+=XValDeclaration* )
	& (  computes+=ComputeDeclaration* )
	&(  predicate=ReqPredicate)?  // predicate expression 
	&(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	&('mitigates'  (exception=[ecore::EObject|ID]|exceptionText=STRING))? 
	&('refines' refinesReference+=[Requirement|QualifiedName]+)? 
	&('decomposes' decomposesReference+=[Requirement|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	&('see' 'goal'  goalReference+=[Goal|QualifiedName]+)?
	&('see' 'document' 'goal'  stakeholderRequirementReference+=[Goal|QualifiedName]+)?
	 &('see' 'document' 'requirement'  documentRequirement+=[ContractualElement|QualifiedName]+)?
	 &('see' 'document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	']';
	
// requirement without target acts as a general requirement/constraint
// becomes a "global" constraint that still takes model elements that are supplied by query 	
DocRequirement returns Requirement:
	'requirement'  name=ID   
	(':'  title=STRING)? 
	( 'for' ( targetDescription=STRING | (target=[aadl2::ComponentClassifier|AADLCLASSIFIERREFERENCE] ( targetElement=[aadl2::NamedElement|ID])?  )
		)
	)?
'['	(
 	('category'  category+=[categories::RequirementCategory|ID]+ )?
	&(  description=Description)? 
	& (  constants+=XValDeclaration* )
	& (  computes+=ComputeDeclaration* )
	&(  predicate=ReqPredicate)?  // predicate expression 
	&(rationale=Rationale)? 
	 &(changeUncertainty=Uncertainty)? 
	&('mitigates'  (exception=[ecore::EObject|ID]|exceptionText=STRING))? 
	&('refines' refinesReference+=[Requirement|QualifiedName]+)? 
	&('decomposes' decomposesReference+=[Requirement|QualifiedName]+)? 
	&('evolves' evolvesReference+=[Requirement|QualifiedName]+)? 
	&(dropped?='dropped' ( dropRationale=STRING )? )? 
	&('see' 'goal'  goalReference+=[Goal|QualifiedName]+)?
	&('see' 'document' 'goal'  stakeholderRequirementReference+=[Goal|QualifiedName]+)?
	 &('see' 'document' 'requirement'  documentRequirement+=[ContractualElement|QualifiedName]+)?
	 &('see' 'document'  docReference+=ExternalDocument+)? 
		&('issues' issues+=STRING+ )?
	)
	']';

ReqPredicate: InformalPredicate | XPredicate | ValueAssertion | InputAssumption | OutputGuarantee| BehaviorEquation;

InformalPredicate: 'assert' description=STRING ;
XPredicate: 'assert' 'predicate' xpression=XExpression ;

ValueAssertion: 'assert' 'value' xpression=XExpression;	
InputAssumption:  'input' 'assumption' (xpression=XExpression |'as' reference=[ecore::EObject|ID]);	
OutputGuarantee: 'output''guarantee' (xpression=XExpression |'as' reference=[ecore::EObject|ID]);	
BehaviorEquation: 'assert' 'invariant' (xpression=XExpression |'as' reference=[ecore::EObject|ID]);

ExternalDocument : 
	docReference=DOCPATH ( '#' docFragment=DOCFRAGMENT)?
;


// path to external document and its fragment
DOCPATH: ( ID '/')* ID '.' ID;

DOCFRAGMENT: ID ('.' ID)*;

	