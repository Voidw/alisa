grammar org.osate.reqspec.ReqSpec with org.osate.alisa.common.Common

generate reqSpec "http://www.osate.org/reqspec/ReqSpec"

import "http://aadl.info/AADL/2.0" as aadl2
import  "http://www.osate.org/categories/Categories" as categories
import  "http://www.osate.org/organization/Organization" as org

ReqSpec: ReqSpecModel  ;

ReqSpecContainer: ReqSpecModel  | ReqSpecFolder  ;

ContractualElement: Goal | Requirement  | Hazard;

ReqSpecModel returns ReqSpecModel:
	'package' name =ID 
	( 'for' target=[aadl2::Classifier|AadlClassifierReference])?
	( ^import += Import)*
	'[' (content+= (Goal | Requirement |  ReqSpecFolder))*
	('issues'  '[' issue+=ValueString (',' issue+=ValueString)* ']')? 
	']'
	;
	

// does not add to a qualified name
ReqSpecFolder returns ReqSpecFolder:
	'folder' label =ID 
	( 'for' target=[aadl2::Classifier|AadlClassifierReference])?
	'[' (content+= (Goal | Requirement |  ReqSpecFolder))*
	('issues'  '[' issue+=ValueString (',' issue+=ValueString)* ']')? 
	']'
	;

	

// TODO: May reference a property by referring to its definition
RSLVariable :
	'val' name = ID '=' value = ValueString
;



Goal returns Goal:
	'goal' name=ID (':'  title=ValueString )? // short string for title
	( 'for' target=[aadl2::NamedElement|ID] ('of' targetContext=[aadl2::Classifier|AadlClassifierReference])?)?
'['  (
	 ('category'  category=[categories::RequirementCategory|CatRef])?
	 &('description'  description=Description)? 
	 &('assertion'  	assert=ValueString )? 
	 &('rationale'  rationale=ValueString)? 
	 &('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	 &('refines' refinesReference+=[Goal|QualifiedName](',' refinesReference+=[Goal|QualifiedName])*)? 
	 &( subgoal+=Goal*) 
	 &('decomposes' decomposesReference+=[Goal|QualifiedName](',' decomposesReference+=[Goal|QualifiedName])*)? 
	 &('evolves'  evolvesReference+=[Goal|QualifiedName](',' evolvesReference+=[Goal|QualifiedName])*)? 
	 &('conflicts'  conflictsReference+=[Goal|QualifiedName](',' conflictsReference+=[Goal|QualifiedName])*)? 
	 &('stakeholder'  stakeholderReference+=[org::Stakeholder|QualifiedName] (',' stakeholderReference+=[org::Stakeholder|QualifiedName])*)?
	 &('see' 'goal'  stakeholderRequirementReference+=[Goal|QualifiedName] (',' stakeholderRequirementReference+=[Goal|QualifiedName])*)?
	 &('see' 'requirement'  systemRequirementReference+=[ContractualElement|QualifiedName] (',' systemRequirementReference+=[ContractualElement|QualifiedName])*)?
	 &('see' 'document'  docReference+=ExternalDocument (',' docReference+=ExternalDocument)*)? 
	)
	 ']';
	
Requirement:
	'requirement'  name=ID   
	(':'  title=ValueString)? 
 	('('  category=[categories::RequirementCategory|CatRef] ')')?
	( 'for' target=[aadl2::NamedElement|ID] ('of' targetContext=[aadl2::Classifier|AadlClassifierReference])?)?
'['	(
	('description'  description=Description)? 
	&('assertion'  assert=ValueString)?  // predicate expression 
	&('rationale'  rationale=ValueString)? 
	& (reqValue += RSLVariable)*
	&('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	&('see' 'goal'  goalReference+=[Goal|QualifiedName] (',' goalReference+=[Goal|QualifiedName])*)?
	&('mitigates'  hazardReference+=[Hazard|QualifiedName] (',' hazardReference+=[Hazard])*)? 
	&('refines'  refinesReference+=[Requirement|QualifiedName](',' refinesReference+=[Requirement|QualifiedName])*)? 
	 &( subrequirement+=Requirement*) 
	&('decomposes'  decomposesReference+=[Requirement|QualifiedName](',' decomposesReference+=[Requirement|QualifiedName])*)? 
	&('evolves'  evolvesReference+=[Requirement|QualifiedName](',' evolvesReference+=[Requirement|QualifiedName])*)? 
	&('see' 'goal'  stakeholderRequirementReference+=[Goal|QualifiedName] (',' stakeholderRequirementReference+=[Goal|QualifiedName])*)?
	&('see' 'requirement'  systemRequirementReference+=[ContractualElement|QualifiedName] (',' systemRequirementReference+=[ContractualElement|QualifiedName])*)?
	&('see' 'document'  docReference+=ExternalDocument (',' docReference+=ExternalDocument)*)? 
	)
	']';

	
	
Hazard:
	'hazard'  name=ID   
	'['(( 'for' target=[aadl2::NamedElement|ID] ('of' targetContext=[aadl2::Classifier|AadlClassifierReference])?)?
 	&('category'  category=[categories::HazardCategory|CatRef])?
	&('title'  title=ValueString)? 
	&('description'  description=ValueString)? 
	&('rationale'  rationale=ValueString)? 
	&('issues'  issue+=ValueString (','issue+=ValueString)* )? 
	)
	']';


ExternalDocument : 
	docReference=DOCPATH ( '#' docFragment=DOCFRAGMENT)?
;


// path to external document and its fragment
DOCPATH: ( ID '/')* ID '.' ID;

DOCFRAGMENT: ID ('.' ID)*;
