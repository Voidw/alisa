/*
 * generated by Xtext
 */
package org.osate.reqspec.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.osate.aadl2.ComponentImplementation
import org.osate.alisa.common.scoping.AlisaAbstractDeclarativeScopeProvider
import org.osate.reqspec.reqSpec.ContractualElement
import org.osate.reqspec.reqSpec.Requirement

import static org.osate.reqspec.util.ReqSpecUtilExtension.*
import org.eclipse.emf.common.util.EList
import org.osate.reqspec.reqSpec.ReqSpec
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.emf.ecore.EObject

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 * 
 */
class ReqSpecScopeProvider extends AlisaAbstractDeclarativeScopeProvider {
	
	
	// Reference is from Goal, ReqSpec, 
	def scope_NamedElement(ContractualElement context, EReference reference) {
		val targetClassifier = targetClassifier(context)
		if (targetClassifier != null) {
//			targetClassifier.getAllFeatures.scopeFor
			val thescope = new SimpleScope(IScope::NULLSCOPE,
				Scopes::scopedElementsFor(targetClassifier.getAllFeatures,
					QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
			if (targetClassifier instanceof ComponentImplementation) {
				new SimpleScope(thescope,
					Scopes::scopedElementsFor(targetClassifier.allSubcomponents,
						QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
			} else {
				return thescope
			}
		} else {
			IScope.NULLSCOPE
		}
	}


	def scope_XExpression(Requirement context, EReference reference) {
		return scopeForValCompute(context, IScope.NULLSCOPE)
	}
	
	def scope_JvmIdentifiableElement(XExpression context, EReference reference) {
		var result = IScope.NULLSCOPE
		println ("look for identifiable element")
		result
	}

}
