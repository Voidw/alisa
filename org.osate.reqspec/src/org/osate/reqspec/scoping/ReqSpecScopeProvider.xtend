/*
 * generated by Xtext
 */
package org.osate.reqspec.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.osate.reqspec.reqSpec.ContractualElement

import static org.osate.reqspec.util.ReqSpecUtilExtension.*
import org.osate.alisa.common.scoping.AlisaAbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.util.SimpleAttributeResolver

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class ReqSpecScopeProvider extends AlisaAbstractDeclarativeScopeProvider{ 
	
	//Reference is from Goal, ReqSpec, or Hazard
	def scope_NamedElement(ContractualElement context, EReference reference) {
		val targetClassifier = contextClassifier(context)
		if (targetClassifier != null){
			targetClassifier.getAllFeatures.scopeFor
		new SimpleScope(IScope::NULLSCOPE, Scopes::scopedElementsFor(targetClassifier.getAllFeatures, QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
		} else {
			IScope.NULLSCOPE
		}
	}
	
	def protected static scopeFor(Iterable<? extends EObject> elements) {
		new SimpleScope(IScope::NULLSCOPE, Scopes::scopedElementsFor(elements, QualifiedName::wrapper(SimpleAttributeResolver::NAME_RESOLVER)), true)
	}

}
