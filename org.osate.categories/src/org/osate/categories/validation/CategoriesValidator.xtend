/*
 * generated by Xtext
 */
package org.osate.categories.validation

import com.google.inject.Inject
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.validation.Check
import org.osate.categories.categories.CategoriesPackage
import org.osate.categories.categories.Category
import org.osate.categories.util.CategoriesUtil
import org.eclipse.xtext.naming.IQualifiedNameProvider
import java.util.List
import org.eclipse.xtext.resource.IEObjectDescription
import java.util.Stack
import java.util.Collections
import com.google.common.collect.Lists
import org.eclipse.emf.ecore.EObject

//import org.eclipse.xtext.validation.Check
/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class CategoriesValidator extends AbstractCategoriesValidator {
	extension CategoriesUtil cu = new CategoriesUtil
	@Inject
	private IGlobalScopeProvider scopeProvider;

	public static val DUPLICATE_CATEGORY = "org.osate.organization.DuplicateCategory"
	public static val CYCLES_CATEGORY = "org.osate.organization.CyclesCategory"

	/**
 * Check that Category are globally unique
 */
//	@Check
//	def void checkDuplicatesCategory(Category cat) {
//		val dups = ( scopeProvider as CommonGlobalScopeProvider).getDuplicates(cat)
//		if (!dups.empty) {
//
//			// the original is in the set
//			for (dup : dups) {
//				error(
//					"Duplicate category '" + dup.name + "'",
//					CategoriesPackage::eINSTANCE.category_Name,
//					DUPLICATE_CATEGORY,
//					dup.name.toString
//				)
//			}
//		}
//	}

/**
 * check that there are no cycles in Category extends hierarchy
 */
	@Check
	def void checkNoCycleCategoryHierarchy(Category cat) {
		val supertype = cat.superType
		if(supertype == null) return
		val visitedCategory = <Category>newHashSet()
		visitedCategory.add(cat)
		var current = supertype
		while (current != null){
			if (visitedCategory.contains(current)){
				error("Cycle in extends hierarchy of Category '"+current.name+"'",
					CategoriesPackage::eINSTANCE.category_Name,
					CYCLES_CATEGORY, supertype.name.toString
				)
				return
			}
			visitedCategory.add(current)
			current = current.superType
		}
	}

}
