/*
 * generated by Xtext
 */
parser grammar InternalCategoriesParser;

options {
	tokenVocab=InternalCategoriesLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.osate.categories.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.categories.services.CategoriesGrammarAccess;

}

@members {


	private CategoriesGrammarAccess grammarAccess;
	 	
	public InternalCategoriesParser(TokenStream input, CategoriesGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Categories";	
	} 
	   	   	
	@Override
	protected CategoriesGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleCategories
entryRuleCategories returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCategoriesRule()); }
	 iv_ruleCategories=ruleCategories 
	 { $current=$iv_ruleCategories.current; } 
	 EOF 
;

// Rule Categories
ruleCategories returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCategoriesAccess().getRequirementCategoriesParserRuleCall_0()); 
    }
    this_RequirementCategories_0=ruleRequirementCategories
    {
        $current = $this_RequirementCategories_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCategoriesAccess().getMethodCategoriesParserRuleCall_1()); 
    }
    this_MethodCategories_1=ruleMethodCategories
    {
        $current = $this_MethodCategories_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCategoriesAccess().getSelectionCategoriesParserRuleCall_2()); 
    }
    this_SelectionCategories_2=ruleSelectionCategories
    {
        $current = $this_SelectionCategories_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRequirementCategories
entryRuleRequirementCategories returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRequirementCategoriesRule()); }
	 iv_ruleRequirementCategories=ruleRequirementCategories 
	 { $current=$iv_ruleRequirementCategories.current; } 
	 EOF 
;

// Rule RequirementCategories
ruleRequirementCategories returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Requirement
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequirementCategoriesAccess().getRequirementKeyword_0());
    }

	otherlv_1=Categories
    {
    	newLeafNode(otherlv_1, grammarAccess.getRequirementCategoriesAccess().getCategoriesKeyword_1());
    }

	otherlv_2=LeftSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequirementCategoriesAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequirementCategoriesAccess().getCategoryRequirementCategoryParserRuleCall_3_0()); 
	    }
		lv_category_3_0=ruleRequirementCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementCategoriesRule());
	        }
       		add(
       			$current, 
       			"category",
        		lv_category_3_0, 
        		"RequirementCategory");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_4=RightSquareBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequirementCategoriesAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMethodCategories
entryRuleMethodCategories returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMethodCategoriesRule()); }
	 iv_ruleMethodCategories=ruleMethodCategories 
	 { $current=$iv_ruleMethodCategories.current; } 
	 EOF 
;

// Rule MethodCategories
ruleMethodCategories returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Method
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodCategoriesAccess().getMethodKeyword_0());
    }

	otherlv_1=Categories
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodCategoriesAccess().getCategoriesKeyword_1());
    }

	otherlv_2=LeftSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodCategoriesAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCategoriesAccess().getCategoryMethodCategoryParserRuleCall_3_0()); 
	    }
		lv_category_3_0=ruleMethodCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCategoriesRule());
	        }
       		add(
       			$current, 
       			"category",
        		lv_category_3_0, 
        		"MethodCategory");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_4=RightSquareBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodCategoriesAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSelectionCategories
entryRuleSelectionCategories returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectionCategoriesRule()); }
	 iv_ruleSelectionCategories=ruleSelectionCategories 
	 { $current=$iv_ruleSelectionCategories.current; } 
	 EOF 
;

// Rule SelectionCategories
ruleSelectionCategories returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Selection
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectionCategoriesAccess().getSelectionKeyword_0());
    }

	otherlv_1=Categories
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectionCategoriesAccess().getCategoriesKeyword_1());
    }

	otherlv_2=LeftSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectionCategoriesAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionCategoriesAccess().getCategorySelectionCategoryParserRuleCall_3_0()); 
	    }
		lv_category_3_0=ruleSelectionCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionCategoriesRule());
	        }
       		add(
       			$current, 
       			"category",
        		lv_category_3_0, 
        		"SelectionCategory");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_4=RightSquareBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectionCategoriesAccess().getRightSquareBracketKeyword_4());
    }
)
;







// Entry rule entryRuleRequirementCategory
entryRuleRequirementCategory returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRequirementCategoryRule()); }
	 iv_ruleRequirementCategory=ruleRequirementCategory 
	 { $current=$iv_ruleRequirementCategory.current; } 
	 EOF 
;

// Rule RequirementCategory
ruleRequirementCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getRequirementCategoryAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequirementCategoryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getRequirementCategoryAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequirementCategoryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRequirementCategoryAccess().getSubCategoriesRequirementCategoryCrossReference_1_1_0()); 
	    }
		ruleCatRef		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getRequirementCategoryAccess().getRightCurlyBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleMethodCategory
entryRuleMethodCategory returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMethodCategoryRule()); }
	 iv_ruleMethodCategory=ruleMethodCategory 
	 { $current=$iv_ruleMethodCategory.current; } 
	 EOF 
;

// Rule MethodCategory
ruleMethodCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMethodCategoryAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodCategoryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodCategoryAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodCategoryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMethodCategoryAccess().getSubCategoriesMethodCategoryCrossReference_1_1_0()); 
	    }
		ruleCatRef		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodCategoryAccess().getRightCurlyBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleSelectionCategory
entryRuleSelectionCategory returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectionCategoryRule()); }
	 iv_ruleSelectionCategory=ruleSelectionCategory 
	 { $current=$iv_ruleSelectionCategory.current; } 
	 EOF 
;

// Rule SelectionCategory
ruleSelectionCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSelectionCategoryAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionCategoryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectionCategoryAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionCategoryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSelectionCategoryAccess().getSubCategoriesSelectionCategoryCrossReference_1_1_0()); 
	    }
		ruleCatRef		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectionCategoryAccess().getRightCurlyBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleCatRef
entryRuleCatRef returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCatRefRule()); } 
	 iv_ruleCatRef=ruleCatRef 
	 { $current=$iv_ruleCatRef.current.getText(); }  
	 EOF 
;

// Rule CatRef
ruleCatRef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getCatRefAccess().getIDTerminalRuleCall()); 
    }

    ;





