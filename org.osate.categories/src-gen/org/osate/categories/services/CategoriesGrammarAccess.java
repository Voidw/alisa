/*
* generated by Xtext
*/
package org.osate.categories.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CategoriesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Categories");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementCategoriesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHazardCategoriesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVerificationCategoriesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Categories:
		//	RequirementCategories | HazardCategories | VerificationCategories;
		public ParserRule getRule() { return rule; }

		//RequirementCategories | HazardCategories | VerificationCategories
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequirementCategories
		public RuleCall getRequirementCategoriesParserRuleCall_0() { return cRequirementCategoriesParserRuleCall_0; }

		//HazardCategories
		public RuleCall getHazardCategoriesParserRuleCall_1() { return cHazardCategoriesParserRuleCall_1; }

		//VerificationCategories
		public RuleCall getVerificationCategoriesParserRuleCall_2() { return cVerificationCategoriesParserRuleCall_2; }
	}

	public class RequirementCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementCategories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoryRequirementCategoryParserRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * requirement categories uses a label instead of name to make the category itself global
		// * / RequirementCategories:
		//	"requirement" "categories" "[" category+=RequirementCategory+ "]";
		public ParserRule getRule() { return rule; }

		//"requirement" "categories" "[" category+=RequirementCategory+ "]"
		public Group getGroup() { return cGroup; }

		//"requirement"
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }

		//"categories"
		public Keyword getCategoriesKeyword_1() { return cCategoriesKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//category+=RequirementCategory+
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//RequirementCategory
		public RuleCall getCategoryRequirementCategoryParserRuleCall_3_0() { return cCategoryRequirementCategoryParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class HazardCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardCategories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHazardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoryHazardCategoryParserRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HazardCategories:
		//	"hazard" "categories" "[" category+=HazardCategory+ "]";
		public ParserRule getRule() { return rule; }

		//"hazard" "categories" "[" category+=HazardCategory+ "]"
		public Group getGroup() { return cGroup; }

		//"hazard"
		public Keyword getHazardKeyword_0() { return cHazardKeyword_0; }

		//"categories"
		public Keyword getCategoriesKeyword_1() { return cCategoriesKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//category+=HazardCategory+
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//HazardCategory
		public RuleCall getCategoryHazardCategoryParserRuleCall_3_0() { return cCategoryHazardCategoryParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class VerificationCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationCategories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoryVerificationCategoryParserRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VerificationCategories:
		//	"verification" "categories" "[" category+=VerificationCategory+ "]";
		public ParserRule getRule() { return rule; }

		//"verification" "categories" "[" category+=VerificationCategory+ "]"
		public Group getGroup() { return cGroup; }

		//"verification"
		public Keyword getVerificationKeyword_0() { return cVerificationKeyword_0; }

		//"categories"
		public Keyword getCategoriesKeyword_1() { return cCategoriesKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//category+=VerificationCategory+
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//VerificationCategory
		public RuleCall getCategoryVerificationCategoryParserRuleCall_3_0() { return cCategoryVerificationCategoryParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementCategoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerificationCategoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHazardCategoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Category:
		//	RequirementCategory | VerificationCategory | HazardCategory;
		public ParserRule getRule() { return rule; }

		//RequirementCategory | VerificationCategory | HazardCategory
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequirementCategory
		public RuleCall getRequirementCategoryParserRuleCall_0() { return cRequirementCategoryParserRuleCall_0; }

		//VerificationCategory
		public RuleCall getVerificationCategoryParserRuleCall_1() { return cVerificationCategoryParserRuleCall_1; }

		//HazardCategory
		public RuleCall getHazardCategoryParserRuleCall_2() { return cHazardCategoryParserRuleCall_2; }
	}

	public class RequirementCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsRequirementCategoryCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsRequirementCategoryCatRefParserRuleCall_2_1_0_1 = (RuleCall)cExtendsRequirementCategoryCrossReference_2_1_0.eContents().get(1);
		
		/// **
		// * Requirement category indicates the kind of requirement we are dealing with
		// * / RequirementCategory:
		//	"category" name=ID ("extends" extends=[RequirementCategory|CatRef])?;
		public ParserRule getRule() { return rule; }

		//"category" name=ID ("extends" extends=[RequirementCategory|CatRef])?
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extends=[RequirementCategory|CatRef])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=[RequirementCategory|CatRef]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//[RequirementCategory|CatRef]
		public CrossReference getExtendsRequirementCategoryCrossReference_2_1_0() { return cExtendsRequirementCategoryCrossReference_2_1_0; }

		//CatRef
		public RuleCall getExtendsRequirementCategoryCatRefParserRuleCall_2_1_0_1() { return cExtendsRequirementCategoryCatRefParserRuleCall_2_1_0_1; }
	}

	public class HazardCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HazardCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsHazardCategoryCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsHazardCategoryCatRefParserRuleCall_2_1_0_1 = (RuleCall)cExtendsHazardCategoryCrossReference_2_1_0.eContents().get(1);
		
		/// **
		// * Hazard category indicates the kind of hazard we are dealing with
		// * / HazardCategory:
		//	"category" name=ID ("extends" extends=[HazardCategory|CatRef])?;
		public ParserRule getRule() { return rule; }

		//"category" name=ID ("extends" extends=[HazardCategory|CatRef])?
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extends=[HazardCategory|CatRef])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=[HazardCategory|CatRef]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//[HazardCategory|CatRef]
		public CrossReference getExtendsHazardCategoryCrossReference_2_1_0() { return cExtendsHazardCategoryCrossReference_2_1_0; }

		//CatRef
		public RuleCall getExtendsHazardCategoryCatRefParserRuleCall_2_1_0_1() { return cExtendsHazardCategoryCatRefParserRuleCall_2_1_0_1; }
	}

	public class VerificationCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerificationCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsVerificationCategoryCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsVerificationCategoryCatRefParserRuleCall_2_1_0_1 = (RuleCall)cExtendsVerificationCategoryCrossReference_2_1_0.eContents().get(1);
		
		/// **
		// * Verification category indicates the kind of verification we are dealing with
		// * / VerificationCategory:
		//	"category" name=ID ("extends" extends=[VerificationCategory|CatRef])?;
		public ParserRule getRule() { return rule; }

		//"category" name=ID ("extends" extends=[VerificationCategory|CatRef])?
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extends=[VerificationCategory|CatRef])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=[VerificationCategory|CatRef]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//[VerificationCategory|CatRef]
		public CrossReference getExtendsVerificationCategoryCrossReference_2_1_0() { return cExtendsVerificationCategoryCrossReference_2_1_0; }

		//CatRef
		public RuleCall getExtendsVerificationCategoryCatRefParserRuleCall_2_1_0_1() { return cExtendsVerificationCategoryCatRefParserRuleCall_2_1_0_1; }
	}

	public class CatRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatRef");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Category reference. Currently it is only a single ID
		//CatRef: //('.' ID)?
		//	ID;
		public ParserRule getRule() { return rule; }

		////('.' ID)?
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final CategoriesElements pCategories;
	private final RequirementCategoriesElements pRequirementCategories;
	private final HazardCategoriesElements pHazardCategories;
	private final VerificationCategoriesElements pVerificationCategories;
	private final CategoryElements pCategory;
	private final RequirementCategoryElements pRequirementCategory;
	private final HazardCategoryElements pHazardCategory;
	private final VerificationCategoryElements pVerificationCategory;
	private final CatRefElements pCatRef;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CategoriesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCategories = new CategoriesElements();
		this.pRequirementCategories = new RequirementCategoriesElements();
		this.pHazardCategories = new HazardCategoriesElements();
		this.pVerificationCategories = new VerificationCategoriesElements();
		this.pCategory = new CategoryElements();
		this.pRequirementCategory = new RequirementCategoryElements();
		this.pHazardCategory = new HazardCategoryElements();
		this.pVerificationCategory = new VerificationCategoryElements();
		this.pCatRef = new CatRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.categories.Categories".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Categories:
	//	RequirementCategories | HazardCategories | VerificationCategories;
	public CategoriesElements getCategoriesAccess() {
		return pCategories;
	}
	
	public ParserRule getCategoriesRule() {
		return getCategoriesAccess().getRule();
	}

	/// **
	// * requirement categories uses a label instead of name to make the category itself global
	// * / RequirementCategories:
	//	"requirement" "categories" "[" category+=RequirementCategory+ "]";
	public RequirementCategoriesElements getRequirementCategoriesAccess() {
		return pRequirementCategories;
	}
	
	public ParserRule getRequirementCategoriesRule() {
		return getRequirementCategoriesAccess().getRule();
	}

	//HazardCategories:
	//	"hazard" "categories" "[" category+=HazardCategory+ "]";
	public HazardCategoriesElements getHazardCategoriesAccess() {
		return pHazardCategories;
	}
	
	public ParserRule getHazardCategoriesRule() {
		return getHazardCategoriesAccess().getRule();
	}

	//VerificationCategories:
	//	"verification" "categories" "[" category+=VerificationCategory+ "]";
	public VerificationCategoriesElements getVerificationCategoriesAccess() {
		return pVerificationCategories;
	}
	
	public ParserRule getVerificationCategoriesRule() {
		return getVerificationCategoriesAccess().getRule();
	}

	//Category:
	//	RequirementCategory | VerificationCategory | HazardCategory;
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	/// **
	// * Requirement category indicates the kind of requirement we are dealing with
	// * / RequirementCategory:
	//	"category" name=ID ("extends" extends=[RequirementCategory|CatRef])?;
	public RequirementCategoryElements getRequirementCategoryAccess() {
		return pRequirementCategory;
	}
	
	public ParserRule getRequirementCategoryRule() {
		return getRequirementCategoryAccess().getRule();
	}

	/// **
	// * Hazard category indicates the kind of hazard we are dealing with
	// * / HazardCategory:
	//	"category" name=ID ("extends" extends=[HazardCategory|CatRef])?;
	public HazardCategoryElements getHazardCategoryAccess() {
		return pHazardCategory;
	}
	
	public ParserRule getHazardCategoryRule() {
		return getHazardCategoryAccess().getRule();
	}

	/// **
	// * Verification category indicates the kind of verification we are dealing with
	// * / VerificationCategory:
	//	"category" name=ID ("extends" extends=[VerificationCategory|CatRef])?;
	public VerificationCategoryElements getVerificationCategoryAccess() {
		return pVerificationCategory;
	}
	
	public ParserRule getVerificationCategoryRule() {
		return getVerificationCategoryAccess().getRule();
	}

	//// Category reference. Currently it is only a single ID
	//CatRef: //('.' ID)?
	//	ID;
	public CatRefElements getCatRefAccess() {
		return pCatRef;
	}
	
	public ParserRule getCatRefRule() {
		return getCatRefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
