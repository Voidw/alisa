/*
 * generated by Xtext
 */
package org.osate.categories.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CategoriesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Categories");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementCategoriesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodCategoriesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionCategoriesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Categories:
		//	RequirementCategories | MethodCategories | SelectionCategories;
		@Override public ParserRule getRule() { return rule; }

		//RequirementCategories | MethodCategories | SelectionCategories
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequirementCategories
		public RuleCall getRequirementCategoriesParserRuleCall_0() { return cRequirementCategoriesParserRuleCall_0; }

		//MethodCategories
		public RuleCall getMethodCategoriesParserRuleCall_1() { return cMethodCategoriesParserRuleCall_1; }

		//SelectionCategories
		public RuleCall getSelectionCategoriesParserRuleCall_2() { return cSelectionCategoriesParserRuleCall_2; }
	}

	public class RequirementCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementCategories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoryRequirementCategoryParserRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * requirement categories uses a label instead of name to make the category itself global
		// * / RequirementCategories:
		//	"requirement" "categories" "[" category+=RequirementCategory+ "]";
		@Override public ParserRule getRule() { return rule; }

		//"requirement" "categories" "[" category+=RequirementCategory+ "]"
		public Group getGroup() { return cGroup; }

		//"requirement"
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }

		//"categories"
		public Keyword getCategoriesKeyword_1() { return cCategoriesKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//category+=RequirementCategory+
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//RequirementCategory
		public RuleCall getCategoryRequirementCategoryParserRuleCall_3_0() { return cCategoryRequirementCategoryParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class MethodCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCategories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoryMethodCategoryParserRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodCategories:
		//	"method" "categories" "[" category+=MethodCategory+ "]";
		@Override public ParserRule getRule() { return rule; }

		//"method" "categories" "[" category+=MethodCategory+ "]"
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//"categories"
		public Keyword getCategoriesKeyword_1() { return cCategoriesKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//category+=MethodCategory+
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//MethodCategory
		public RuleCall getCategoryMethodCategoryParserRuleCall_3_0() { return cCategoryMethodCategoryParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SelectionCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionCategories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCategoriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategorySelectionCategoryParserRuleCall_3_0 = (RuleCall)cCategoryAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SelectionCategories:
		//	"selection" "categories" "[" category+=SelectionCategory+ "]";
		@Override public ParserRule getRule() { return rule; }

		//"selection" "categories" "[" category+=SelectionCategory+ "]"
		public Group getGroup() { return cGroup; }

		//"selection"
		public Keyword getSelectionKeyword_0() { return cSelectionKeyword_0; }

		//"categories"
		public Keyword getCategoriesKeyword_1() { return cCategoriesKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//category+=SelectionCategory+
		public Assignment getCategoryAssignment_3() { return cCategoryAssignment_3; }

		//SelectionCategory
		public RuleCall getCategorySelectionCategoryParserRuleCall_3_0() { return cCategorySelectionCategoryParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementCategoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodCategoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionCategoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Category:
		//	RequirementCategory | MethodCategory | SelectionCategory;
		@Override public ParserRule getRule() { return rule; }

		//RequirementCategory | MethodCategory | SelectionCategory
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequirementCategory
		public RuleCall getRequirementCategoryParserRuleCall_0() { return cRequirementCategoryParserRuleCall_0; }

		//MethodCategory
		public RuleCall getMethodCategoryParserRuleCall_1() { return cMethodCategoryParserRuleCall_1; }

		//SelectionCategory
		public RuleCall getSelectionCategoryParserRuleCall_2() { return cSelectionCategoryParserRuleCall_2; }
	}

	public class RequirementCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubCategoriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSubCategoriesRequirementCategoryCrossReference_1_1_0 = (CrossReference)cSubCategoriesAssignment_1_1.eContents().get(0);
		private final RuleCall cSubCategoriesRequirementCategoryCatRefParserRuleCall_1_1_0_1 = (RuleCall)cSubCategoriesRequirementCategoryCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// **
		// * Requirement category indicates the kind of requirement we are dealing with
		// * / RequirementCategory:
		//	name=ID ("{" subCategories+=[RequirementCategory|CatRef]* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("{" subCategories+=[RequirementCategory|CatRef]* "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("{" subCategories+=[RequirementCategory|CatRef]* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//subCategories+=[RequirementCategory|CatRef]*
		public Assignment getSubCategoriesAssignment_1_1() { return cSubCategoriesAssignment_1_1; }

		//[RequirementCategory|CatRef]
		public CrossReference getSubCategoriesRequirementCategoryCrossReference_1_1_0() { return cSubCategoriesRequirementCategoryCrossReference_1_1_0; }

		//CatRef
		public RuleCall getSubCategoriesRequirementCategoryCatRefParserRuleCall_1_1_0_1() { return cSubCategoriesRequirementCategoryCatRefParserRuleCall_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class MethodCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubCategoriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSubCategoriesMethodCategoryCrossReference_1_1_0 = (CrossReference)cSubCategoriesAssignment_1_1.eContents().get(0);
		private final RuleCall cSubCategoriesMethodCategoryCatRefParserRuleCall_1_1_0_1 = (RuleCall)cSubCategoriesMethodCategoryCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// **
		// * Method category indicates the kind of verification we are dealing with
		// * / MethodCategory:
		//	name=ID ("{" subCategories+=[MethodCategory|CatRef]* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("{" subCategories+=[MethodCategory|CatRef]* "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("{" subCategories+=[MethodCategory|CatRef]* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//subCategories+=[MethodCategory|CatRef]*
		public Assignment getSubCategoriesAssignment_1_1() { return cSubCategoriesAssignment_1_1; }

		//[MethodCategory|CatRef]
		public CrossReference getSubCategoriesMethodCategoryCrossReference_1_1_0() { return cSubCategoriesMethodCategoryCrossReference_1_1_0; }

		//CatRef
		public RuleCall getSubCategoriesMethodCategoryCatRefParserRuleCall_1_1_0_1() { return cSubCategoriesMethodCategoryCatRefParserRuleCall_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class SelectionCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubCategoriesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSubCategoriesSelectionCategoryCrossReference_1_1_0 = (CrossReference)cSubCategoriesAssignment_1_1.eContents().get(0);
		private final RuleCall cSubCategoriesSelectionCategoryCatRefParserRuleCall_1_1_0_1 = (RuleCall)cSubCategoriesSelectionCategoryCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// **
		// * selection category indicates a tag for filtered selection 
		// * / SelectionCategory:
		//	name=ID ("{" subCategories+=[SelectionCategory|CatRef]* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("{" subCategories+=[SelectionCategory|CatRef]* "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("{" subCategories+=[SelectionCategory|CatRef]* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//subCategories+=[SelectionCategory|CatRef]*
		public Assignment getSubCategoriesAssignment_1_1() { return cSubCategoriesAssignment_1_1; }

		//[SelectionCategory|CatRef]
		public CrossReference getSubCategoriesSelectionCategoryCrossReference_1_1_0() { return cSubCategoriesSelectionCategoryCrossReference_1_1_0; }

		//CatRef
		public RuleCall getSubCategoriesSelectionCategoryCatRefParserRuleCall_1_1_0_1() { return cSubCategoriesSelectionCategoryCatRefParserRuleCall_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class CatRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatRef");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Category reference. Currently it is only a single ID
		//CatRef: //('.' ID)?
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		////('.' ID)?
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final CategoriesElements pCategories;
	private final RequirementCategoriesElements pRequirementCategories;
	private final MethodCategoriesElements pMethodCategories;
	private final SelectionCategoriesElements pSelectionCategories;
	private final CategoryElements pCategory;
	private final RequirementCategoryElements pRequirementCategory;
	private final MethodCategoryElements pMethodCategory;
	private final SelectionCategoryElements pSelectionCategory;
	private final CatRefElements pCatRef;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CategoriesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCategories = new CategoriesElements();
		this.pRequirementCategories = new RequirementCategoriesElements();
		this.pMethodCategories = new MethodCategoriesElements();
		this.pSelectionCategories = new SelectionCategoriesElements();
		this.pCategory = new CategoryElements();
		this.pRequirementCategory = new RequirementCategoryElements();
		this.pMethodCategory = new MethodCategoryElements();
		this.pSelectionCategory = new SelectionCategoryElements();
		this.pCatRef = new CatRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.categories.Categories".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Categories:
	//	RequirementCategories | MethodCategories | SelectionCategories;
	public CategoriesElements getCategoriesAccess() {
		return pCategories;
	}
	
	public ParserRule getCategoriesRule() {
		return getCategoriesAccess().getRule();
	}

	/// **
	// * requirement categories uses a label instead of name to make the category itself global
	// * / RequirementCategories:
	//	"requirement" "categories" "[" category+=RequirementCategory+ "]";
	public RequirementCategoriesElements getRequirementCategoriesAccess() {
		return pRequirementCategories;
	}
	
	public ParserRule getRequirementCategoriesRule() {
		return getRequirementCategoriesAccess().getRule();
	}

	//MethodCategories:
	//	"method" "categories" "[" category+=MethodCategory+ "]";
	public MethodCategoriesElements getMethodCategoriesAccess() {
		return pMethodCategories;
	}
	
	public ParserRule getMethodCategoriesRule() {
		return getMethodCategoriesAccess().getRule();
	}

	//SelectionCategories:
	//	"selection" "categories" "[" category+=SelectionCategory+ "]";
	public SelectionCategoriesElements getSelectionCategoriesAccess() {
		return pSelectionCategories;
	}
	
	public ParserRule getSelectionCategoriesRule() {
		return getSelectionCategoriesAccess().getRule();
	}

	//Category:
	//	RequirementCategory | MethodCategory | SelectionCategory;
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	/// **
	// * Requirement category indicates the kind of requirement we are dealing with
	// * / RequirementCategory:
	//	name=ID ("{" subCategories+=[RequirementCategory|CatRef]* "}")?;
	public RequirementCategoryElements getRequirementCategoryAccess() {
		return pRequirementCategory;
	}
	
	public ParserRule getRequirementCategoryRule() {
		return getRequirementCategoryAccess().getRule();
	}

	/// **
	// * Method category indicates the kind of verification we are dealing with
	// * / MethodCategory:
	//	name=ID ("{" subCategories+=[MethodCategory|CatRef]* "}")?;
	public MethodCategoryElements getMethodCategoryAccess() {
		return pMethodCategory;
	}
	
	public ParserRule getMethodCategoryRule() {
		return getMethodCategoryAccess().getRule();
	}

	/// **
	// * selection category indicates a tag for filtered selection 
	// * / SelectionCategory:
	//	name=ID ("{" subCategories+=[SelectionCategory|CatRef]* "}")?;
	public SelectionCategoryElements getSelectionCategoryAccess() {
		return pSelectionCategory;
	}
	
	public ParserRule getSelectionCategoryRule() {
		return getSelectionCategoryAccess().getRule();
	}

	//// Category reference. Currently it is only a single ID
	//CatRef: //('.' ID)?
	//	ID;
	public CatRefElements getCatRefAccess() {
		return pCatRef;
	}
	
	public ParserRule getCatRefRule() {
		return getCatRefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
