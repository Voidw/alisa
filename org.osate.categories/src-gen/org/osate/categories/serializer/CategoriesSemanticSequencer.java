/*
 * generated by Xtext
 */
package org.osate.categories.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.osate.categories.categories.CategoriesPackage;
import org.osate.categories.categories.RequirementCategories;
import org.osate.categories.categories.RequirementCategory;
import org.osate.categories.categories.SelectionCategories;
import org.osate.categories.categories.SelectionCategory;
import org.osate.categories.categories.VerificationCategories;
import org.osate.categories.categories.VerificationCategory;
import org.osate.categories.services.CategoriesGrammarAccess;

@SuppressWarnings("all")
public class CategoriesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CategoriesGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CategoriesPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CategoriesPackage.REQUIREMENT_CATEGORIES:
				sequence_RequirementCategories(context, (RequirementCategories) semanticObject); 
				return; 
			case CategoriesPackage.REQUIREMENT_CATEGORY:
				sequence_RequirementCategory(context, (RequirementCategory) semanticObject); 
				return; 
			case CategoriesPackage.SELECTION_CATEGORIES:
				sequence_SelectionCategories(context, (SelectionCategories) semanticObject); 
				return; 
			case CategoriesPackage.SELECTION_CATEGORY:
				sequence_SelectionCategory(context, (SelectionCategory) semanticObject); 
				return; 
			case CategoriesPackage.VERIFICATION_CATEGORIES:
				sequence_VerificationCategories(context, (VerificationCategories) semanticObject); 
				return; 
			case CategoriesPackage.VERIFICATION_CATEGORY:
				sequence_VerificationCategory(context, (VerificationCategory) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     category+=RequirementCategory+
	 */
	protected void sequence_RequirementCategories(EObject context, RequirementCategories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID subCategories+=[RequirementCategory|CatRef]*)
	 */
	protected void sequence_RequirementCategory(EObject context, RequirementCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     category+=SelectionCategory+
	 */
	protected void sequence_SelectionCategories(EObject context, SelectionCategories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID subCategories+=[SelectionCategory|CatRef]*)
	 */
	protected void sequence_SelectionCategory(EObject context, SelectionCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     category+=VerificationCategory+
	 */
	protected void sequence_VerificationCategories(EObject context, VerificationCategories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID subCategories+=[VerificationCategory|CatRef]*)
	 */
	protected void sequence_VerificationCategory(EObject context, VerificationCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
